
bmp280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a84  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004c10  08004c10  00005c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c58  08004c58  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c58  08004c58  00005c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c60  08004c60  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c60  08004c60  00005c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c64  08004c64  00005c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004c68  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006070  2**0
                  CONTENTS
 10 .bss          000001ec  20000070  20000070  00006070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  00006070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000756d  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014bb  00000000  00000000  0000d60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  0000eac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000592  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ffad  00000000  00000000  0000f7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009872  00000000  00000000  0002f74f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2c43  00000000  00000000  00038fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fbc04  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023dc  00000000  00000000  000fbc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000fe024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bf4 	.word	0x08004bf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004bf4 	.word	0x08004bf4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_ldivmod>:
 8000b40:	b97b      	cbnz	r3, 8000b62 <__aeabi_ldivmod+0x22>
 8000b42:	b972      	cbnz	r2, 8000b62 <__aeabi_ldivmod+0x22>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bfbe      	ittt	lt
 8000b48:	2000      	movlt	r0, #0
 8000b4a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b4e:	e006      	blt.n	8000b5e <__aeabi_ldivmod+0x1e>
 8000b50:	bf08      	it	eq
 8000b52:	2800      	cmpeq	r0, #0
 8000b54:	bf1c      	itt	ne
 8000b56:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5e:	f000 b9b5 	b.w	8000ecc <__aeabi_idiv0>
 8000b62:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b66:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	db09      	blt.n	8000b82 <__aeabi_ldivmod+0x42>
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db1a      	blt.n	8000ba8 <__aeabi_ldivmod+0x68>
 8000b72:	f000 f84d 	bl	8000c10 <__udivmoddi4>
 8000b76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7e:	b004      	add	sp, #16
 8000b80:	4770      	bx	lr
 8000b82:	4240      	negs	r0, r0
 8000b84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db1b      	blt.n	8000bc4 <__aeabi_ldivmod+0x84>
 8000b8c:	f000 f840 	bl	8000c10 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	4770      	bx	lr
 8000ba8:	4252      	negs	r2, r2
 8000baa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bae:	f000 f82f 	bl	8000c10 <__udivmoddi4>
 8000bb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bba:	b004      	add	sp, #16
 8000bbc:	4240      	negs	r0, r0
 8000bbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc2:	4770      	bx	lr
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bca:	f000 f821 	bl	8000c10 <__udivmoddi4>
 8000bce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4252      	negs	r2, r2
 8000bda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b96a 	b.w	8000ecc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	460c      	mov	r4, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14e      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	458c      	cmp	ip, r1
 8000c20:	4686      	mov	lr, r0
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	d962      	bls.n	8000cee <__udivmoddi4+0xde>
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0320 	rsb	r3, r2, #32
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	fa20 f303 	lsr.w	r3, r0, r3
 8000c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f f68c 	uxth.w	r6, ip
 8000c46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c56:	fb04 f106 	mul.w	r1, r4, r6
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c66:	f080 8112 	bcs.w	8000e8e <__udivmoddi4+0x27e>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 810f 	bls.w	8000e8e <__udivmoddi4+0x27e>
 8000c70:	3c02      	subs	r4, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a59      	subs	r1, r3, r1
 8000c76:	fa1f f38e 	uxth.w	r3, lr
 8000c7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb00 f606 	mul.w	r6, r0, r6
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x94>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c96:	f080 80fc 	bcs.w	8000e92 <__udivmoddi4+0x282>
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	f240 80f9 	bls.w	8000e92 <__udivmoddi4+0x282>
 8000ca0:	4463      	add	r3, ip
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000caa:	2100      	movs	r1, #0
 8000cac:	b11d      	cbz	r5, 8000cb6 <__udivmoddi4+0xa6>
 8000cae:	40d3      	lsrs	r3, r2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d905      	bls.n	8000cca <__udivmoddi4+0xba>
 8000cbe:	b10d      	cbz	r5, 8000cc4 <__udivmoddi4+0xb4>
 8000cc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e7f5      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000cca:	fab3 f183 	clz	r1, r3
 8000cce:	2900      	cmp	r1, #0
 8000cd0:	d146      	bne.n	8000d60 <__udivmoddi4+0x150>
 8000cd2:	42a3      	cmp	r3, r4
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xcc>
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	f0c0 80f0 	bcc.w	8000ebc <__udivmoddi4+0x2ac>
 8000cdc:	1a86      	subs	r6, r0, r2
 8000cde:	eb64 0303 	sbc.w	r3, r4, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	2d00      	cmp	r5, #0
 8000ce6:	d0e6      	beq.n	8000cb6 <__udivmoddi4+0xa6>
 8000ce8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cec:	e7e3      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	f040 8090 	bne.w	8000e14 <__udivmoddi4+0x204>
 8000cf4:	eba1 040c 	sub.w	r4, r1, ip
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb07 f006 	mul.w	r0, r7, r6
 8000d16:	4298      	cmp	r0, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x11c>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x11a>
 8000d24:	4298      	cmp	r0, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2b4>
 8000d2a:	4626      	mov	r6, r4
 8000d2c:	1a1c      	subs	r4, r3, r0
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d36:	fb08 4410 	mls	r4, r8, r0, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb00 f707 	mul.w	r7, r0, r7
 8000d42:	429f      	cmp	r7, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x148>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x146>
 8000d50:	429f      	cmp	r7, r3
 8000d52:	f200 80b0 	bhi.w	8000eb6 <__udivmoddi4+0x2a6>
 8000d56:	4620      	mov	r0, r4
 8000d58:	1bdb      	subs	r3, r3, r7
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	e7a5      	b.n	8000cac <__udivmoddi4+0x9c>
 8000d60:	f1c1 0620 	rsb	r6, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d70:	fa04 f301 	lsl.w	r3, r4, r1
 8000d74:	ea43 030c 	orr.w	r3, r3, ip
 8000d78:	40f4      	lsrs	r4, r6
 8000d7a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d7e:	0c38      	lsrs	r0, r7, #16
 8000d80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d84:	fbb4 fef0 	udiv	lr, r4, r0
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d94:	fb0e f90c 	mul.w	r9, lr, ip
 8000d98:	45a1      	cmp	r9, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x1a6>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000da6:	f080 8084 	bcs.w	8000eb2 <__udivmoddi4+0x2a2>
 8000daa:	45a1      	cmp	r9, r4
 8000dac:	f240 8081 	bls.w	8000eb2 <__udivmoddi4+0x2a2>
 8000db0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	eba4 0409 	sub.w	r4, r4, r9
 8000dba:	fa1f f983 	uxth.w	r9, r3
 8000dbe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dc2:	fb00 4413 	mls	r4, r0, r3, r4
 8000dc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dca:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d907      	bls.n	8000de2 <__udivmoddi4+0x1d2>
 8000dd2:	193c      	adds	r4, r7, r4
 8000dd4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd8:	d267      	bcs.n	8000eaa <__udivmoddi4+0x29a>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d965      	bls.n	8000eaa <__udivmoddi4+0x29a>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000de6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	429c      	cmp	r4, r3
 8000df0:	46ce      	mov	lr, r9
 8000df2:	469c      	mov	ip, r3
 8000df4:	d351      	bcc.n	8000e9a <__udivmoddi4+0x28a>
 8000df6:	d04e      	beq.n	8000e96 <__udivmoddi4+0x286>
 8000df8:	b155      	cbz	r5, 8000e10 <__udivmoddi4+0x200>
 8000dfa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dfe:	eb64 040c 	sbc.w	r4, r4, ip
 8000e02:	fa04 f606 	lsl.w	r6, r4, r6
 8000e06:	40cb      	lsrs	r3, r1
 8000e08:	431e      	orrs	r6, r3
 8000e0a:	40cc      	lsrs	r4, r1
 8000e0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e10:	2100      	movs	r1, #0
 8000e12:	e750      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000e14:	f1c2 0320 	rsb	r3, r2, #32
 8000e18:	fa20 f103 	lsr.w	r1, r0, r3
 8000e1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e20:	fa24 f303 	lsr.w	r3, r4, r3
 8000e24:	4094      	lsls	r4, r2
 8000e26:	430c      	orrs	r4, r1
 8000e28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e38:	fb08 3110 	mls	r1, r8, r0, r3
 8000e3c:	0c23      	lsrs	r3, r4, #16
 8000e3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e42:	fb00 f107 	mul.w	r1, r0, r7
 8000e46:	4299      	cmp	r1, r3
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x24c>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e52:	d22c      	bcs.n	8000eae <__udivmoddi4+0x29e>
 8000e54:	4299      	cmp	r1, r3
 8000e56:	d92a      	bls.n	8000eae <__udivmoddi4+0x29e>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	1a5b      	subs	r3, r3, r1
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e64:	fb08 3311 	mls	r3, r8, r1, r3
 8000e68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e6c:	fb01 f307 	mul.w	r3, r1, r7
 8000e70:	42a3      	cmp	r3, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x276>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e7c:	d213      	bcs.n	8000ea6 <__udivmoddi4+0x296>
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	d911      	bls.n	8000ea6 <__udivmoddi4+0x296>
 8000e82:	3902      	subs	r1, #2
 8000e84:	4464      	add	r4, ip
 8000e86:	1ae4      	subs	r4, r4, r3
 8000e88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e8c:	e739      	b.n	8000d02 <__udivmoddi4+0xf2>
 8000e8e:	4604      	mov	r4, r0
 8000e90:	e6f0      	b.n	8000c74 <__udivmoddi4+0x64>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e706      	b.n	8000ca4 <__udivmoddi4+0x94>
 8000e96:	45c8      	cmp	r8, r9
 8000e98:	d2ae      	bcs.n	8000df8 <__udivmoddi4+0x1e8>
 8000e9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	e7a8      	b.n	8000df8 <__udivmoddi4+0x1e8>
 8000ea6:	4631      	mov	r1, r6
 8000ea8:	e7ed      	b.n	8000e86 <__udivmoddi4+0x276>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	e799      	b.n	8000de2 <__udivmoddi4+0x1d2>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e7d4      	b.n	8000e5c <__udivmoddi4+0x24c>
 8000eb2:	46d6      	mov	lr, sl
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1a6>
 8000eb6:	4463      	add	r3, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e74d      	b.n	8000d58 <__udivmoddi4+0x148>
 8000ebc:	4606      	mov	r6, r0
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e70f      	b.n	8000ce4 <__udivmoddi4+0xd4>
 8000ec4:	3e02      	subs	r6, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	e730      	b.n	8000d2c <__udivmoddi4+0x11c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2203      	movs	r2, #3
 8000edc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_4;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2205      	movs	r2, #5
 8000ee8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_ULTRA_HIGH_RES;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2205      	movs	r2, #5
 8000eee:	70da      	strb	r2, [r3, #3]
	params->standby = BMP280_STANDBY_05;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	711a      	strb	r2, [r3, #4]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b08a      	sub	sp, #40	@ 0x28
 8000f06:	af04      	add	r7, sp, #16
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000f1c:	7afb      	ldrb	r3, [r7, #11]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	8af9      	ldrh	r1, [r7, #22]
 8000f22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	2302      	movs	r3, #2
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	f001 fc64 	bl	8002800 <HAL_I2C_Mem_Read>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10b      	bne.n	8000f56 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000f3e:	7d7b      	ldrb	r3, [r7, #21]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21a      	sxth	r2, r3
 8000f44:	7d3b      	ldrb	r3, [r7, #20]
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	801a      	strh	r2, [r3, #0]
		return true;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <read_register16+0x56>
	} else
		return false;
 8000f56:	2300      	movs	r3, #0

}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b08b      	sub	sp, #44	@ 0x2c
 8000f64:	af04      	add	r7, sp, #16
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	72fb      	strb	r3, [r7, #11]
 8000f70:	4613      	mov	r3, r2
 8000f72:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000f80:	7afb      	ldrb	r3, [r7, #11]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	7abb      	ldrb	r3, [r7, #10]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	8af9      	ldrh	r1, [r7, #22]
 8000f8a:	f241 3488 	movw	r4, #5000	@ 0x1388
 8000f8e:	9402      	str	r4, [sp, #8]
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	f001 fc32 	bl	8002800 <HAL_I2C_Mem_Read>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <read_data+0x46>
		return 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <read_data+0x48>
	else
		return 1;
 8000fa6:	2301      	movs	r3, #1

}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}

08000fb0 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2188      	movs	r1, #136	@ 0x88
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff9f 	bl	8000f02 <read_register16>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d06f      	beq.n	80010aa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	461a      	mov	r2, r3
 8000fd0:	218a      	movs	r1, #138	@ 0x8a
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ff95 	bl	8000f02 <read_register16>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d065      	beq.n	80010aa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	218c      	movs	r1, #140	@ 0x8c
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ff8b 	bl	8000f02 <read_register16>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d05b      	beq.n	80010aa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3306      	adds	r3, #6
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	218e      	movs	r1, #142	@ 0x8e
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff81 	bl	8000f02 <read_register16>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d051      	beq.n	80010aa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3308      	adds	r3, #8
 800100a:	461a      	mov	r2, r3
 800100c:	2190      	movs	r1, #144	@ 0x90
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ff77 	bl	8000f02 <read_register16>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d047      	beq.n	80010aa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	330a      	adds	r3, #10
 800101e:	461a      	mov	r2, r3
 8001020:	2192      	movs	r1, #146	@ 0x92
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff6d 	bl	8000f02 <read_register16>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d03d      	beq.n	80010aa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	330c      	adds	r3, #12
 8001032:	461a      	mov	r2, r3
 8001034:	2194      	movs	r1, #148	@ 0x94
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff63 	bl	8000f02 <read_register16>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d033      	beq.n	80010aa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	330e      	adds	r3, #14
 8001046:	461a      	mov	r2, r3
 8001048:	2196      	movs	r1, #150	@ 0x96
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff59 	bl	8000f02 <read_register16>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d029      	beq.n	80010aa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3310      	adds	r3, #16
 800105a:	461a      	mov	r2, r3
 800105c:	2198      	movs	r1, #152	@ 0x98
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ff4f 	bl	8000f02 <read_register16>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d01f      	beq.n	80010aa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3312      	adds	r3, #18
 800106e:	461a      	mov	r2, r3
 8001070:	219a      	movs	r1, #154	@ 0x9a
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff45 	bl	8000f02 <read_register16>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d015      	beq.n	80010aa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3314      	adds	r3, #20
 8001082:	461a      	mov	r2, r3
 8001084:	219c      	movs	r1, #156	@ 0x9c
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ff3b 	bl	8000f02 <read_register16>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00b      	beq.n	80010aa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001096:	461a      	mov	r2, r3
 8001098:	219e      	movs	r1, #158	@ 0x9e
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff31 	bl	8000f02 <read_register16>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <read_calibration_data+0xfa>

		return true;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <read_calibration_data+0xfc>
	}

	return false;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <write_register8>:



static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af04      	add	r7, sp, #16
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
 80010c0:	4613      	mov	r3, r2
 80010c2:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	89f9      	ldrh	r1, [r7, #14]
 80010d6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	1cbb      	adds	r3, r7, #2
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	f001 fa91 	bl	800260c <HAL_I2C_Mem_Write>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <write_register8+0x40>
		return false;
 80010f0:	2300      	movs	r3, #0
 80010f2:	e000      	b.n	80010f6 <write_register8+0x42>
	else
		return true;
 80010f4:	2301      	movs	r3, #1
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800110c:	2b76      	cmp	r3, #118	@ 0x76
 800110e:	d005      	beq.n	800111c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001114:	2b77      	cmp	r3, #119	@ 0x77
 8001116:	d001      	beq.n	800111c <bmp280_init+0x1e>

		return false;
 8001118:	2300      	movs	r3, #0
 800111a:	e076      	b.n	800120a <bmp280_init+0x10c>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f103 0231 	add.w	r2, r3, #49	@ 0x31
 8001122:	2301      	movs	r3, #1
 8001124:	21d0      	movs	r1, #208	@ 0xd0
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ff1a 	bl	8000f60 <read_data>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <bmp280_init+0x38>
		return false;
 8001132:	2300      	movs	r3, #0
 8001134:	e069      	b.n	800120a <bmp280_init+0x10c>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800113c:	2b58      	cmp	r3, #88	@ 0x58
 800113e:	d006      	beq.n	800114e <bmp280_init+0x50>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001146:	2b60      	cmp	r3, #96	@ 0x60
 8001148:	d001      	beq.n	800114e <bmp280_init+0x50>

		return false;
 800114a:	2300      	movs	r3, #0
 800114c:	e05d      	b.n	800120a <bmp280_init+0x10c>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800114e:	22b6      	movs	r2, #182	@ 0xb6
 8001150:	21e0      	movs	r1, #224	@ 0xe0
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffae 	bl	80010b4 <write_register8>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <bmp280_init+0x64>
		return false;
 800115e:	2300      	movs	r3, #0
 8001160:	e053      	b.n	800120a <bmp280_init+0x10c>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001162:	f107 020d 	add.w	r2, r7, #13
 8001166:	2301      	movs	r3, #1
 8001168:	21f3      	movs	r1, #243	@ 0xf3
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fef8 	bl	8000f60 <read_data>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f5      	bne.n	8001162 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001176:	7b7b      	ldrb	r3, [r7, #13]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f0      	bne.n	8001162 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff15 	bl	8000fb0 <read_calibration_data>
 8001186:	4603      	mov	r3, r0
 8001188:	f083 0301 	eor.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d100      	bne.n	8001194 <bmp280_init+0x96>
 8001192:	e001      	b.n	8001198 <bmp280_init+0x9a>
		return false;
 8001194:	2300      	movs	r3, #0
 8001196:	e038      	b.n	800120a <bmp280_init+0x10c>
	}



	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	791b      	ldrb	r3, [r3, #4]
 800119c:	015b      	lsls	r3, r3, #5
 800119e:	b25a      	sxtb	r2, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	461a      	mov	r2, r3
 80011b2:	21f5      	movs	r1, #245	@ 0xf5
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff7d 	bl	80010b4 <write_register8>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <bmp280_init+0xc6>
		return false;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e022      	b.n	800120a <bmp280_init+0x10c>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d102      	bne.n	80011d2 <bmp280_init+0xd4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	78db      	ldrb	r3, [r3, #3]
 80011d6:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80011d8:	b25a      	sxtb	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	789b      	ldrb	r3, [r3, #2]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b25a      	sxtb	r2, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80011f0:	73bb      	strb	r3, [r7, #14]



	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	461a      	mov	r2, r3
 80011f6:	21f4      	movs	r1, #244	@ 0xf4
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff5b 	bl	80010b4 <write_register8>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <bmp280_init+0x10a>
		return false;
 8001204:	2300      	movs	r3, #0
 8001206:	e000      	b.n	800120a <bmp280_init+0x10c>
	}

	return true;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001212:	b480      	push	{r7}
 8001214:	b087      	sub	sp, #28
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	10da      	asrs	r2, r3, #3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001230:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001234:	12db      	asrs	r3, r3, #11
 8001236:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	111b      	asrs	r3, r3, #4
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	8812      	ldrh	r2, [r2, #0]
 8001240:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	1112      	asrs	r2, r2, #4
 8001246:	68f9      	ldr	r1, [r7, #12]
 8001248:	8809      	ldrh	r1, [r1, #0]
 800124a:	1a52      	subs	r2, r2, r1
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001258:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800125c:	139b      	asrs	r3, r3, #14
 800125e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	441a      	add	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	3380      	adds	r3, #128	@ 0x80
 8001276:	121b      	asrs	r3, r3, #8
}
 8001278:	4618      	mov	r0, r3
 800127a:	371c      	adds	r7, #28
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001288:	b0cc      	sub	sp, #304	@ 0x130
 800128a:	af00      	add	r7, sp, #0
 800128c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001290:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001294:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001298:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800129c:	17da      	asrs	r2, r3, #31
 800129e:	461c      	mov	r4, r3
 80012a0:	4615      	mov	r5, r2
 80012a2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80012a6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80012aa:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80012ae:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80012b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80012b6:	fb03 f102 	mul.w	r1, r3, r2
 80012ba:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80012be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80012c2:	fb02 f303 	mul.w	r3, r2, r3
 80012c6:	18ca      	adds	r2, r1, r3
 80012c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80012cc:	fba3 8903 	umull	r8, r9, r3, r3
 80012d0:	eb02 0309 	add.w	r3, r2, r9
 80012d4:	4699      	mov	r9, r3
 80012d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80012da:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	17da      	asrs	r2, r3, #31
 80012e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80012e6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80012ea:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012ee:	4603      	mov	r3, r0
 80012f0:	fb03 f209 	mul.w	r2, r3, r9
 80012f4:	460b      	mov	r3, r1
 80012f6:	fb08 f303 	mul.w	r3, r8, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	4602      	mov	r2, r0
 80012fe:	fba8 1202 	umull	r1, r2, r8, r2
 8001302:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001306:	460a      	mov	r2, r1
 8001308:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800130c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001310:	4413      	add	r3, r2
 8001312:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001316:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800131a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 800131e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001326:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800132a:	b21b      	sxth	r3, r3
 800132c:	17da      	asrs	r2, r3, #31
 800132e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001332:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001336:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800133a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800133e:	462a      	mov	r2, r5
 8001340:	fb02 f203 	mul.w	r2, r2, r3
 8001344:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001348:	4621      	mov	r1, r4
 800134a:	fb01 f303 	mul.w	r3, r1, r3
 800134e:	441a      	add	r2, r3
 8001350:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001354:	4621      	mov	r1, r4
 8001356:	fba3 1301 	umull	r1, r3, r3, r1
 800135a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800135e:	460b      	mov	r3, r1
 8001360:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001368:	18d3      	adds	r3, r2, r3
 800136a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800136e:	f04f 0000 	mov.w	r0, #0
 8001372:	f04f 0100 	mov.w	r1, #0
 8001376:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800137a:	462b      	mov	r3, r5
 800137c:	0459      	lsls	r1, r3, #17
 800137e:	4623      	mov	r3, r4
 8001380:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001384:	4623      	mov	r3, r4
 8001386:	0458      	lsls	r0, r3, #17
 8001388:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800138c:	1814      	adds	r4, r2, r0
 800138e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001390:	414b      	adcs	r3, r1
 8001392:	647b      	str	r3, [r7, #68]	@ 0x44
 8001394:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001398:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800139c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013a0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	17da      	asrs	r2, r3, #31
 80013a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80013ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80013b0:	f04f 0000 	mov.w	r0, #0
 80013b4:	f04f 0100 	mov.w	r1, #0
 80013b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80013bc:	00d9      	lsls	r1, r3, #3
 80013be:	2000      	movs	r0, #0
 80013c0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80013c4:	1814      	adds	r4, r2, r0
 80013c6:	63bc      	str	r4, [r7, #56]	@ 0x38
 80013c8:	414b      	adcs	r3, r1
 80013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013cc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80013d0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80013d4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80013d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013dc:	fb03 f102 	mul.w	r1, r3, r2
 80013e0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80013e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	18ca      	adds	r2, r1, r3
 80013ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013f2:	fba3 1303 	umull	r1, r3, r3, r3
 80013f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013fa:	460b      	mov	r3, r1
 80013fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001404:	18d3      	adds	r3, r2, r3
 8001406:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800140a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800140e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001412:	b21b      	sxth	r3, r3
 8001414:	17da      	asrs	r2, r3, #31
 8001416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800141a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800141e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001422:	462b      	mov	r3, r5
 8001424:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001428:	4642      	mov	r2, r8
 800142a:	fb02 f203 	mul.w	r2, r2, r3
 800142e:	464b      	mov	r3, r9
 8001430:	4621      	mov	r1, r4
 8001432:	fb01 f303 	mul.w	r3, r1, r3
 8001436:	4413      	add	r3, r2
 8001438:	4622      	mov	r2, r4
 800143a:	4641      	mov	r1, r8
 800143c:	fba2 1201 	umull	r1, r2, r2, r1
 8001440:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001444:	460a      	mov	r2, r1
 8001446:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800144a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800144e:	4413      	add	r3, r2
 8001450:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001454:	f04f 0000 	mov.w	r0, #0
 8001458:	f04f 0100 	mov.w	r1, #0
 800145c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001460:	4623      	mov	r3, r4
 8001462:	0a18      	lsrs	r0, r3, #8
 8001464:	462b      	mov	r3, r5
 8001466:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800146a:	462b      	mov	r3, r5
 800146c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800146e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001472:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001476:	b21b      	sxth	r3, r3
 8001478:	17da      	asrs	r2, r3, #31
 800147a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800147e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001482:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001486:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800148a:	464a      	mov	r2, r9
 800148c:	fb02 f203 	mul.w	r2, r2, r3
 8001490:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001494:	4644      	mov	r4, r8
 8001496:	fb04 f303 	mul.w	r3, r4, r3
 800149a:	441a      	add	r2, r3
 800149c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014a0:	4644      	mov	r4, r8
 80014a2:	fba3 4304 	umull	r4, r3, r3, r4
 80014a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80014aa:	4623      	mov	r3, r4
 80014ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80014b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80014b4:	18d3      	adds	r3, r2, r3
 80014b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80014c6:	464c      	mov	r4, r9
 80014c8:	0323      	lsls	r3, r4, #12
 80014ca:	4644      	mov	r4, r8
 80014cc:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80014d0:	4644      	mov	r4, r8
 80014d2:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80014d4:	1884      	adds	r4, r0, r2
 80014d6:	633c      	str	r4, [r7, #48]	@ 0x30
 80014d8:	eb41 0303 	adc.w	r3, r1, r3
 80014dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80014de:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80014e2:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80014e6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80014ea:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80014ee:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80014f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80014f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014fa:	88db      	ldrh	r3, [r3, #6]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	2200      	movs	r2, #0
 8001500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001508:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800150c:	462b      	mov	r3, r5
 800150e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001512:	4642      	mov	r2, r8
 8001514:	fb02 f203 	mul.w	r2, r2, r3
 8001518:	464b      	mov	r3, r9
 800151a:	4621      	mov	r1, r4
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	4413      	add	r3, r2
 8001522:	4622      	mov	r2, r4
 8001524:	4641      	mov	r1, r8
 8001526:	fba2 1201 	umull	r1, r2, r2, r1
 800152a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800152e:	460a      	mov	r2, r1
 8001530:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001534:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001538:	4413      	add	r3, r2
 800153a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800154a:	4629      	mov	r1, r5
 800154c:	104a      	asrs	r2, r1, #1
 800154e:	4629      	mov	r1, r5
 8001550:	17cb      	asrs	r3, r1, #31
 8001552:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001556:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800155a:	4313      	orrs	r3, r2
 800155c:	d101      	bne.n	8001562 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 800155e:	2300      	movs	r3, #0
 8001560:	e148      	b.n	80017f4 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001562:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001566:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800156a:	17da      	asrs	r2, r3, #31
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800156e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001570:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001574:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001578:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800157c:	105b      	asrs	r3, r3, #1
 800157e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001582:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001586:	07db      	lsls	r3, r3, #31
 8001588:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800158c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001590:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001594:	4621      	mov	r1, r4
 8001596:	1a89      	subs	r1, r1, r2
 8001598:	67b9      	str	r1, [r7, #120]	@ 0x78
 800159a:	4629      	mov	r1, r5
 800159c:	eb61 0303 	sbc.w	r3, r1, r3
 80015a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80015a6:	4622      	mov	r2, r4
 80015a8:	462b      	mov	r3, r5
 80015aa:	1891      	adds	r1, r2, r2
 80015ac:	6239      	str	r1, [r7, #32]
 80015ae:	415b      	adcs	r3, r3
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015b6:	4621      	mov	r1, r4
 80015b8:	1851      	adds	r1, r2, r1
 80015ba:	61b9      	str	r1, [r7, #24]
 80015bc:	4629      	mov	r1, r5
 80015be:	414b      	adcs	r3, r1
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015ce:	4649      	mov	r1, r9
 80015d0:	018b      	lsls	r3, r1, #6
 80015d2:	4641      	mov	r1, r8
 80015d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015d8:	4641      	mov	r1, r8
 80015da:	018a      	lsls	r2, r1, #6
 80015dc:	4641      	mov	r1, r8
 80015de:	1889      	adds	r1, r1, r2
 80015e0:	6139      	str	r1, [r7, #16]
 80015e2:	4649      	mov	r1, r9
 80015e4:	eb43 0101 	adc.w	r1, r3, r1
 80015e8:	6179      	str	r1, [r7, #20]
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015f6:	4649      	mov	r1, r9
 80015f8:	008b      	lsls	r3, r1, #2
 80015fa:	4641      	mov	r1, r8
 80015fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001600:	4641      	mov	r1, r8
 8001602:	008a      	lsls	r2, r1, #2
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	4603      	mov	r3, r0
 800160a:	4622      	mov	r2, r4
 800160c:	189b      	adds	r3, r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	460b      	mov	r3, r1
 8001612:	462a      	mov	r2, r5
 8001614:	eb42 0303 	adc.w	r3, r2, r3
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001626:	4649      	mov	r1, r9
 8001628:	008b      	lsls	r3, r1, #2
 800162a:	4641      	mov	r1, r8
 800162c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001630:	4641      	mov	r1, r8
 8001632:	008a      	lsls	r2, r1, #2
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	4603      	mov	r3, r0
 800163a:	4622      	mov	r2, r4
 800163c:	189b      	adds	r3, r3, r2
 800163e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001640:	462b      	mov	r3, r5
 8001642:	460a      	mov	r2, r1
 8001644:	eb42 0303 	adc.w	r3, r2, r3
 8001648:	677b      	str	r3, [r7, #116]	@ 0x74
 800164a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800164e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001652:	f7ff fa75 	bl	8000b40 <__aeabi_ldivmod>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800165e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001662:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001666:	b21b      	sxth	r3, r3
 8001668:	17da      	asrs	r2, r3, #31
 800166a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800166c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800166e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	0b50      	lsrs	r0, r2, #13
 800167c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001680:	1359      	asrs	r1, r3, #13
 8001682:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001686:	462b      	mov	r3, r5
 8001688:	fb00 f203 	mul.w	r2, r0, r3
 800168c:	4623      	mov	r3, r4
 800168e:	fb03 f301 	mul.w	r3, r3, r1
 8001692:	4413      	add	r3, r2
 8001694:	4622      	mov	r2, r4
 8001696:	fba2 1200 	umull	r1, r2, r2, r0
 800169a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800169e:	460a      	mov	r2, r1
 80016a0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80016a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80016a8:	4413      	add	r3, r2
 80016aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80016ae:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80016b2:	f04f 0000 	mov.w	r0, #0
 80016b6:	f04f 0100 	mov.w	r1, #0
 80016ba:	0b50      	lsrs	r0, r2, #13
 80016bc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80016c0:	1359      	asrs	r1, r3, #13
 80016c2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80016c6:	462b      	mov	r3, r5
 80016c8:	fb00 f203 	mul.w	r2, r0, r3
 80016cc:	4623      	mov	r3, r4
 80016ce:	fb03 f301 	mul.w	r3, r3, r1
 80016d2:	4413      	add	r3, r2
 80016d4:	4622      	mov	r2, r4
 80016d6:	fba2 1200 	umull	r1, r2, r2, r0
 80016da:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80016de:	460a      	mov	r2, r1
 80016e0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80016e4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80016e8:	4413      	add	r3, r2
 80016ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80016fa:	4621      	mov	r1, r4
 80016fc:	0e4a      	lsrs	r2, r1, #25
 80016fe:	4629      	mov	r1, r5
 8001700:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001704:	4629      	mov	r1, r5
 8001706:	164b      	asrs	r3, r1, #25
 8001708:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800170c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001710:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001714:	b21b      	sxth	r3, r3
 8001716:	17da      	asrs	r2, r3, #31
 8001718:	663b      	str	r3, [r7, #96]	@ 0x60
 800171a:	667a      	str	r2, [r7, #100]	@ 0x64
 800171c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001720:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001724:	462a      	mov	r2, r5
 8001726:	fb02 f203 	mul.w	r2, r2, r3
 800172a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800172e:	4621      	mov	r1, r4
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800173a:	4621      	mov	r1, r4
 800173c:	fba2 1201 	umull	r1, r2, r2, r1
 8001740:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001744:	460a      	mov	r2, r1
 8001746:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800174a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800174e:	4413      	add	r3, r2
 8001750:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001760:	4621      	mov	r1, r4
 8001762:	0cca      	lsrs	r2, r1, #19
 8001764:	4629      	mov	r1, r5
 8001766:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800176a:	4629      	mov	r1, r5
 800176c:	14cb      	asrs	r3, r1, #19
 800176e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001772:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001776:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800177a:	1884      	adds	r4, r0, r2
 800177c:	65bc      	str	r4, [r7, #88]	@ 0x58
 800177e:	eb41 0303 	adc.w	r3, r1, r3
 8001782:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001784:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001788:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800178c:	4621      	mov	r1, r4
 800178e:	1889      	adds	r1, r1, r2
 8001790:	6539      	str	r1, [r7, #80]	@ 0x50
 8001792:	4629      	mov	r1, r5
 8001794:	eb43 0101 	adc.w	r1, r3, r1
 8001798:	6579      	str	r1, [r7, #84]	@ 0x54
 800179a:	f04f 0000 	mov.w	r0, #0
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80017a6:	4623      	mov	r3, r4
 80017a8:	0a18      	lsrs	r0, r3, #8
 80017aa:	462b      	mov	r3, r5
 80017ac:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80017b0:	462b      	mov	r3, r5
 80017b2:	1219      	asrs	r1, r3, #8
 80017b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80017bc:	b21b      	sxth	r3, r3
 80017be:	17da      	asrs	r2, r3, #31
 80017c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017c2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80017d0:	464c      	mov	r4, r9
 80017d2:	0123      	lsls	r3, r4, #4
 80017d4:	4644      	mov	r4, r8
 80017d6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017da:	4644      	mov	r4, r8
 80017dc:	0122      	lsls	r2, r4, #4
 80017de:	1884      	adds	r4, r0, r2
 80017e0:	603c      	str	r4, [r7, #0]
 80017e2:	eb41 0303 	adc.w	r3, r1, r3
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017ec:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 80017f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80017fa:	46bd      	mov	sp, r7
 80017fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001800 <bmp280_read_fixed>:
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
	return v_x1_u32r >> 12;
}

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
	// Only the BME280 supports reading the humidity.


	// Need to read in one sequence to ensure they match.

	if (read_data(dev, 0xf7, data, 6)) {
 800180c:	f107 0218 	add.w	r2, r7, #24
 8001810:	2306      	movs	r3, #6
 8001812:	21f7      	movs	r1, #247	@ 0xf7
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff fba3 	bl	8000f60 <read_data>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <bmp280_read_fixed+0x24>
		return false;
 8001820:	2300      	movs	r3, #0
 8001822:	e027      	b.n	8001874 <bmp280_read_fixed+0x74>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001824:	7e3b      	ldrb	r3, [r7, #24]
 8001826:	031a      	lsls	r2, r3, #12
 8001828:	7e7b      	ldrb	r3, [r7, #25]
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	4313      	orrs	r3, r2
 800182e:	7eba      	ldrb	r2, [r7, #26]
 8001830:	0912      	lsrs	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	4313      	orrs	r3, r2
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001838:	7efb      	ldrb	r3, [r7, #27]
 800183a:	031a      	lsls	r2, r3, #12
 800183c:	7f3b      	ldrb	r3, [r7, #28]
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	4313      	orrs	r3, r2
 8001842:	7f7a      	ldrb	r2, [r7, #29]
 8001844:	0912      	lsrs	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	4313      	orrs	r3, r2
 800184a:	623b      	str	r3, [r7, #32]

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	461a      	mov	r2, r3
 8001852:	6a39      	ldr	r1, [r7, #32]
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7ff fcdc 	bl	8001212 <compensate_temperature>
 800185a:	4602      	mov	r2, r0
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	461a      	mov	r2, r3
 8001864:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f7ff fd0c 	bl	8001284 <compensate_pressure>
 800186c:	4602      	mov	r2, r0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]



	return true;
 8001872:	2301      	movs	r3, #1
}
 8001874:	4618      	mov	r0, r3
 8001876:	3728      	adds	r7, #40	@ 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;

	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure
 8001888:	f107 0210 	add.w	r2, r7, #16
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f7ff ffb4 	bl	8001800 <bmp280_read_fixed>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d019      	beq.n	80018d2 <bmp280_read_float+0x56>
			)) {
		*temperature = (float) fixed_temperature / 100;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a8:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80018dc <bmp280_read_float+0x60>
 80018ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018c0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80018e0 <bmp280_read_float+0x64>
 80018c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	edc3 7a00 	vstr	s15, [r3]

		return true;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <bmp280_read_float+0x58>
	}

	return false;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	42c80000 	.word	0x42c80000
 80018e0:	43800000 	.word	0x43800000
 80018e4:	00000000 	.word	0x00000000

080018e8 <CalculateAltidude>:




float CalculateAltidude(float pressure)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	ed87 0a01 	vstr	s0, [r7, #4]
	return 44330.0*(1.0 - pow((pressure/101325),0.1903)     )+65;
 80018f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001978 <CalculateAltidude+0x90>
 80018fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018fe:	ee16 0a90 	vmov	r0, s13
 8001902:	f7fe fdc5 	bl	8000490 <__aeabi_f2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8001968 <CalculateAltidude+0x80>
 800190e:	ec43 2b10 	vmov	d0, r2, r3
 8001912:	f002 fa11 	bl	8003d38 <pow>
 8001916:	ec53 2b10 	vmov	r2, r3, d0
 800191a:	f04f 0000 	mov.w	r0, #0
 800191e:	4917      	ldr	r1, [pc, #92]	@ (800197c <CalculateAltidude+0x94>)
 8001920:	f7fe fc56 	bl	80001d0 <__aeabi_dsub>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	a310      	add	r3, pc, #64	@ (adr r3, 8001970 <CalculateAltidude+0x88>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fe05 	bl	8000540 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <CalculateAltidude+0x98>)
 8001944:	f7fe fc46 	bl	80001d4 <__adddf3>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f8a6 	bl	8000aa0 <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	ee07 3a90 	vmov	s15, r3
}
 800195a:	eeb0 0a67 	vmov.f32	s0, s15
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	f3af 8000 	nop.w
 8001968:	1a36e2eb 	.word	0x1a36e2eb
 800196c:	3fc85bc0 	.word	0x3fc85bc0
 8001970:	00000000 	.word	0x00000000
 8001974:	40e5a540 	.word	0x40e5a540
 8001978:	47c5e680 	.word	0x47c5e680
 800197c:	3ff00000 	.word	0x3ff00000
 8001980:	40504000 	.word	0x40504000

08001984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001988:	f000 f9e4 	bl	8001d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198c:	f000 f840 	bl	8001a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001990:	f000 f8d6 	bl	8001b40 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001994:	f000 f8a6 	bl	8001ae4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  bmp280_init_default_params(&bmp280.params);
 8001998:	4817      	ldr	r0, [pc, #92]	@ (80019f8 <main+0x74>)
 800199a:	f7ff fa99 	bl	8000ed0 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 800199e:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <main+0x78>)
 80019a0:	2276      	movs	r2, #118	@ 0x76
 80019a2:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 80019a4:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <main+0x78>)
 80019a6:	4a16      	ldr	r2, [pc, #88]	@ (8001a00 <main+0x7c>)
 80019a8:	629a      	str	r2, [r3, #40]	@ 0x28

  	while (!bmp280_init(&bmp280, &bmp280.params))
 80019aa:	e002      	b.n	80019b2 <main+0x2e>
  	{

  			HAL_Delay(100);
 80019ac:	2064      	movs	r0, #100	@ 0x64
 80019ae:	f000 fa43 	bl	8001e38 <HAL_Delay>
  	while (!bmp280_init(&bmp280, &bmp280.params))
 80019b2:	4911      	ldr	r1, [pc, #68]	@ (80019f8 <main+0x74>)
 80019b4:	4811      	ldr	r0, [pc, #68]	@ (80019fc <main+0x78>)
 80019b6:	f7ff fba2 	bl	80010fe <bmp280_init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f083 0301 	eor.w	r3, r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f2      	bne.n	80019ac <main+0x28>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure))
 80019c6:	bf00      	nop
 80019c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a04 <main+0x80>)
 80019ca:	490f      	ldr	r1, [pc, #60]	@ (8001a08 <main+0x84>)
 80019cc:	480b      	ldr	r0, [pc, #44]	@ (80019fc <main+0x78>)
 80019ce:	f7ff ff55 	bl	800187c <bmp280_read_float>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f083 0301 	eor.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f4      	bne.n	80019c8 <main+0x44>
	  {

	  }

	  altidude = CalculateAltidude(pressure);
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <main+0x80>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	eeb0 0a67 	vmov.f32	s0, s15
 80019e8:	f7ff ff7e 	bl	80018e8 <CalculateAltidude>
 80019ec:	eef0 7a40 	vmov.f32	s15, s0
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <main+0x88>)
 80019f2:	edc3 7a00 	vstr	s15, [r3]
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure))
 80019f6:	e7e6      	b.n	80019c6 <main+0x42>
 80019f8:	2000010c 	.word	0x2000010c
 80019fc:	200000e0 	.word	0x200000e0
 8001a00:	2000008c 	.word	0x2000008c
 8001a04:	20000114 	.word	0x20000114
 8001a08:	20000118 	.word	0x20000118
 8001a0c:	2000011c 	.word	0x2000011c

08001a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b094      	sub	sp, #80	@ 0x50
 8001a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a16:	f107 0320 	add.w	r3, r7, #32
 8001a1a:	2230      	movs	r2, #48	@ 0x30
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 f958 	bl	8003cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	4b28      	ldr	r3, [pc, #160]	@ (8001adc <SystemClock_Config+0xcc>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	4a27      	ldr	r2, [pc, #156]	@ (8001adc <SystemClock_Config+0xcc>)
 8001a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a44:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <SystemClock_Config+0xcc>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <SystemClock_Config+0xd0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <SystemClock_Config+0xd0>)
 8001a5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <SystemClock_Config+0xd0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a76:	2302      	movs	r3, #2
 8001a78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a80:	2308      	movs	r3, #8
 8001a82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a84:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a8e:	2307      	movs	r3, #7
 8001a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 fc98 	bl	80033cc <HAL_RCC_OscConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001aa2:	f000 f875 	bl	8001b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa6:	230f      	movs	r3, #15
 8001aa8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ab2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ab6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001abc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	2105      	movs	r1, #5
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fef9 	bl	80038bc <HAL_RCC_ClockConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ad0:	f000 f85e 	bl	8001b90 <Error_Handler>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3750      	adds	r7, #80	@ 0x50
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40007000 	.word	0x40007000

08001ae4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001aea:	4a13      	ldr	r2, [pc, #76]	@ (8001b38 <MX_I2C1_Init+0x54>)
 8001aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001aee:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001af0:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001b02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b14:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001b22:	f000 fc2f 	bl	8002384 <HAL_I2C_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b2c:	f000 f830 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	2000008c 	.word	0x2000008c
 8001b38:	40005400 	.word	0x40005400
 8001b3c:	00061a80 	.word	0x00061a80

08001b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <MX_GPIO_Init+0x4c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b8c <MX_GPIO_Init+0x4c>)
 8001b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <MX_GPIO_Init+0x4c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <MX_GPIO_Init+0x4c>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	4a08      	ldr	r2, [pc, #32]	@ (8001b8c <MX_GPIO_Init+0x4c>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <MX_GPIO_Init+0x4c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800

08001b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b94:	b672      	cpsid	i
}
 8001b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <Error_Handler+0x8>

08001b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	4a0f      	ldr	r2, [pc, #60]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	4a08      	ldr	r2, [pc, #32]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bda:	2007      	movs	r0, #7
 8001bdc:	f000 fa02 	bl	8001fe4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a19      	ldr	r2, [pc, #100]	@ (8001c70 <HAL_I2C_MspInit+0x84>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d12b      	bne.n	8001c66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c2a:	23c0      	movs	r3, #192	@ 0xc0
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2e:	2312      	movs	r3, #18
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <HAL_I2C_MspInit+0x8c>)
 8001c46:	f000 fa01 	bl	800204c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	4a08      	ldr	r2, [pc, #32]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	@ 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40005400 	.word	0x40005400
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020400 	.word	0x40020400

08001c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <NMI_Handler+0x4>

08001c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <HardFault_Handler+0x4>

08001c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <MemManage_Handler+0x4>

08001c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd2:	f000 f891 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <SystemInit+0x20>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <SystemInit+0x20>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d04:	f7ff ffea 	bl	8001cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d08:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d0a:	490d      	ldr	r1, [pc, #52]	@ (8001d40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d20:	4c0a      	ldr	r4, [pc, #40]	@ (8001d4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f001 ffdf 	bl	8003cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d32:	f7ff fe27 	bl	8001984 <main>
  bx  lr    
 8001d36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d44:	08004c68 	.word	0x08004c68
  ldr r2, =_sbss
 8001d48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d4c:	2000025c 	.word	0x2000025c

08001d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d58:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d94 <HAL_Init+0x40>)
 8001d5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <HAL_Init+0x40>)
 8001d6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	@ (8001d94 <HAL_Init+0x40>)
 8001d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f931 	bl	8001fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f808 	bl	8001d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff ff08 	bl	8001b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00

08001d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da0:	4b12      	ldr	r3, [pc, #72]	@ (8001dec <HAL_InitTick+0x54>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <HAL_InitTick+0x58>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f93b 	bl	8002032 <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e00e      	b.n	8001de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b0f      	cmp	r3, #15
 8001dca:	d80a      	bhi.n	8001de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	f000 f911 	bl	8001ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	@ (8001df4 <HAL_InitTick+0x5c>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000000 	.word	0x20000000
 8001df0:	20000008 	.word	0x20000008
 8001df4:	20000004 	.word	0x20000004

08001df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	20000120 	.word	0x20000120

08001e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000120 	.word	0x20000120

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008

08001e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb2:	4a04      	ldr	r2, [pc, #16]	@ (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	60d3      	str	r3, [r2, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db0a      	blt.n	8001f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	490c      	ldr	r1, [pc, #48]	@ (8001f30 <__NVIC_SetPriority+0x4c>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	440b      	add	r3, r1
 8001f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f0c:	e00a      	b.n	8001f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4908      	ldr	r1, [pc, #32]	@ (8001f34 <__NVIC_SetPriority+0x50>)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	440b      	add	r3, r1
 8001f22:	761a      	strb	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	@ 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	bf28      	it	cs
 8001f56:	2304      	movcs	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d902      	bls.n	8001f68 <NVIC_EncodePriority+0x30>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b03      	subs	r3, #3
 8001f66:	e000      	b.n	8001f6a <NVIC_EncodePriority+0x32>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43d9      	mvns	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	4313      	orrs	r3, r2
         );
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	@ 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fb0:	d301      	bcc.n	8001fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00f      	b.n	8001fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <SysTick_Config+0x40>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fbe:	210f      	movs	r1, #15
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f7ff ff8e 	bl	8001ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc8:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <SysTick_Config+0x40>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fce:	4b04      	ldr	r3, [pc, #16]	@ (8001fe0 <SysTick_Config+0x40>)
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	e000e010 	.word	0xe000e010

08001fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff47 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800200c:	f7ff ff5c 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 8002010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f7ff ff8e 	bl	8001f38 <NVIC_EncodePriority>
 800201c:	4602      	mov	r2, r0
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff5d 	bl	8001ee4 <__NVIC_SetPriority>
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffb0 	bl	8001fa0 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	@ 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	e16b      	b.n	8002340 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	f040 815a 	bne.w	800233a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d005      	beq.n	800209e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209a:	2b02      	cmp	r3, #2
 800209c:	d130      	bne.n	8002100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 0201 	and.w	r2, r3, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b03      	cmp	r3, #3
 800210a:	d017      	beq.n	800213c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d123      	bne.n	8002190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	08da      	lsrs	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3208      	adds	r2, #8
 8002150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	220f      	movs	r2, #15
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	08da      	lsrs	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3208      	adds	r2, #8
 800218a:	69b9      	ldr	r1, [r7, #24]
 800218c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0203 	and.w	r2, r3, #3
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80b4 	beq.w	800233a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b60      	ldr	r3, [pc, #384]	@ (8002358 <HAL_GPIO_Init+0x30c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	4a5f      	ldr	r2, [pc, #380]	@ (8002358 <HAL_GPIO_Init+0x30c>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002358 <HAL_GPIO_Init+0x30c>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ee:	4a5b      	ldr	r2, [pc, #364]	@ (800235c <HAL_GPIO_Init+0x310>)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	220f      	movs	r2, #15
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a52      	ldr	r2, [pc, #328]	@ (8002360 <HAL_GPIO_Init+0x314>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02b      	beq.n	8002272 <HAL_GPIO_Init+0x226>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a51      	ldr	r2, [pc, #324]	@ (8002364 <HAL_GPIO_Init+0x318>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d025      	beq.n	800226e <HAL_GPIO_Init+0x222>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a50      	ldr	r2, [pc, #320]	@ (8002368 <HAL_GPIO_Init+0x31c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01f      	beq.n	800226a <HAL_GPIO_Init+0x21e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4f      	ldr	r2, [pc, #316]	@ (800236c <HAL_GPIO_Init+0x320>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d019      	beq.n	8002266 <HAL_GPIO_Init+0x21a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4e      	ldr	r2, [pc, #312]	@ (8002370 <HAL_GPIO_Init+0x324>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0x216>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4d      	ldr	r2, [pc, #308]	@ (8002374 <HAL_GPIO_Init+0x328>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00d      	beq.n	800225e <HAL_GPIO_Init+0x212>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4c      	ldr	r2, [pc, #304]	@ (8002378 <HAL_GPIO_Init+0x32c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d007      	beq.n	800225a <HAL_GPIO_Init+0x20e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4b      	ldr	r2, [pc, #300]	@ (800237c <HAL_GPIO_Init+0x330>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_GPIO_Init+0x20a>
 8002252:	2307      	movs	r3, #7
 8002254:	e00e      	b.n	8002274 <HAL_GPIO_Init+0x228>
 8002256:	2308      	movs	r3, #8
 8002258:	e00c      	b.n	8002274 <HAL_GPIO_Init+0x228>
 800225a:	2306      	movs	r3, #6
 800225c:	e00a      	b.n	8002274 <HAL_GPIO_Init+0x228>
 800225e:	2305      	movs	r3, #5
 8002260:	e008      	b.n	8002274 <HAL_GPIO_Init+0x228>
 8002262:	2304      	movs	r3, #4
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x228>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <HAL_GPIO_Init+0x228>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <HAL_GPIO_Init+0x228>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x228>
 8002272:	2300      	movs	r3, #0
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	f002 0203 	and.w	r2, r2, #3
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4093      	lsls	r3, r2
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002284:	4935      	ldr	r1, [pc, #212]	@ (800235c <HAL_GPIO_Init+0x310>)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002292:	4b3b      	ldr	r3, [pc, #236]	@ (8002380 <HAL_GPIO_Init+0x334>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022b6:	4a32      	ldr	r2, [pc, #200]	@ (8002380 <HAL_GPIO_Init+0x334>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022bc:	4b30      	ldr	r3, [pc, #192]	@ (8002380 <HAL_GPIO_Init+0x334>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e0:	4a27      	ldr	r2, [pc, #156]	@ (8002380 <HAL_GPIO_Init+0x334>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022e6:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <HAL_GPIO_Init+0x334>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230a:	4a1d      	ldr	r2, [pc, #116]	@ (8002380 <HAL_GPIO_Init+0x334>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002310:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_GPIO_Init+0x334>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002334:	4a12      	ldr	r2, [pc, #72]	@ (8002380 <HAL_GPIO_Init+0x334>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3301      	adds	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	f67f ae90 	bls.w	8002068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3724      	adds	r7, #36	@ 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40013800 	.word	0x40013800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40021000 	.word	0x40021000
 8002374:	40021400 	.word	0x40021400
 8002378:	40021800 	.word	0x40021800
 800237c:	40021c00 	.word	0x40021c00
 8002380:	40013c00 	.word	0x40013c00

08002384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e12b      	b.n	80025ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fc1e 	bl	8001bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2224      	movs	r2, #36	@ 0x24
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023e8:	f001 fc60 	bl	8003cac <HAL_RCC_GetPCLK1Freq>
 80023ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4a81      	ldr	r2, [pc, #516]	@ (80025f8 <HAL_I2C_Init+0x274>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d807      	bhi.n	8002408 <HAL_I2C_Init+0x84>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a80      	ldr	r2, [pc, #512]	@ (80025fc <HAL_I2C_Init+0x278>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	bf94      	ite	ls
 8002400:	2301      	movls	r3, #1
 8002402:	2300      	movhi	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e006      	b.n	8002416 <HAL_I2C_Init+0x92>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4a7d      	ldr	r2, [pc, #500]	@ (8002600 <HAL_I2C_Init+0x27c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	bf94      	ite	ls
 8002410:	2301      	movls	r3, #1
 8002412:	2300      	movhi	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0e7      	b.n	80025ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4a78      	ldr	r2, [pc, #480]	@ (8002604 <HAL_I2C_Init+0x280>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0c9b      	lsrs	r3, r3, #18
 8002428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4a6a      	ldr	r2, [pc, #424]	@ (80025f8 <HAL_I2C_Init+0x274>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d802      	bhi.n	8002458 <HAL_I2C_Init+0xd4>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	3301      	adds	r3, #1
 8002456:	e009      	b.n	800246c <HAL_I2C_Init+0xe8>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	4a69      	ldr	r2, [pc, #420]	@ (8002608 <HAL_I2C_Init+0x284>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	3301      	adds	r3, #1
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	430b      	orrs	r3, r1
 8002472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800247e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	495c      	ldr	r1, [pc, #368]	@ (80025f8 <HAL_I2C_Init+0x274>)
 8002488:	428b      	cmp	r3, r1
 800248a:	d819      	bhi.n	80024c0 <HAL_I2C_Init+0x13c>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e59      	subs	r1, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fbb1 f3f3 	udiv	r3, r1, r3
 800249a:	1c59      	adds	r1, r3, #1
 800249c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024a0:	400b      	ands	r3, r1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_I2C_Init+0x138>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1e59      	subs	r1, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ba:	e051      	b.n	8002560 <HAL_I2C_Init+0x1dc>
 80024bc:	2304      	movs	r3, #4
 80024be:	e04f      	b.n	8002560 <HAL_I2C_Init+0x1dc>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d111      	bne.n	80024ec <HAL_I2C_Init+0x168>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e58      	subs	r0, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e012      	b.n	8002512 <HAL_I2C_Init+0x18e>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1e58      	subs	r0, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	0099      	lsls	r1, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Init+0x196>
 8002516:	2301      	movs	r3, #1
 8002518:	e022      	b.n	8002560 <HAL_I2C_Init+0x1dc>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10e      	bne.n	8002540 <HAL_I2C_Init+0x1bc>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1e58      	subs	r0, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	440b      	add	r3, r1
 8002530:	fbb0 f3f3 	udiv	r3, r0, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800253e:	e00f      	b.n	8002560 <HAL_I2C_Init+0x1dc>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1e58      	subs	r0, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	0099      	lsls	r1, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	fbb0 f3f3 	udiv	r3, r0, r3
 8002556:	3301      	adds	r3, #1
 8002558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	6809      	ldr	r1, [r1, #0]
 8002564:	4313      	orrs	r3, r2
 8002566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800258e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6911      	ldr	r1, [r2, #16]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	4311      	orrs	r1, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2220      	movs	r2, #32
 80025da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	000186a0 	.word	0x000186a0
 80025fc:	001e847f 	.word	0x001e847f
 8002600:	003d08ff 	.word	0x003d08ff
 8002604:	431bde83 	.word	0x431bde83
 8002608:	10624dd3 	.word	0x10624dd3

0800260c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4603      	mov	r3, r0
 800261c:	817b      	strh	r3, [r7, #10]
 800261e:	460b      	mov	r3, r1
 8002620:	813b      	strh	r3, [r7, #8]
 8002622:	4613      	mov	r3, r2
 8002624:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002626:	f7ff fbfb 	bl	8001e20 <HAL_GetTick>
 800262a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b20      	cmp	r3, #32
 8002636:	f040 80d9 	bne.w	80027ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2319      	movs	r3, #25
 8002640:	2201      	movs	r2, #1
 8002642:	496d      	ldr	r1, [pc, #436]	@ (80027f8 <HAL_I2C_Mem_Write+0x1ec>)
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fc8b 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
 8002652:	e0cc      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_I2C_Mem_Write+0x56>
 800265e:	2302      	movs	r3, #2
 8002660:	e0c5      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d007      	beq.n	8002688 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2221      	movs	r2, #33	@ 0x21
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2240      	movs	r2, #64	@ 0x40
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a3a      	ldr	r2, [r7, #32]
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a4d      	ldr	r2, [pc, #308]	@ (80027fc <HAL_I2C_Mem_Write+0x1f0>)
 80026c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ca:	88f8      	ldrh	r0, [r7, #6]
 80026cc:	893a      	ldrh	r2, [r7, #8]
 80026ce:	8979      	ldrh	r1, [r7, #10]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	4603      	mov	r3, r0
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fac2 	bl	8002c64 <I2C_RequestMemoryWrite>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d052      	beq.n	800278c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e081      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fd50 	bl	8003194 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00d      	beq.n	8002716 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d107      	bne.n	8002712 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06b      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11b      	bne.n	800278c <HAL_I2C_Mem_Write+0x180>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	d017      	beq.n	800278c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1aa      	bne.n	80026ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fd43 	bl	8003224 <I2C_WaitOnBTFFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00d      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d107      	bne.n	80027bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e016      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	00100002 	.word	0x00100002
 80027fc:	ffff0000 	.word	0xffff0000

08002800 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08c      	sub	sp, #48	@ 0x30
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	461a      	mov	r2, r3
 800280e:	4603      	mov	r3, r0
 8002810:	817b      	strh	r3, [r7, #10]
 8002812:	460b      	mov	r3, r1
 8002814:	813b      	strh	r3, [r7, #8]
 8002816:	4613      	mov	r3, r2
 8002818:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800281a:	f7ff fb01 	bl	8001e20 <HAL_GetTick>
 800281e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b20      	cmp	r3, #32
 800282a:	f040 8214 	bne.w	8002c56 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	2319      	movs	r3, #25
 8002834:	2201      	movs	r2, #1
 8002836:	497b      	ldr	r1, [pc, #492]	@ (8002a24 <HAL_I2C_Mem_Read+0x224>)
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fb91 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
 8002846:	e207      	b.n	8002c58 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_I2C_Mem_Read+0x56>
 8002852:	2302      	movs	r3, #2
 8002854:	e200      	b.n	8002c58 <HAL_I2C_Mem_Read+0x458>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	d007      	beq.n	800287c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800288a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2222      	movs	r2, #34	@ 0x22
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2240      	movs	r2, #64	@ 0x40
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80028ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002a28 <HAL_I2C_Mem_Read+0x228>)
 80028bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028be:	88f8      	ldrh	r0, [r7, #6]
 80028c0:	893a      	ldrh	r2, [r7, #8]
 80028c2:	8979      	ldrh	r1, [r7, #10]
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4603      	mov	r3, r0
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa5e 	bl	8002d90 <I2C_RequestMemoryRead>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1bc      	b.n	8002c58 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d113      	bne.n	800290e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	623b      	str	r3, [r7, #32]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	623b      	str	r3, [r7, #32]
 80028fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e190      	b.n	8002c30 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002912:	2b01      	cmp	r3, #1
 8002914:	d11b      	bne.n	800294e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e170      	b.n	8002c30 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002952:	2b02      	cmp	r3, #2
 8002954:	d11b      	bne.n	800298e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002964:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	e150      	b.n	8002c30 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029a4:	e144      	b.n	8002c30 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	f200 80f1 	bhi.w	8002b92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d123      	bne.n	8002a00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fc79 	bl	80032b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e145      	b.n	8002c58 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029fe:	e117      	b.n	8002c30 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d14e      	bne.n	8002aa6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4906      	ldr	r1, [pc, #24]	@ (8002a2c <HAL_I2C_Mem_Read+0x22c>)
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 faa4 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e11a      	b.n	8002c58 <HAL_I2C_Mem_Read+0x458>
 8002a22:	bf00      	nop
 8002a24:	00100002 	.word	0x00100002
 8002a28:	ffff0000 	.word	0xffff0000
 8002a2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aa4:	e0c4      	b.n	8002c30 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aac:	2200      	movs	r2, #0
 8002aae:	496c      	ldr	r1, [pc, #432]	@ (8002c60 <HAL_I2C_Mem_Read+0x460>)
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fa55 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0cb      	b.n	8002c58 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4955      	ldr	r1, [pc, #340]	@ (8002c60 <HAL_I2C_Mem_Read+0x460>)
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fa27 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e09d      	b.n	8002c58 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	691a      	ldr	r2, [r3, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b90:	e04e      	b.n	8002c30 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b94:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fb8c 	bl	80032b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e058      	b.n	8002c58 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d124      	bne.n	8002c30 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d107      	bne.n	8002bfe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bfc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f47f aeb6 	bne.w	80029a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
  }
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3728      	adds	r7, #40	@ 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	00010004 	.word	0x00010004

08002c64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	460b      	mov	r3, r1
 8002c78:	813b      	strh	r3, [r7, #8]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f960 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cb4:	d103      	bne.n	8002cbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e05f      	b.n	8002d82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cc2:	897b      	ldrh	r3, [r7, #10]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	6a3a      	ldr	r2, [r7, #32]
 8002cd6:	492d      	ldr	r1, [pc, #180]	@ (8002d8c <I2C_RequestMemoryWrite+0x128>)
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f9bb 	bl	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e04c      	b.n	8002d82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d00:	6a39      	ldr	r1, [r7, #32]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fa46 	bl	8003194 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00d      	beq.n	8002d2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d107      	bne.n	8002d26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e02b      	b.n	8002d82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d30:	893b      	ldrh	r3, [r7, #8]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	611a      	str	r2, [r3, #16]
 8002d3a:	e021      	b.n	8002d80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d3c:	893b      	ldrh	r3, [r7, #8]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d4c:	6a39      	ldr	r1, [r7, #32]
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 fa20 	bl	8003194 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d107      	bne.n	8002d72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e005      	b.n	8002d82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d76:	893b      	ldrh	r3, [r7, #8]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	00010002 	.word	0x00010002

08002d90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	4608      	mov	r0, r1
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4603      	mov	r3, r0
 8002da0:	817b      	strh	r3, [r7, #10]
 8002da2:	460b      	mov	r3, r1
 8002da4:	813b      	strh	r3, [r7, #8]
 8002da6:	4613      	mov	r3, r2
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002db8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f8c2 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df0:	d103      	bne.n	8002dfa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002df8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0aa      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	4952      	ldr	r1, [pc, #328]	@ (8002f5c <I2C_RequestMemoryRead+0x1cc>)
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f91d 	bl	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e097      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3c:	6a39      	ldr	r1, [r7, #32]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f9a8 	bl	8003194 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d107      	bne.n	8002e62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e076      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e6c:	893b      	ldrh	r3, [r7, #8]
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	611a      	str	r2, [r3, #16]
 8002e76:	e021      	b.n	8002ebc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e78:	893b      	ldrh	r3, [r7, #8]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e88:	6a39      	ldr	r1, [r7, #32]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f982 	bl	8003194 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d107      	bne.n	8002eae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e050      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb2:	893b      	ldrh	r3, [r7, #8]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ebe:	6a39      	ldr	r1, [r7, #32]
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f967 	bl	8003194 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00d      	beq.n	8002ee8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d107      	bne.n	8002ee4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e035      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f82b 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00d      	beq.n	8002f2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f1e:	d103      	bne.n	8002f28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e013      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f2c:	897b      	ldrh	r3, [r7, #10]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	4906      	ldr	r1, [pc, #24]	@ (8002f5c <I2C_RequestMemoryRead+0x1cc>)
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f886 	bl	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	00010002 	.word	0x00010002

08002f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f70:	e048      	b.n	8003004 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d044      	beq.n	8003004 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7fe ff51 	bl	8001e20 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d139      	bne.n	8003004 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	0c1b      	lsrs	r3, r3, #16
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d10d      	bne.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	43da      	mvns	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	e00c      	b.n	8002fd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d116      	bne.n	8003004 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e023      	b.n	800304c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d10d      	bne.n	800302a <I2C_WaitOnFlagUntilTimeout+0xca>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	43da      	mvns	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4013      	ands	r3, r2
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	461a      	mov	r2, r3
 8003028:	e00c      	b.n	8003044 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	43da      	mvns	r2, r3
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4013      	ands	r3, r2
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	429a      	cmp	r2, r3
 8003048:	d093      	beq.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003062:	e071      	b.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003072:	d123      	bne.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003082:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800308c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	f043 0204 	orr.w	r2, r3, #4
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e067      	b.n	800318c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c2:	d041      	beq.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c4:	f7fe feac 	bl	8001e20 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d302      	bcc.n	80030da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d136      	bne.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d10c      	bne.n	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	43da      	mvns	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4013      	ands	r3, r2
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf14      	ite	ne
 80030f6:	2301      	movne	r3, #1
 80030f8:	2300      	moveq	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	e00b      	b.n	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	43da      	mvns	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4013      	ands	r3, r2
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d016      	beq.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e021      	b.n	800318c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	0c1b      	lsrs	r3, r3, #16
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d10c      	bne.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	43da      	mvns	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4013      	ands	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e00b      	b.n	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	43da      	mvns	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4013      	ands	r3, r2
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	f47f af6d 	bne.w	8003064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a0:	e034      	b.n	800320c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f8e3 	bl	800336e <I2C_IsAcknowledgeFailed>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e034      	b.n	800321c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d028      	beq.n	800320c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fe fe31 	bl	8001e20 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d11d      	bne.n	800320c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031da:	2b80      	cmp	r3, #128	@ 0x80
 80031dc:	d016      	beq.n	800320c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f8:	f043 0220 	orr.w	r2, r3, #32
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e007      	b.n	800321c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003216:	2b80      	cmp	r3, #128	@ 0x80
 8003218:	d1c3      	bne.n	80031a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003230:	e034      	b.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f89b 	bl	800336e <I2C_IsAcknowledgeFailed>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e034      	b.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d028      	beq.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324a:	f7fe fde9 	bl	8001e20 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d11d      	bne.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d016      	beq.n	800329c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e007      	b.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d1c3      	bne.n	8003232 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032c0:	e049      	b.n	8003356 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d119      	bne.n	8003304 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0210 	mvn.w	r2, #16
 80032d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e030      	b.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003304:	f7fe fd8c 	bl	8001e20 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	429a      	cmp	r2, r3
 8003312:	d302      	bcc.n	800331a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11d      	bne.n	8003356 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003324:	2b40      	cmp	r3, #64	@ 0x40
 8003326:	d016      	beq.n	8003356 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f043 0220 	orr.w	r2, r3, #32
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e007      	b.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003360:	2b40      	cmp	r3, #64	@ 0x40
 8003362:	d1ae      	bne.n	80032c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003384:	d11b      	bne.n	80033be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800338e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f043 0204 	orr.w	r2, r3, #4
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e267      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d075      	beq.n	80034d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033ea:	4b88      	ldr	r3, [pc, #544]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d00c      	beq.n	8003410 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f6:	4b85      	ldr	r3, [pc, #532]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d112      	bne.n	8003428 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003402:	4b82      	ldr	r3, [pc, #520]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800340e:	d10b      	bne.n	8003428 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	4b7e      	ldr	r3, [pc, #504]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d05b      	beq.n	80034d4 <HAL_RCC_OscConfig+0x108>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d157      	bne.n	80034d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e242      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003430:	d106      	bne.n	8003440 <HAL_RCC_OscConfig+0x74>
 8003432:	4b76      	ldr	r3, [pc, #472]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a75      	ldr	r2, [pc, #468]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e01d      	b.n	800347c <HAL_RCC_OscConfig+0xb0>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x98>
 800344a:	4b70      	ldr	r3, [pc, #448]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6f      	ldr	r2, [pc, #444]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 8003450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b6d      	ldr	r3, [pc, #436]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6c      	ldr	r2, [pc, #432]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0xb0>
 8003464:	4b69      	ldr	r3, [pc, #420]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a68      	ldr	r2, [pc, #416]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 800346a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b66      	ldr	r3, [pc, #408]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a65      	ldr	r2, [pc, #404]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 8003476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800347a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d013      	beq.n	80034ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe fccc 	bl	8001e20 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800348c:	f7fe fcc8 	bl	8001e20 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	@ 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e207      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	4b5b      	ldr	r3, [pc, #364]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0xc0>
 80034aa:	e014      	b.n	80034d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fcb8 	bl	8001e20 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fe fcb4 	bl	8001e20 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	@ 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1f3      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c6:	4b51      	ldr	r3, [pc, #324]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0xe8>
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d063      	beq.n	80035aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034e2:	4b4a      	ldr	r3, [pc, #296]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ee:	4b47      	ldr	r3, [pc, #284]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d11c      	bne.n	8003534 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fa:	4b44      	ldr	r3, [pc, #272]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d116      	bne.n	8003534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003506:	4b41      	ldr	r3, [pc, #260]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_RCC_OscConfig+0x152>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d001      	beq.n	800351e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e1c7      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351e:	4b3b      	ldr	r3, [pc, #236]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4937      	ldr	r1, [pc, #220]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	e03a      	b.n	80035aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d020      	beq.n	800357e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800353c:	4b34      	ldr	r3, [pc, #208]	@ (8003610 <HAL_RCC_OscConfig+0x244>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe fc6d 	bl	8001e20 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354a:	f7fe fc69 	bl	8001e20 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e1a8      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355c:	4b2b      	ldr	r3, [pc, #172]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003568:	4b28      	ldr	r3, [pc, #160]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4925      	ldr	r1, [pc, #148]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 8003578:	4313      	orrs	r3, r2
 800357a:	600b      	str	r3, [r1, #0]
 800357c:	e015      	b.n	80035aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800357e:	4b24      	ldr	r3, [pc, #144]	@ (8003610 <HAL_RCC_OscConfig+0x244>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe fc4c 	bl	8001e20 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358c:	f7fe fc48 	bl	8001e20 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e187      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359e:	4b1b      	ldr	r3, [pc, #108]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d036      	beq.n	8003624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d016      	beq.n	80035ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035be:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <HAL_RCC_OscConfig+0x248>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7fe fc2c 	bl	8001e20 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035cc:	f7fe fc28 	bl	8001e20 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e167      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035de:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_RCC_OscConfig+0x240>)
 80035e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x200>
 80035ea:	e01b      	b.n	8003624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ec:	4b09      	ldr	r3, [pc, #36]	@ (8003614 <HAL_RCC_OscConfig+0x248>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7fe fc15 	bl	8001e20 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	e00e      	b.n	8003618 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fa:	f7fe fc11 	bl	8001e20 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d907      	bls.n	8003618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e150      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
 800360c:	40023800 	.word	0x40023800
 8003610:	42470000 	.word	0x42470000
 8003614:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003618:	4b88      	ldr	r3, [pc, #544]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 800361a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ea      	bne.n	80035fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8097 	beq.w	8003760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003636:	4b81      	ldr	r3, [pc, #516]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	4b7d      	ldr	r3, [pc, #500]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	4a7c      	ldr	r2, [pc, #496]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 800364c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003650:	6413      	str	r3, [r2, #64]	@ 0x40
 8003652:	4b7a      	ldr	r3, [pc, #488]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365e:	2301      	movs	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	4b77      	ldr	r3, [pc, #476]	@ (8003840 <HAL_RCC_OscConfig+0x474>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d118      	bne.n	80036a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366e:	4b74      	ldr	r3, [pc, #464]	@ (8003840 <HAL_RCC_OscConfig+0x474>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a73      	ldr	r2, [pc, #460]	@ (8003840 <HAL_RCC_OscConfig+0x474>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367a:	f7fe fbd1 	bl	8001e20 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7fe fbcd 	bl	8001e20 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e10c      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	4b6a      	ldr	r3, [pc, #424]	@ (8003840 <HAL_RCC_OscConfig+0x474>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x2ea>
 80036a8:	4b64      	ldr	r3, [pc, #400]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ac:	4a63      	ldr	r2, [pc, #396]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b4:	e01c      	b.n	80036f0 <HAL_RCC_OscConfig+0x324>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x30c>
 80036be:	4b5f      	ldr	r3, [pc, #380]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c2:	4a5e      	ldr	r2, [pc, #376]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80036c4:	f043 0304 	orr.w	r3, r3, #4
 80036c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ca:	4b5c      	ldr	r3, [pc, #368]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ce:	4a5b      	ldr	r2, [pc, #364]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036d6:	e00b      	b.n	80036f0 <HAL_RCC_OscConfig+0x324>
 80036d8:	4b58      	ldr	r3, [pc, #352]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036dc:	4a57      	ldr	r2, [pc, #348]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e4:	4b55      	ldr	r3, [pc, #340]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e8:	4a54      	ldr	r2, [pc, #336]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80036ea:	f023 0304 	bic.w	r3, r3, #4
 80036ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d015      	beq.n	8003724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fe fb92 	bl	8001e20 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003700:	f7fe fb8e 	bl	8001e20 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e0cb      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003716:	4b49      	ldr	r3, [pc, #292]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0ee      	beq.n	8003700 <HAL_RCC_OscConfig+0x334>
 8003722:	e014      	b.n	800374e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003724:	f7fe fb7c 	bl	8001e20 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372a:	e00a      	b.n	8003742 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372c:	f7fe fb78 	bl	8001e20 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0b5      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003742:	4b3e      	ldr	r3, [pc, #248]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1ee      	bne.n	800372c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b39      	ldr	r3, [pc, #228]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 8003756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003758:	4a38      	ldr	r2, [pc, #224]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800375e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80a1 	beq.w	80038ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800376a:	4b34      	ldr	r3, [pc, #208]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b08      	cmp	r3, #8
 8003774:	d05c      	beq.n	8003830 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d141      	bne.n	8003802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b31      	ldr	r3, [pc, #196]	@ (8003844 <HAL_RCC_OscConfig+0x478>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe fb4c 	bl	8001e20 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe fb48 	bl	8001e20 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e087      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	4b27      	ldr	r3, [pc, #156]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	019b      	lsls	r3, r3, #6
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	3b01      	subs	r3, #1
 80037c4:	041b      	lsls	r3, r3, #16
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	061b      	lsls	r3, r3, #24
 80037ce:	491b      	ldr	r1, [pc, #108]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003844 <HAL_RCC_OscConfig+0x478>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037da:	f7fe fb21 	bl	8001e20 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fe fb1d 	bl	8001e20 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e05c      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f4:	4b11      	ldr	r3, [pc, #68]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x416>
 8003800:	e054      	b.n	80038ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b10      	ldr	r3, [pc, #64]	@ (8003844 <HAL_RCC_OscConfig+0x478>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fe fb0a 	bl	8001e20 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7fe fb06 	bl	8001e20 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e045      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_RCC_OscConfig+0x470>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x444>
 800382e:	e03d      	b.n	80038ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d107      	bne.n	8003848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e038      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
 800383c:	40023800 	.word	0x40023800
 8003840:	40007000 	.word	0x40007000
 8003844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003848:	4b1b      	ldr	r3, [pc, #108]	@ (80038b8 <HAL_RCC_OscConfig+0x4ec>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d028      	beq.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d121      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d11a      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003878:	4013      	ands	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800387e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003880:	4293      	cmp	r3, r2
 8003882:	d111      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	3b01      	subs	r3, #1
 8003892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800

080038bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0cc      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d0:	4b68      	ldr	r3, [pc, #416]	@ (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d90c      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b65      	ldr	r3, [pc, #404]	@ (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b63      	ldr	r3, [pc, #396]	@ (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0b8      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003910:	4b59      	ldr	r3, [pc, #356]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a58      	ldr	r2, [pc, #352]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800391a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003928:	4b53      	ldr	r3, [pc, #332]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a52      	ldr	r2, [pc, #328]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b50      	ldr	r3, [pc, #320]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	494d      	ldr	r1, [pc, #308]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d044      	beq.n	80039dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d119      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d003      	beq.n	800397a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003976:	2b03      	cmp	r3, #3
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e06f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e067      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399a:	4b37      	ldr	r3, [pc, #220]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 0203 	bic.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4934      	ldr	r1, [pc, #208]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039ac:	f7fe fa38 	bl	8001e20 <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b4:	f7fe fa34 	bl	8001e20 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e04f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 020c 	and.w	r2, r3, #12
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	429a      	cmp	r2, r3
 80039da:	d1eb      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039dc:	4b25      	ldr	r3, [pc, #148]	@ (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d20c      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e032      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b19      	ldr	r3, [pc, #100]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4916      	ldr	r1, [pc, #88]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a2e:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	490e      	ldr	r1, [pc, #56]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a42:	f000 f821 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a46:	4602      	mov	r2, r0
 8003a48:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	490a      	ldr	r1, [pc, #40]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	5ccb      	ldrb	r3, [r1, r3]
 8003a56:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5a:	4a09      	ldr	r2, [pc, #36]	@ (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a5e:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe f998 	bl	8001d98 <HAL_InitTick>

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023c00 	.word	0x40023c00
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	08004c10 	.word	0x08004c10
 8003a80:	20000000 	.word	0x20000000
 8003a84:	20000004 	.word	0x20000004

08003a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a8c:	b094      	sub	sp, #80	@ 0x50
 8003a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa0:	4b79      	ldr	r3, [pc, #484]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	f200 80e1 	bhi.w	8003c74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x34>
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aba:	e0db      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b73      	ldr	r3, [pc, #460]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003abe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ac0:	e0db      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ac2:	4b73      	ldr	r3, [pc, #460]	@ (8003c90 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ac6:	e0d8      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ac8:	4b6f      	ldr	r3, [pc, #444]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ad0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d063      	beq.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ade:	4b6a      	ldr	r3, [pc, #424]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ae8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af2:	2300      	movs	r3, #0
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003afa:	4622      	mov	r2, r4
 8003afc:	462b      	mov	r3, r5
 8003afe:	f04f 0000 	mov.w	r0, #0
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	0159      	lsls	r1, r3, #5
 8003b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b0c:	0150      	lsls	r0, r2, #5
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4621      	mov	r1, r4
 8003b14:	1a51      	subs	r1, r2, r1
 8003b16:	6139      	str	r1, [r7, #16]
 8003b18:	4629      	mov	r1, r5
 8003b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b2c:	4659      	mov	r1, fp
 8003b2e:	018b      	lsls	r3, r1, #6
 8003b30:	4651      	mov	r1, sl
 8003b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b36:	4651      	mov	r1, sl
 8003b38:	018a      	lsls	r2, r1, #6
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	ebb2 0801 	subs.w	r8, r2, r1
 8003b40:	4659      	mov	r1, fp
 8003b42:	eb63 0901 	sbc.w	r9, r3, r1
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b5a:	4690      	mov	r8, r2
 8003b5c:	4699      	mov	r9, r3
 8003b5e:	4623      	mov	r3, r4
 8003b60:	eb18 0303 	adds.w	r3, r8, r3
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	462b      	mov	r3, r5
 8003b68:	eb49 0303 	adc.w	r3, r9, r3
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	024b      	lsls	r3, r1, #9
 8003b7e:	4621      	mov	r1, r4
 8003b80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b84:	4621      	mov	r1, r4
 8003b86:	024a      	lsls	r2, r1, #9
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b8e:	2200      	movs	r2, #0
 8003b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b98:	f7fd f822 	bl	8000be0 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ba4:	e058      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba6:	4b38      	ldr	r3, [pc, #224]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	099b      	lsrs	r3, r3, #6
 8003bac:	2200      	movs	r2, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bb6:	623b      	str	r3, [r7, #32]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	f04f 0000 	mov.w	r0, #0
 8003bc8:	f04f 0100 	mov.w	r1, #0
 8003bcc:	0159      	lsls	r1, r3, #5
 8003bce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd2:	0150      	lsls	r0, r2, #5
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4641      	mov	r1, r8
 8003bda:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bde:	4649      	mov	r1, r9
 8003be0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bf8:	ebb2 040a 	subs.w	r4, r2, sl
 8003bfc:	eb63 050b 	sbc.w	r5, r3, fp
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	00eb      	lsls	r3, r5, #3
 8003c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c0e:	00e2      	lsls	r2, r4, #3
 8003c10:	4614      	mov	r4, r2
 8003c12:	461d      	mov	r5, r3
 8003c14:	4643      	mov	r3, r8
 8003c16:	18e3      	adds	r3, r4, r3
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	464b      	mov	r3, r9
 8003c1c:	eb45 0303 	adc.w	r3, r5, r3
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c2e:	4629      	mov	r1, r5
 8003c30:	028b      	lsls	r3, r1, #10
 8003c32:	4621      	mov	r1, r4
 8003c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c38:	4621      	mov	r1, r4
 8003c3a:	028a      	lsls	r2, r1, #10
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c42:	2200      	movs	r2, #0
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	61fa      	str	r2, [r7, #28]
 8003c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c4c:	f7fc ffc8 	bl	8000be0 <__aeabi_uldivmod>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4613      	mov	r3, r2
 8003c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c58:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	3301      	adds	r3, #1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c72:	e002      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c74:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3750      	adds	r7, #80	@ 0x50
 8003c80:	46bd      	mov	sp, r7
 8003c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	00f42400 	.word	0x00f42400
 8003c90:	007a1200 	.word	0x007a1200

08003c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c98:	4b03      	ldr	r3, [pc, #12]	@ (8003ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000000 	.word	0x20000000

08003cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cb0:	f7ff fff0 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0a9b      	lsrs	r3, r3, #10
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4903      	ldr	r1, [pc, #12]	@ (8003cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	08004c20 	.word	0x08004c20

08003cd4 <memset>:
 8003cd4:	4402      	add	r2, r0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d100      	bne.n	8003cde <memset+0xa>
 8003cdc:	4770      	bx	lr
 8003cde:	f803 1b01 	strb.w	r1, [r3], #1
 8003ce2:	e7f9      	b.n	8003cd8 <memset+0x4>

08003ce4 <__errno>:
 8003ce4:	4b01      	ldr	r3, [pc, #4]	@ (8003cec <__errno+0x8>)
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	2000000c 	.word	0x2000000c

08003cf0 <__libc_init_array>:
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	4d0d      	ldr	r5, [pc, #52]	@ (8003d28 <__libc_init_array+0x38>)
 8003cf4:	4c0d      	ldr	r4, [pc, #52]	@ (8003d2c <__libc_init_array+0x3c>)
 8003cf6:	1b64      	subs	r4, r4, r5
 8003cf8:	10a4      	asrs	r4, r4, #2
 8003cfa:	2600      	movs	r6, #0
 8003cfc:	42a6      	cmp	r6, r4
 8003cfe:	d109      	bne.n	8003d14 <__libc_init_array+0x24>
 8003d00:	4d0b      	ldr	r5, [pc, #44]	@ (8003d30 <__libc_init_array+0x40>)
 8003d02:	4c0c      	ldr	r4, [pc, #48]	@ (8003d34 <__libc_init_array+0x44>)
 8003d04:	f000 ff76 	bl	8004bf4 <_init>
 8003d08:	1b64      	subs	r4, r4, r5
 8003d0a:	10a4      	asrs	r4, r4, #2
 8003d0c:	2600      	movs	r6, #0
 8003d0e:	42a6      	cmp	r6, r4
 8003d10:	d105      	bne.n	8003d1e <__libc_init_array+0x2e>
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d18:	4798      	blx	r3
 8003d1a:	3601      	adds	r6, #1
 8003d1c:	e7ee      	b.n	8003cfc <__libc_init_array+0xc>
 8003d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d22:	4798      	blx	r3
 8003d24:	3601      	adds	r6, #1
 8003d26:	e7f2      	b.n	8003d0e <__libc_init_array+0x1e>
 8003d28:	08004c60 	.word	0x08004c60
 8003d2c:	08004c60 	.word	0x08004c60
 8003d30:	08004c60 	.word	0x08004c60
 8003d34:	08004c64 	.word	0x08004c64

08003d38 <pow>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	ed2d 8b02 	vpush	{d8}
 8003d3e:	eeb0 8a40 	vmov.f32	s16, s0
 8003d42:	eef0 8a60 	vmov.f32	s17, s1
 8003d46:	ec55 4b11 	vmov	r4, r5, d1
 8003d4a:	f000 f871 	bl	8003e30 <__ieee754_pow>
 8003d4e:	4622      	mov	r2, r4
 8003d50:	462b      	mov	r3, r5
 8003d52:	4620      	mov	r0, r4
 8003d54:	4629      	mov	r1, r5
 8003d56:	ec57 6b10 	vmov	r6, r7, d0
 8003d5a:	f7fc fe8b 	bl	8000a74 <__aeabi_dcmpun>
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d13b      	bne.n	8003dda <pow+0xa2>
 8003d62:	ec51 0b18 	vmov	r0, r1, d8
 8003d66:	2200      	movs	r2, #0
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f7fc fe51 	bl	8000a10 <__aeabi_dcmpeq>
 8003d6e:	b1b8      	cbz	r0, 8003da0 <pow+0x68>
 8003d70:	2200      	movs	r2, #0
 8003d72:	2300      	movs	r3, #0
 8003d74:	4620      	mov	r0, r4
 8003d76:	4629      	mov	r1, r5
 8003d78:	f7fc fe4a 	bl	8000a10 <__aeabi_dcmpeq>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d146      	bne.n	8003e0e <pow+0xd6>
 8003d80:	ec45 4b10 	vmov	d0, r4, r5
 8003d84:	f000 f848 	bl	8003e18 <finite>
 8003d88:	b338      	cbz	r0, 8003dda <pow+0xa2>
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	4620      	mov	r0, r4
 8003d90:	4629      	mov	r1, r5
 8003d92:	f7fc fe47 	bl	8000a24 <__aeabi_dcmplt>
 8003d96:	b300      	cbz	r0, 8003dda <pow+0xa2>
 8003d98:	f7ff ffa4 	bl	8003ce4 <__errno>
 8003d9c:	2322      	movs	r3, #34	@ 0x22
 8003d9e:	e01b      	b.n	8003dd8 <pow+0xa0>
 8003da0:	ec47 6b10 	vmov	d0, r6, r7
 8003da4:	f000 f838 	bl	8003e18 <finite>
 8003da8:	b9e0      	cbnz	r0, 8003de4 <pow+0xac>
 8003daa:	eeb0 0a48 	vmov.f32	s0, s16
 8003dae:	eef0 0a68 	vmov.f32	s1, s17
 8003db2:	f000 f831 	bl	8003e18 <finite>
 8003db6:	b1a8      	cbz	r0, 8003de4 <pow+0xac>
 8003db8:	ec45 4b10 	vmov	d0, r4, r5
 8003dbc:	f000 f82c 	bl	8003e18 <finite>
 8003dc0:	b180      	cbz	r0, 8003de4 <pow+0xac>
 8003dc2:	4632      	mov	r2, r6
 8003dc4:	463b      	mov	r3, r7
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	4639      	mov	r1, r7
 8003dca:	f7fc fe53 	bl	8000a74 <__aeabi_dcmpun>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d0e2      	beq.n	8003d98 <pow+0x60>
 8003dd2:	f7ff ff87 	bl	8003ce4 <__errno>
 8003dd6:	2321      	movs	r3, #33	@ 0x21
 8003dd8:	6003      	str	r3, [r0, #0]
 8003dda:	ecbd 8b02 	vpop	{d8}
 8003dde:	ec47 6b10 	vmov	d0, r6, r7
 8003de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de4:	2200      	movs	r2, #0
 8003de6:	2300      	movs	r3, #0
 8003de8:	4630      	mov	r0, r6
 8003dea:	4639      	mov	r1, r7
 8003dec:	f7fc fe10 	bl	8000a10 <__aeabi_dcmpeq>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d0f2      	beq.n	8003dda <pow+0xa2>
 8003df4:	eeb0 0a48 	vmov.f32	s0, s16
 8003df8:	eef0 0a68 	vmov.f32	s1, s17
 8003dfc:	f000 f80c 	bl	8003e18 <finite>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d0ea      	beq.n	8003dda <pow+0xa2>
 8003e04:	ec45 4b10 	vmov	d0, r4, r5
 8003e08:	f000 f806 	bl	8003e18 <finite>
 8003e0c:	e7c3      	b.n	8003d96 <pow+0x5e>
 8003e0e:	4f01      	ldr	r7, [pc, #4]	@ (8003e14 <pow+0xdc>)
 8003e10:	2600      	movs	r6, #0
 8003e12:	e7e2      	b.n	8003dda <pow+0xa2>
 8003e14:	3ff00000 	.word	0x3ff00000

08003e18 <finite>:
 8003e18:	b082      	sub	sp, #8
 8003e1a:	ed8d 0b00 	vstr	d0, [sp]
 8003e1e:	9801      	ldr	r0, [sp, #4]
 8003e20:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003e24:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003e28:	0fc0      	lsrs	r0, r0, #31
 8003e2a:	b002      	add	sp, #8
 8003e2c:	4770      	bx	lr
	...

08003e30 <__ieee754_pow>:
 8003e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e34:	b091      	sub	sp, #68	@ 0x44
 8003e36:	ed8d 1b00 	vstr	d1, [sp]
 8003e3a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8003e3e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8003e42:	ea5a 0001 	orrs.w	r0, sl, r1
 8003e46:	ec57 6b10 	vmov	r6, r7, d0
 8003e4a:	d113      	bne.n	8003e74 <__ieee754_pow+0x44>
 8003e4c:	19b3      	adds	r3, r6, r6
 8003e4e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8003e52:	4152      	adcs	r2, r2
 8003e54:	4298      	cmp	r0, r3
 8003e56:	4b98      	ldr	r3, [pc, #608]	@ (80040b8 <__ieee754_pow+0x288>)
 8003e58:	4193      	sbcs	r3, r2
 8003e5a:	f080 84ea 	bcs.w	8004832 <__ieee754_pow+0xa02>
 8003e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e62:	4630      	mov	r0, r6
 8003e64:	4639      	mov	r1, r7
 8003e66:	f7fc f9b5 	bl	80001d4 <__adddf3>
 8003e6a:	ec41 0b10 	vmov	d0, r0, r1
 8003e6e:	b011      	add	sp, #68	@ 0x44
 8003e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e74:	4a91      	ldr	r2, [pc, #580]	@ (80040bc <__ieee754_pow+0x28c>)
 8003e76:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003e7a:	4590      	cmp	r8, r2
 8003e7c:	463d      	mov	r5, r7
 8003e7e:	4633      	mov	r3, r6
 8003e80:	d806      	bhi.n	8003e90 <__ieee754_pow+0x60>
 8003e82:	d101      	bne.n	8003e88 <__ieee754_pow+0x58>
 8003e84:	2e00      	cmp	r6, #0
 8003e86:	d1ea      	bne.n	8003e5e <__ieee754_pow+0x2e>
 8003e88:	4592      	cmp	sl, r2
 8003e8a:	d801      	bhi.n	8003e90 <__ieee754_pow+0x60>
 8003e8c:	d10e      	bne.n	8003eac <__ieee754_pow+0x7c>
 8003e8e:	b169      	cbz	r1, 8003eac <__ieee754_pow+0x7c>
 8003e90:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8003e94:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8003e98:	431d      	orrs	r5, r3
 8003e9a:	d1e0      	bne.n	8003e5e <__ieee754_pow+0x2e>
 8003e9c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003ea0:	18db      	adds	r3, r3, r3
 8003ea2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8003ea6:	4152      	adcs	r2, r2
 8003ea8:	429d      	cmp	r5, r3
 8003eaa:	e7d4      	b.n	8003e56 <__ieee754_pow+0x26>
 8003eac:	2d00      	cmp	r5, #0
 8003eae:	46c3      	mov	fp, r8
 8003eb0:	da3a      	bge.n	8003f28 <__ieee754_pow+0xf8>
 8003eb2:	4a83      	ldr	r2, [pc, #524]	@ (80040c0 <__ieee754_pow+0x290>)
 8003eb4:	4592      	cmp	sl, r2
 8003eb6:	d84d      	bhi.n	8003f54 <__ieee754_pow+0x124>
 8003eb8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8003ebc:	4592      	cmp	sl, r2
 8003ebe:	f240 84c7 	bls.w	8004850 <__ieee754_pow+0xa20>
 8003ec2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8003ec6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8003eca:	2a14      	cmp	r2, #20
 8003ecc:	dd0f      	ble.n	8003eee <__ieee754_pow+0xbe>
 8003ece:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8003ed2:	fa21 f402 	lsr.w	r4, r1, r2
 8003ed6:	fa04 f202 	lsl.w	r2, r4, r2
 8003eda:	428a      	cmp	r2, r1
 8003edc:	f040 84b8 	bne.w	8004850 <__ieee754_pow+0xa20>
 8003ee0:	f004 0401 	and.w	r4, r4, #1
 8003ee4:	f1c4 0402 	rsb	r4, r4, #2
 8003ee8:	2900      	cmp	r1, #0
 8003eea:	d158      	bne.n	8003f9e <__ieee754_pow+0x16e>
 8003eec:	e00e      	b.n	8003f0c <__ieee754_pow+0xdc>
 8003eee:	2900      	cmp	r1, #0
 8003ef0:	d154      	bne.n	8003f9c <__ieee754_pow+0x16c>
 8003ef2:	f1c2 0214 	rsb	r2, r2, #20
 8003ef6:	fa4a f402 	asr.w	r4, sl, r2
 8003efa:	fa04 f202 	lsl.w	r2, r4, r2
 8003efe:	4552      	cmp	r2, sl
 8003f00:	f040 84a3 	bne.w	800484a <__ieee754_pow+0xa1a>
 8003f04:	f004 0401 	and.w	r4, r4, #1
 8003f08:	f1c4 0402 	rsb	r4, r4, #2
 8003f0c:	4a6d      	ldr	r2, [pc, #436]	@ (80040c4 <__ieee754_pow+0x294>)
 8003f0e:	4592      	cmp	sl, r2
 8003f10:	d12e      	bne.n	8003f70 <__ieee754_pow+0x140>
 8003f12:	f1b9 0f00 	cmp.w	r9, #0
 8003f16:	f280 8494 	bge.w	8004842 <__ieee754_pow+0xa12>
 8003f1a:	496a      	ldr	r1, [pc, #424]	@ (80040c4 <__ieee754_pow+0x294>)
 8003f1c:	4632      	mov	r2, r6
 8003f1e:	463b      	mov	r3, r7
 8003f20:	2000      	movs	r0, #0
 8003f22:	f7fc fc37 	bl	8000794 <__aeabi_ddiv>
 8003f26:	e7a0      	b.n	8003e6a <__ieee754_pow+0x3a>
 8003f28:	2400      	movs	r4, #0
 8003f2a:	bbc1      	cbnz	r1, 8003f9e <__ieee754_pow+0x16e>
 8003f2c:	4a63      	ldr	r2, [pc, #396]	@ (80040bc <__ieee754_pow+0x28c>)
 8003f2e:	4592      	cmp	sl, r2
 8003f30:	d1ec      	bne.n	8003f0c <__ieee754_pow+0xdc>
 8003f32:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8003f36:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	f000 8479 	beq.w	8004832 <__ieee754_pow+0xa02>
 8003f40:	4b61      	ldr	r3, [pc, #388]	@ (80040c8 <__ieee754_pow+0x298>)
 8003f42:	4598      	cmp	r8, r3
 8003f44:	d908      	bls.n	8003f58 <__ieee754_pow+0x128>
 8003f46:	f1b9 0f00 	cmp.w	r9, #0
 8003f4a:	f2c0 8476 	blt.w	800483a <__ieee754_pow+0xa0a>
 8003f4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f52:	e78a      	b.n	8003e6a <__ieee754_pow+0x3a>
 8003f54:	2402      	movs	r4, #2
 8003f56:	e7e8      	b.n	8003f2a <__ieee754_pow+0xfa>
 8003f58:	f1b9 0f00 	cmp.w	r9, #0
 8003f5c:	f04f 0000 	mov.w	r0, #0
 8003f60:	f04f 0100 	mov.w	r1, #0
 8003f64:	da81      	bge.n	8003e6a <__ieee754_pow+0x3a>
 8003f66:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003f6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003f6e:	e77c      	b.n	8003e6a <__ieee754_pow+0x3a>
 8003f70:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8003f74:	d106      	bne.n	8003f84 <__ieee754_pow+0x154>
 8003f76:	4632      	mov	r2, r6
 8003f78:	463b      	mov	r3, r7
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	4639      	mov	r1, r7
 8003f7e:	f7fc fadf 	bl	8000540 <__aeabi_dmul>
 8003f82:	e772      	b.n	8003e6a <__ieee754_pow+0x3a>
 8003f84:	4a51      	ldr	r2, [pc, #324]	@ (80040cc <__ieee754_pow+0x29c>)
 8003f86:	4591      	cmp	r9, r2
 8003f88:	d109      	bne.n	8003f9e <__ieee754_pow+0x16e>
 8003f8a:	2d00      	cmp	r5, #0
 8003f8c:	db07      	blt.n	8003f9e <__ieee754_pow+0x16e>
 8003f8e:	ec47 6b10 	vmov	d0, r6, r7
 8003f92:	b011      	add	sp, #68	@ 0x44
 8003f94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f98:	f000 bd52 	b.w	8004a40 <__ieee754_sqrt>
 8003f9c:	2400      	movs	r4, #0
 8003f9e:	ec47 6b10 	vmov	d0, r6, r7
 8003fa2:	9302      	str	r3, [sp, #8]
 8003fa4:	f000 fc88 	bl	80048b8 <fabs>
 8003fa8:	9b02      	ldr	r3, [sp, #8]
 8003faa:	ec51 0b10 	vmov	r0, r1, d0
 8003fae:	bb53      	cbnz	r3, 8004006 <__ieee754_pow+0x1d6>
 8003fb0:	4b44      	ldr	r3, [pc, #272]	@ (80040c4 <__ieee754_pow+0x294>)
 8003fb2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d002      	beq.n	8003fc0 <__ieee754_pow+0x190>
 8003fba:	f1b8 0f00 	cmp.w	r8, #0
 8003fbe:	d122      	bne.n	8004006 <__ieee754_pow+0x1d6>
 8003fc0:	f1b9 0f00 	cmp.w	r9, #0
 8003fc4:	da05      	bge.n	8003fd2 <__ieee754_pow+0x1a2>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	2000      	movs	r0, #0
 8003fcc:	493d      	ldr	r1, [pc, #244]	@ (80040c4 <__ieee754_pow+0x294>)
 8003fce:	f7fc fbe1 	bl	8000794 <__aeabi_ddiv>
 8003fd2:	2d00      	cmp	r5, #0
 8003fd4:	f6bf af49 	bge.w	8003e6a <__ieee754_pow+0x3a>
 8003fd8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8003fdc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8003fe0:	ea58 0804 	orrs.w	r8, r8, r4
 8003fe4:	d108      	bne.n	8003ff8 <__ieee754_pow+0x1c8>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4610      	mov	r0, r2
 8003fec:	4619      	mov	r1, r3
 8003fee:	f7fc f8ef 	bl	80001d0 <__aeabi_dsub>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	e794      	b.n	8003f22 <__ieee754_pow+0xf2>
 8003ff8:	2c01      	cmp	r4, #1
 8003ffa:	f47f af36 	bne.w	8003e6a <__ieee754_pow+0x3a>
 8003ffe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004002:	4619      	mov	r1, r3
 8004004:	e731      	b.n	8003e6a <__ieee754_pow+0x3a>
 8004006:	0feb      	lsrs	r3, r5, #31
 8004008:	3b01      	subs	r3, #1
 800400a:	ea53 0204 	orrs.w	r2, r3, r4
 800400e:	d102      	bne.n	8004016 <__ieee754_pow+0x1e6>
 8004010:	4632      	mov	r2, r6
 8004012:	463b      	mov	r3, r7
 8004014:	e7e9      	b.n	8003fea <__ieee754_pow+0x1ba>
 8004016:	3c01      	subs	r4, #1
 8004018:	431c      	orrs	r4, r3
 800401a:	d016      	beq.n	800404a <__ieee754_pow+0x21a>
 800401c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80040a8 <__ieee754_pow+0x278>
 8004020:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8004024:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004028:	f240 8112 	bls.w	8004250 <__ieee754_pow+0x420>
 800402c:	4b28      	ldr	r3, [pc, #160]	@ (80040d0 <__ieee754_pow+0x2a0>)
 800402e:	459a      	cmp	sl, r3
 8004030:	4b25      	ldr	r3, [pc, #148]	@ (80040c8 <__ieee754_pow+0x298>)
 8004032:	d916      	bls.n	8004062 <__ieee754_pow+0x232>
 8004034:	4598      	cmp	r8, r3
 8004036:	d80b      	bhi.n	8004050 <__ieee754_pow+0x220>
 8004038:	f1b9 0f00 	cmp.w	r9, #0
 800403c:	da0b      	bge.n	8004056 <__ieee754_pow+0x226>
 800403e:	2000      	movs	r0, #0
 8004040:	b011      	add	sp, #68	@ 0x44
 8004042:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004046:	f000 bcf3 	b.w	8004a30 <__math_oflow>
 800404a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80040b0 <__ieee754_pow+0x280>
 800404e:	e7e7      	b.n	8004020 <__ieee754_pow+0x1f0>
 8004050:	f1b9 0f00 	cmp.w	r9, #0
 8004054:	dcf3      	bgt.n	800403e <__ieee754_pow+0x20e>
 8004056:	2000      	movs	r0, #0
 8004058:	b011      	add	sp, #68	@ 0x44
 800405a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405e:	f000 bcdf 	b.w	8004a20 <__math_uflow>
 8004062:	4598      	cmp	r8, r3
 8004064:	d20c      	bcs.n	8004080 <__ieee754_pow+0x250>
 8004066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800406a:	2200      	movs	r2, #0
 800406c:	2300      	movs	r3, #0
 800406e:	f7fc fcd9 	bl	8000a24 <__aeabi_dcmplt>
 8004072:	3800      	subs	r0, #0
 8004074:	bf18      	it	ne
 8004076:	2001      	movne	r0, #1
 8004078:	f1b9 0f00 	cmp.w	r9, #0
 800407c:	daec      	bge.n	8004058 <__ieee754_pow+0x228>
 800407e:	e7df      	b.n	8004040 <__ieee754_pow+0x210>
 8004080:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <__ieee754_pow+0x294>)
 8004082:	4598      	cmp	r8, r3
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	d924      	bls.n	80040d4 <__ieee754_pow+0x2a4>
 800408a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800408e:	2300      	movs	r3, #0
 8004090:	f7fc fcc8 	bl	8000a24 <__aeabi_dcmplt>
 8004094:	3800      	subs	r0, #0
 8004096:	bf18      	it	ne
 8004098:	2001      	movne	r0, #1
 800409a:	f1b9 0f00 	cmp.w	r9, #0
 800409e:	dccf      	bgt.n	8004040 <__ieee754_pow+0x210>
 80040a0:	e7da      	b.n	8004058 <__ieee754_pow+0x228>
 80040a2:	bf00      	nop
 80040a4:	f3af 8000 	nop.w
 80040a8:	00000000 	.word	0x00000000
 80040ac:	3ff00000 	.word	0x3ff00000
 80040b0:	00000000 	.word	0x00000000
 80040b4:	bff00000 	.word	0xbff00000
 80040b8:	fff00000 	.word	0xfff00000
 80040bc:	7ff00000 	.word	0x7ff00000
 80040c0:	433fffff 	.word	0x433fffff
 80040c4:	3ff00000 	.word	0x3ff00000
 80040c8:	3fefffff 	.word	0x3fefffff
 80040cc:	3fe00000 	.word	0x3fe00000
 80040d0:	43f00000 	.word	0x43f00000
 80040d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004240 <__ieee754_pow+0x410>)
 80040d6:	f7fc f87b 	bl	80001d0 <__aeabi_dsub>
 80040da:	a351      	add	r3, pc, #324	@ (adr r3, 8004220 <__ieee754_pow+0x3f0>)
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	4604      	mov	r4, r0
 80040e2:	460d      	mov	r5, r1
 80040e4:	f7fc fa2c 	bl	8000540 <__aeabi_dmul>
 80040e8:	a34f      	add	r3, pc, #316	@ (adr r3, 8004228 <__ieee754_pow+0x3f8>)
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	4606      	mov	r6, r0
 80040f0:	460f      	mov	r7, r1
 80040f2:	4620      	mov	r0, r4
 80040f4:	4629      	mov	r1, r5
 80040f6:	f7fc fa23 	bl	8000540 <__aeabi_dmul>
 80040fa:	4b52      	ldr	r3, [pc, #328]	@ (8004244 <__ieee754_pow+0x414>)
 80040fc:	4682      	mov	sl, r0
 80040fe:	468b      	mov	fp, r1
 8004100:	2200      	movs	r2, #0
 8004102:	4620      	mov	r0, r4
 8004104:	4629      	mov	r1, r5
 8004106:	f7fc fa1b 	bl	8000540 <__aeabi_dmul>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	a148      	add	r1, pc, #288	@ (adr r1, 8004230 <__ieee754_pow+0x400>)
 8004110:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004114:	f7fc f85c 	bl	80001d0 <__aeabi_dsub>
 8004118:	4622      	mov	r2, r4
 800411a:	462b      	mov	r3, r5
 800411c:	f7fc fa10 	bl	8000540 <__aeabi_dmul>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	2000      	movs	r0, #0
 8004126:	4948      	ldr	r1, [pc, #288]	@ (8004248 <__ieee754_pow+0x418>)
 8004128:	f7fc f852 	bl	80001d0 <__aeabi_dsub>
 800412c:	4622      	mov	r2, r4
 800412e:	4680      	mov	r8, r0
 8004130:	4689      	mov	r9, r1
 8004132:	462b      	mov	r3, r5
 8004134:	4620      	mov	r0, r4
 8004136:	4629      	mov	r1, r5
 8004138:	f7fc fa02 	bl	8000540 <__aeabi_dmul>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4640      	mov	r0, r8
 8004142:	4649      	mov	r1, r9
 8004144:	f7fc f9fc 	bl	8000540 <__aeabi_dmul>
 8004148:	a33b      	add	r3, pc, #236	@ (adr r3, 8004238 <__ieee754_pow+0x408>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc f9f7 	bl	8000540 <__aeabi_dmul>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4650      	mov	r0, sl
 8004158:	4659      	mov	r1, fp
 800415a:	f7fc f839 	bl	80001d0 <__aeabi_dsub>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4680      	mov	r8, r0
 8004164:	4689      	mov	r9, r1
 8004166:	4630      	mov	r0, r6
 8004168:	4639      	mov	r1, r7
 800416a:	f7fc f833 	bl	80001d4 <__adddf3>
 800416e:	2400      	movs	r4, #0
 8004170:	4632      	mov	r2, r6
 8004172:	463b      	mov	r3, r7
 8004174:	4620      	mov	r0, r4
 8004176:	460d      	mov	r5, r1
 8004178:	f7fc f82a 	bl	80001d0 <__aeabi_dsub>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4640      	mov	r0, r8
 8004182:	4649      	mov	r1, r9
 8004184:	f7fc f824 	bl	80001d0 <__aeabi_dsub>
 8004188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800418c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004190:	2300      	movs	r3, #0
 8004192:	9304      	str	r3, [sp, #16]
 8004194:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004198:	4606      	mov	r6, r0
 800419a:	460f      	mov	r7, r1
 800419c:	4652      	mov	r2, sl
 800419e:	465b      	mov	r3, fp
 80041a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041a4:	f7fc f814 	bl	80001d0 <__aeabi_dsub>
 80041a8:	4622      	mov	r2, r4
 80041aa:	462b      	mov	r3, r5
 80041ac:	f7fc f9c8 	bl	8000540 <__aeabi_dmul>
 80041b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041b4:	4680      	mov	r8, r0
 80041b6:	4689      	mov	r9, r1
 80041b8:	4630      	mov	r0, r6
 80041ba:	4639      	mov	r1, r7
 80041bc:	f7fc f9c0 	bl	8000540 <__aeabi_dmul>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4640      	mov	r0, r8
 80041c6:	4649      	mov	r1, r9
 80041c8:	f7fc f804 	bl	80001d4 <__adddf3>
 80041cc:	4652      	mov	r2, sl
 80041ce:	465b      	mov	r3, fp
 80041d0:	4606      	mov	r6, r0
 80041d2:	460f      	mov	r7, r1
 80041d4:	4620      	mov	r0, r4
 80041d6:	4629      	mov	r1, r5
 80041d8:	f7fc f9b2 	bl	8000540 <__aeabi_dmul>
 80041dc:	460b      	mov	r3, r1
 80041de:	4602      	mov	r2, r0
 80041e0:	4680      	mov	r8, r0
 80041e2:	4689      	mov	r9, r1
 80041e4:	4630      	mov	r0, r6
 80041e6:	4639      	mov	r1, r7
 80041e8:	f7fb fff4 	bl	80001d4 <__adddf3>
 80041ec:	4b17      	ldr	r3, [pc, #92]	@ (800424c <__ieee754_pow+0x41c>)
 80041ee:	4299      	cmp	r1, r3
 80041f0:	4604      	mov	r4, r0
 80041f2:	460d      	mov	r5, r1
 80041f4:	468a      	mov	sl, r1
 80041f6:	468b      	mov	fp, r1
 80041f8:	f340 82ef 	ble.w	80047da <__ieee754_pow+0x9aa>
 80041fc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004200:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8004204:	4303      	orrs	r3, r0
 8004206:	f000 81e8 	beq.w	80045da <__ieee754_pow+0x7aa>
 800420a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800420e:	2200      	movs	r2, #0
 8004210:	2300      	movs	r3, #0
 8004212:	f7fc fc07 	bl	8000a24 <__aeabi_dcmplt>
 8004216:	3800      	subs	r0, #0
 8004218:	bf18      	it	ne
 800421a:	2001      	movne	r0, #1
 800421c:	e710      	b.n	8004040 <__ieee754_pow+0x210>
 800421e:	bf00      	nop
 8004220:	60000000 	.word	0x60000000
 8004224:	3ff71547 	.word	0x3ff71547
 8004228:	f85ddf44 	.word	0xf85ddf44
 800422c:	3e54ae0b 	.word	0x3e54ae0b
 8004230:	55555555 	.word	0x55555555
 8004234:	3fd55555 	.word	0x3fd55555
 8004238:	652b82fe 	.word	0x652b82fe
 800423c:	3ff71547 	.word	0x3ff71547
 8004240:	3ff00000 	.word	0x3ff00000
 8004244:	3fd00000 	.word	0x3fd00000
 8004248:	3fe00000 	.word	0x3fe00000
 800424c:	408fffff 	.word	0x408fffff
 8004250:	4bd5      	ldr	r3, [pc, #852]	@ (80045a8 <__ieee754_pow+0x778>)
 8004252:	402b      	ands	r3, r5
 8004254:	2200      	movs	r2, #0
 8004256:	b92b      	cbnz	r3, 8004264 <__ieee754_pow+0x434>
 8004258:	4bd4      	ldr	r3, [pc, #848]	@ (80045ac <__ieee754_pow+0x77c>)
 800425a:	f7fc f971 	bl	8000540 <__aeabi_dmul>
 800425e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8004262:	468b      	mov	fp, r1
 8004264:	ea4f 532b 	mov.w	r3, fp, asr #20
 8004268:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800426c:	4413      	add	r3, r2
 800426e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004270:	4bcf      	ldr	r3, [pc, #828]	@ (80045b0 <__ieee754_pow+0x780>)
 8004272:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8004276:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800427a:	459b      	cmp	fp, r3
 800427c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8004280:	dd08      	ble.n	8004294 <__ieee754_pow+0x464>
 8004282:	4bcc      	ldr	r3, [pc, #816]	@ (80045b4 <__ieee754_pow+0x784>)
 8004284:	459b      	cmp	fp, r3
 8004286:	f340 81a5 	ble.w	80045d4 <__ieee754_pow+0x7a4>
 800428a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800428c:	3301      	adds	r3, #1
 800428e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004290:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8004294:	f04f 0a00 	mov.w	sl, #0
 8004298:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800429c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800429e:	4bc6      	ldr	r3, [pc, #792]	@ (80045b8 <__ieee754_pow+0x788>)
 80042a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80042a4:	ed93 7b00 	vldr	d7, [r3]
 80042a8:	4629      	mov	r1, r5
 80042aa:	ec53 2b17 	vmov	r2, r3, d7
 80042ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80042b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80042b6:	f7fb ff8b 	bl	80001d0 <__aeabi_dsub>
 80042ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042be:	4606      	mov	r6, r0
 80042c0:	460f      	mov	r7, r1
 80042c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042c6:	f7fb ff85 	bl	80001d4 <__adddf3>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	2000      	movs	r0, #0
 80042d0:	49ba      	ldr	r1, [pc, #744]	@ (80045bc <__ieee754_pow+0x78c>)
 80042d2:	f7fc fa5f 	bl	8000794 <__aeabi_ddiv>
 80042d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4630      	mov	r0, r6
 80042e0:	4639      	mov	r1, r7
 80042e2:	f7fc f92d 	bl	8000540 <__aeabi_dmul>
 80042e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042ea:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80042ee:	106d      	asrs	r5, r5, #1
 80042f0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80042f4:	f04f 0b00 	mov.w	fp, #0
 80042f8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80042fc:	4661      	mov	r1, ip
 80042fe:	2200      	movs	r2, #0
 8004300:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004304:	4658      	mov	r0, fp
 8004306:	46e1      	mov	r9, ip
 8004308:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800430c:	4614      	mov	r4, r2
 800430e:	461d      	mov	r5, r3
 8004310:	f7fc f916 	bl	8000540 <__aeabi_dmul>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4630      	mov	r0, r6
 800431a:	4639      	mov	r1, r7
 800431c:	f7fb ff58 	bl	80001d0 <__aeabi_dsub>
 8004320:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004324:	4606      	mov	r6, r0
 8004326:	460f      	mov	r7, r1
 8004328:	4620      	mov	r0, r4
 800432a:	4629      	mov	r1, r5
 800432c:	f7fb ff50 	bl	80001d0 <__aeabi_dsub>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004338:	f7fb ff4a 	bl	80001d0 <__aeabi_dsub>
 800433c:	465a      	mov	r2, fp
 800433e:	464b      	mov	r3, r9
 8004340:	f7fc f8fe 	bl	8000540 <__aeabi_dmul>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4630      	mov	r0, r6
 800434a:	4639      	mov	r1, r7
 800434c:	f7fb ff40 	bl	80001d0 <__aeabi_dsub>
 8004350:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004354:	f7fc f8f4 	bl	8000540 <__aeabi_dmul>
 8004358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800435c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004360:	4610      	mov	r0, r2
 8004362:	4619      	mov	r1, r3
 8004364:	f7fc f8ec 	bl	8000540 <__aeabi_dmul>
 8004368:	a37d      	add	r3, pc, #500	@ (adr r3, 8004560 <__ieee754_pow+0x730>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	4604      	mov	r4, r0
 8004370:	460d      	mov	r5, r1
 8004372:	f7fc f8e5 	bl	8000540 <__aeabi_dmul>
 8004376:	a37c      	add	r3, pc, #496	@ (adr r3, 8004568 <__ieee754_pow+0x738>)
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f7fb ff2a 	bl	80001d4 <__adddf3>
 8004380:	4622      	mov	r2, r4
 8004382:	462b      	mov	r3, r5
 8004384:	f7fc f8dc 	bl	8000540 <__aeabi_dmul>
 8004388:	a379      	add	r3, pc, #484	@ (adr r3, 8004570 <__ieee754_pow+0x740>)
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f7fb ff21 	bl	80001d4 <__adddf3>
 8004392:	4622      	mov	r2, r4
 8004394:	462b      	mov	r3, r5
 8004396:	f7fc f8d3 	bl	8000540 <__aeabi_dmul>
 800439a:	a377      	add	r3, pc, #476	@ (adr r3, 8004578 <__ieee754_pow+0x748>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fb ff18 	bl	80001d4 <__adddf3>
 80043a4:	4622      	mov	r2, r4
 80043a6:	462b      	mov	r3, r5
 80043a8:	f7fc f8ca 	bl	8000540 <__aeabi_dmul>
 80043ac:	a374      	add	r3, pc, #464	@ (adr r3, 8004580 <__ieee754_pow+0x750>)
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f7fb ff0f 	bl	80001d4 <__adddf3>
 80043b6:	4622      	mov	r2, r4
 80043b8:	462b      	mov	r3, r5
 80043ba:	f7fc f8c1 	bl	8000540 <__aeabi_dmul>
 80043be:	a372      	add	r3, pc, #456	@ (adr r3, 8004588 <__ieee754_pow+0x758>)
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f7fb ff06 	bl	80001d4 <__adddf3>
 80043c8:	4622      	mov	r2, r4
 80043ca:	4606      	mov	r6, r0
 80043cc:	460f      	mov	r7, r1
 80043ce:	462b      	mov	r3, r5
 80043d0:	4620      	mov	r0, r4
 80043d2:	4629      	mov	r1, r5
 80043d4:	f7fc f8b4 	bl	8000540 <__aeabi_dmul>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4630      	mov	r0, r6
 80043de:	4639      	mov	r1, r7
 80043e0:	f7fc f8ae 	bl	8000540 <__aeabi_dmul>
 80043e4:	465a      	mov	r2, fp
 80043e6:	4604      	mov	r4, r0
 80043e8:	460d      	mov	r5, r1
 80043ea:	464b      	mov	r3, r9
 80043ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043f0:	f7fb fef0 	bl	80001d4 <__adddf3>
 80043f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80043f8:	f7fc f8a2 	bl	8000540 <__aeabi_dmul>
 80043fc:	4622      	mov	r2, r4
 80043fe:	462b      	mov	r3, r5
 8004400:	f7fb fee8 	bl	80001d4 <__adddf3>
 8004404:	465a      	mov	r2, fp
 8004406:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800440a:	464b      	mov	r3, r9
 800440c:	4658      	mov	r0, fp
 800440e:	4649      	mov	r1, r9
 8004410:	f7fc f896 	bl	8000540 <__aeabi_dmul>
 8004414:	4b6a      	ldr	r3, [pc, #424]	@ (80045c0 <__ieee754_pow+0x790>)
 8004416:	2200      	movs	r2, #0
 8004418:	4606      	mov	r6, r0
 800441a:	460f      	mov	r7, r1
 800441c:	f7fb feda 	bl	80001d4 <__adddf3>
 8004420:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004424:	f7fb fed6 	bl	80001d4 <__adddf3>
 8004428:	46d8      	mov	r8, fp
 800442a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800442e:	460d      	mov	r5, r1
 8004430:	465a      	mov	r2, fp
 8004432:	460b      	mov	r3, r1
 8004434:	4640      	mov	r0, r8
 8004436:	4649      	mov	r1, r9
 8004438:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800443c:	f7fc f880 	bl	8000540 <__aeabi_dmul>
 8004440:	465c      	mov	r4, fp
 8004442:	4680      	mov	r8, r0
 8004444:	4689      	mov	r9, r1
 8004446:	4b5e      	ldr	r3, [pc, #376]	@ (80045c0 <__ieee754_pow+0x790>)
 8004448:	2200      	movs	r2, #0
 800444a:	4620      	mov	r0, r4
 800444c:	4629      	mov	r1, r5
 800444e:	f7fb febf 	bl	80001d0 <__aeabi_dsub>
 8004452:	4632      	mov	r2, r6
 8004454:	463b      	mov	r3, r7
 8004456:	f7fb febb 	bl	80001d0 <__aeabi_dsub>
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004462:	f7fb feb5 	bl	80001d0 <__aeabi_dsub>
 8004466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800446a:	f7fc f869 	bl	8000540 <__aeabi_dmul>
 800446e:	4622      	mov	r2, r4
 8004470:	4606      	mov	r6, r0
 8004472:	460f      	mov	r7, r1
 8004474:	462b      	mov	r3, r5
 8004476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800447a:	f7fc f861 	bl	8000540 <__aeabi_dmul>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4630      	mov	r0, r6
 8004484:	4639      	mov	r1, r7
 8004486:	f7fb fea5 	bl	80001d4 <__adddf3>
 800448a:	4606      	mov	r6, r0
 800448c:	460f      	mov	r7, r1
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4640      	mov	r0, r8
 8004494:	4649      	mov	r1, r9
 8004496:	f7fb fe9d 	bl	80001d4 <__adddf3>
 800449a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800449e:	a33c      	add	r3, pc, #240	@ (adr r3, 8004590 <__ieee754_pow+0x760>)
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	4658      	mov	r0, fp
 80044a6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80044aa:	460d      	mov	r5, r1
 80044ac:	f7fc f848 	bl	8000540 <__aeabi_dmul>
 80044b0:	465c      	mov	r4, fp
 80044b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044b6:	4642      	mov	r2, r8
 80044b8:	464b      	mov	r3, r9
 80044ba:	4620      	mov	r0, r4
 80044bc:	4629      	mov	r1, r5
 80044be:	f7fb fe87 	bl	80001d0 <__aeabi_dsub>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4630      	mov	r0, r6
 80044c8:	4639      	mov	r1, r7
 80044ca:	f7fb fe81 	bl	80001d0 <__aeabi_dsub>
 80044ce:	a332      	add	r3, pc, #200	@ (adr r3, 8004598 <__ieee754_pow+0x768>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f7fc f834 	bl	8000540 <__aeabi_dmul>
 80044d8:	a331      	add	r3, pc, #196	@ (adr r3, 80045a0 <__ieee754_pow+0x770>)
 80044da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044de:	4606      	mov	r6, r0
 80044e0:	460f      	mov	r7, r1
 80044e2:	4620      	mov	r0, r4
 80044e4:	4629      	mov	r1, r5
 80044e6:	f7fc f82b 	bl	8000540 <__aeabi_dmul>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4630      	mov	r0, r6
 80044f0:	4639      	mov	r1, r7
 80044f2:	f7fb fe6f 	bl	80001d4 <__adddf3>
 80044f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80044f8:	4b32      	ldr	r3, [pc, #200]	@ (80045c4 <__ieee754_pow+0x794>)
 80044fa:	4413      	add	r3, r2
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f7fb fe68 	bl	80001d4 <__adddf3>
 8004504:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004508:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800450a:	f7fb ffaf 	bl	800046c <__aeabi_i2d>
 800450e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004510:	4b2d      	ldr	r3, [pc, #180]	@ (80045c8 <__ieee754_pow+0x798>)
 8004512:	4413      	add	r3, r2
 8004514:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004518:	4606      	mov	r6, r0
 800451a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800451e:	460f      	mov	r7, r1
 8004520:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004524:	f7fb fe56 	bl	80001d4 <__adddf3>
 8004528:	4642      	mov	r2, r8
 800452a:	464b      	mov	r3, r9
 800452c:	f7fb fe52 	bl	80001d4 <__adddf3>
 8004530:	4632      	mov	r2, r6
 8004532:	463b      	mov	r3, r7
 8004534:	f7fb fe4e 	bl	80001d4 <__adddf3>
 8004538:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800453c:	4632      	mov	r2, r6
 800453e:	463b      	mov	r3, r7
 8004540:	4658      	mov	r0, fp
 8004542:	460d      	mov	r5, r1
 8004544:	f7fb fe44 	bl	80001d0 <__aeabi_dsub>
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	f7fb fe40 	bl	80001d0 <__aeabi_dsub>
 8004550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004554:	f7fb fe3c 	bl	80001d0 <__aeabi_dsub>
 8004558:	465c      	mov	r4, fp
 800455a:	4602      	mov	r2, r0
 800455c:	e036      	b.n	80045cc <__ieee754_pow+0x79c>
 800455e:	bf00      	nop
 8004560:	4a454eef 	.word	0x4a454eef
 8004564:	3fca7e28 	.word	0x3fca7e28
 8004568:	93c9db65 	.word	0x93c9db65
 800456c:	3fcd864a 	.word	0x3fcd864a
 8004570:	a91d4101 	.word	0xa91d4101
 8004574:	3fd17460 	.word	0x3fd17460
 8004578:	518f264d 	.word	0x518f264d
 800457c:	3fd55555 	.word	0x3fd55555
 8004580:	db6fabff 	.word	0xdb6fabff
 8004584:	3fdb6db6 	.word	0x3fdb6db6
 8004588:	33333303 	.word	0x33333303
 800458c:	3fe33333 	.word	0x3fe33333
 8004590:	e0000000 	.word	0xe0000000
 8004594:	3feec709 	.word	0x3feec709
 8004598:	dc3a03fd 	.word	0xdc3a03fd
 800459c:	3feec709 	.word	0x3feec709
 80045a0:	145b01f5 	.word	0x145b01f5
 80045a4:	be3e2fe0 	.word	0xbe3e2fe0
 80045a8:	7ff00000 	.word	0x7ff00000
 80045ac:	43400000 	.word	0x43400000
 80045b0:	0003988e 	.word	0x0003988e
 80045b4:	000bb679 	.word	0x000bb679
 80045b8:	08004c48 	.word	0x08004c48
 80045bc:	3ff00000 	.word	0x3ff00000
 80045c0:	40080000 	.word	0x40080000
 80045c4:	08004c28 	.word	0x08004c28
 80045c8:	08004c38 	.word	0x08004c38
 80045cc:	460b      	mov	r3, r1
 80045ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045d2:	e5d7      	b.n	8004184 <__ieee754_pow+0x354>
 80045d4:	f04f 0a01 	mov.w	sl, #1
 80045d8:	e65e      	b.n	8004298 <__ieee754_pow+0x468>
 80045da:	a3b4      	add	r3, pc, #720	@ (adr r3, 80048ac <__ieee754_pow+0xa7c>)
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	4630      	mov	r0, r6
 80045e2:	4639      	mov	r1, r7
 80045e4:	f7fb fdf6 	bl	80001d4 <__adddf3>
 80045e8:	4642      	mov	r2, r8
 80045ea:	e9cd 0100 	strd	r0, r1, [sp]
 80045ee:	464b      	mov	r3, r9
 80045f0:	4620      	mov	r0, r4
 80045f2:	4629      	mov	r1, r5
 80045f4:	f7fb fdec 	bl	80001d0 <__aeabi_dsub>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004600:	f7fc fa2e 	bl	8000a60 <__aeabi_dcmpgt>
 8004604:	2800      	cmp	r0, #0
 8004606:	f47f ae00 	bne.w	800420a <__ieee754_pow+0x3da>
 800460a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800460e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004612:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8004616:	fa43 fa0a 	asr.w	sl, r3, sl
 800461a:	44da      	add	sl, fp
 800461c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004620:	489d      	ldr	r0, [pc, #628]	@ (8004898 <__ieee754_pow+0xa68>)
 8004622:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8004626:	4108      	asrs	r0, r1
 8004628:	ea00 030a 	and.w	r3, r0, sl
 800462c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004630:	f1c1 0114 	rsb	r1, r1, #20
 8004634:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8004638:	fa4a fa01 	asr.w	sl, sl, r1
 800463c:	f1bb 0f00 	cmp.w	fp, #0
 8004640:	4640      	mov	r0, r8
 8004642:	4649      	mov	r1, r9
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	bfb8      	it	lt
 800464a:	f1ca 0a00 	rsblt	sl, sl, #0
 800464e:	f7fb fdbf 	bl	80001d0 <__aeabi_dsub>
 8004652:	4680      	mov	r8, r0
 8004654:	4689      	mov	r9, r1
 8004656:	4632      	mov	r2, r6
 8004658:	463b      	mov	r3, r7
 800465a:	4640      	mov	r0, r8
 800465c:	4649      	mov	r1, r9
 800465e:	f7fb fdb9 	bl	80001d4 <__adddf3>
 8004662:	2400      	movs	r4, #0
 8004664:	a37c      	add	r3, pc, #496	@ (adr r3, 8004858 <__ieee754_pow+0xa28>)
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	4620      	mov	r0, r4
 800466c:	460d      	mov	r5, r1
 800466e:	f7fb ff67 	bl	8000540 <__aeabi_dmul>
 8004672:	4642      	mov	r2, r8
 8004674:	e9cd 0100 	strd	r0, r1, [sp]
 8004678:	464b      	mov	r3, r9
 800467a:	4620      	mov	r0, r4
 800467c:	4629      	mov	r1, r5
 800467e:	f7fb fda7 	bl	80001d0 <__aeabi_dsub>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4630      	mov	r0, r6
 8004688:	4639      	mov	r1, r7
 800468a:	f7fb fda1 	bl	80001d0 <__aeabi_dsub>
 800468e:	a374      	add	r3, pc, #464	@ (adr r3, 8004860 <__ieee754_pow+0xa30>)
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f7fb ff54 	bl	8000540 <__aeabi_dmul>
 8004698:	a373      	add	r3, pc, #460	@ (adr r3, 8004868 <__ieee754_pow+0xa38>)
 800469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469e:	4680      	mov	r8, r0
 80046a0:	4689      	mov	r9, r1
 80046a2:	4620      	mov	r0, r4
 80046a4:	4629      	mov	r1, r5
 80046a6:	f7fb ff4b 	bl	8000540 <__aeabi_dmul>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4640      	mov	r0, r8
 80046b0:	4649      	mov	r1, r9
 80046b2:	f7fb fd8f 	bl	80001d4 <__adddf3>
 80046b6:	4604      	mov	r4, r0
 80046b8:	460d      	mov	r5, r1
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046c2:	f7fb fd87 	bl	80001d4 <__adddf3>
 80046c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046ca:	4680      	mov	r8, r0
 80046cc:	4689      	mov	r9, r1
 80046ce:	f7fb fd7f 	bl	80001d0 <__aeabi_dsub>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4620      	mov	r0, r4
 80046d8:	4629      	mov	r1, r5
 80046da:	f7fb fd79 	bl	80001d0 <__aeabi_dsub>
 80046de:	4642      	mov	r2, r8
 80046e0:	4606      	mov	r6, r0
 80046e2:	460f      	mov	r7, r1
 80046e4:	464b      	mov	r3, r9
 80046e6:	4640      	mov	r0, r8
 80046e8:	4649      	mov	r1, r9
 80046ea:	f7fb ff29 	bl	8000540 <__aeabi_dmul>
 80046ee:	a360      	add	r3, pc, #384	@ (adr r3, 8004870 <__ieee754_pow+0xa40>)
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	4604      	mov	r4, r0
 80046f6:	460d      	mov	r5, r1
 80046f8:	f7fb ff22 	bl	8000540 <__aeabi_dmul>
 80046fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8004878 <__ieee754_pow+0xa48>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f7fb fd65 	bl	80001d0 <__aeabi_dsub>
 8004706:	4622      	mov	r2, r4
 8004708:	462b      	mov	r3, r5
 800470a:	f7fb ff19 	bl	8000540 <__aeabi_dmul>
 800470e:	a35c      	add	r3, pc, #368	@ (adr r3, 8004880 <__ieee754_pow+0xa50>)
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f7fb fd5e 	bl	80001d4 <__adddf3>
 8004718:	4622      	mov	r2, r4
 800471a:	462b      	mov	r3, r5
 800471c:	f7fb ff10 	bl	8000540 <__aeabi_dmul>
 8004720:	a359      	add	r3, pc, #356	@ (adr r3, 8004888 <__ieee754_pow+0xa58>)
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f7fb fd53 	bl	80001d0 <__aeabi_dsub>
 800472a:	4622      	mov	r2, r4
 800472c:	462b      	mov	r3, r5
 800472e:	f7fb ff07 	bl	8000540 <__aeabi_dmul>
 8004732:	a357      	add	r3, pc, #348	@ (adr r3, 8004890 <__ieee754_pow+0xa60>)
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f7fb fd4c 	bl	80001d4 <__adddf3>
 800473c:	4622      	mov	r2, r4
 800473e:	462b      	mov	r3, r5
 8004740:	f7fb fefe 	bl	8000540 <__aeabi_dmul>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4640      	mov	r0, r8
 800474a:	4649      	mov	r1, r9
 800474c:	f7fb fd40 	bl	80001d0 <__aeabi_dsub>
 8004750:	4604      	mov	r4, r0
 8004752:	460d      	mov	r5, r1
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4640      	mov	r0, r8
 800475a:	4649      	mov	r1, r9
 800475c:	f7fb fef0 	bl	8000540 <__aeabi_dmul>
 8004760:	2200      	movs	r2, #0
 8004762:	e9cd 0100 	strd	r0, r1, [sp]
 8004766:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800476a:	4620      	mov	r0, r4
 800476c:	4629      	mov	r1, r5
 800476e:	f7fb fd2f 	bl	80001d0 <__aeabi_dsub>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	e9dd 0100 	ldrd	r0, r1, [sp]
 800477a:	f7fc f80b 	bl	8000794 <__aeabi_ddiv>
 800477e:	4632      	mov	r2, r6
 8004780:	4604      	mov	r4, r0
 8004782:	460d      	mov	r5, r1
 8004784:	463b      	mov	r3, r7
 8004786:	4640      	mov	r0, r8
 8004788:	4649      	mov	r1, r9
 800478a:	f7fb fed9 	bl	8000540 <__aeabi_dmul>
 800478e:	4632      	mov	r2, r6
 8004790:	463b      	mov	r3, r7
 8004792:	f7fb fd1f 	bl	80001d4 <__adddf3>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4620      	mov	r0, r4
 800479c:	4629      	mov	r1, r5
 800479e:	f7fb fd17 	bl	80001d0 <__aeabi_dsub>
 80047a2:	4642      	mov	r2, r8
 80047a4:	464b      	mov	r3, r9
 80047a6:	f7fb fd13 	bl	80001d0 <__aeabi_dsub>
 80047aa:	460b      	mov	r3, r1
 80047ac:	4602      	mov	r2, r0
 80047ae:	493b      	ldr	r1, [pc, #236]	@ (800489c <__ieee754_pow+0xa6c>)
 80047b0:	2000      	movs	r0, #0
 80047b2:	f7fb fd0d 	bl	80001d0 <__aeabi_dsub>
 80047b6:	ec41 0b10 	vmov	d0, r0, r1
 80047ba:	ee10 3a90 	vmov	r3, s1
 80047be:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80047c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047c6:	da30      	bge.n	800482a <__ieee754_pow+0x9fa>
 80047c8:	4650      	mov	r0, sl
 80047ca:	f000 f87d 	bl	80048c8 <scalbn>
 80047ce:	ec51 0b10 	vmov	r0, r1, d0
 80047d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047d6:	f7ff bbd2 	b.w	8003f7e <__ieee754_pow+0x14e>
 80047da:	4c31      	ldr	r4, [pc, #196]	@ (80048a0 <__ieee754_pow+0xa70>)
 80047dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80047e0:	42a3      	cmp	r3, r4
 80047e2:	d91a      	bls.n	800481a <__ieee754_pow+0x9ea>
 80047e4:	4b2f      	ldr	r3, [pc, #188]	@ (80048a4 <__ieee754_pow+0xa74>)
 80047e6:	440b      	add	r3, r1
 80047e8:	4303      	orrs	r3, r0
 80047ea:	d009      	beq.n	8004800 <__ieee754_pow+0x9d0>
 80047ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047f0:	2200      	movs	r2, #0
 80047f2:	2300      	movs	r3, #0
 80047f4:	f7fc f916 	bl	8000a24 <__aeabi_dcmplt>
 80047f8:	3800      	subs	r0, #0
 80047fa:	bf18      	it	ne
 80047fc:	2001      	movne	r0, #1
 80047fe:	e42b      	b.n	8004058 <__ieee754_pow+0x228>
 8004800:	4642      	mov	r2, r8
 8004802:	464b      	mov	r3, r9
 8004804:	f7fb fce4 	bl	80001d0 <__aeabi_dsub>
 8004808:	4632      	mov	r2, r6
 800480a:	463b      	mov	r3, r7
 800480c:	f7fc f91e 	bl	8000a4c <__aeabi_dcmpge>
 8004810:	2800      	cmp	r0, #0
 8004812:	d1eb      	bne.n	80047ec <__ieee754_pow+0x9bc>
 8004814:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80048b4 <__ieee754_pow+0xa84>
 8004818:	e6f7      	b.n	800460a <__ieee754_pow+0x7da>
 800481a:	469a      	mov	sl, r3
 800481c:	4b22      	ldr	r3, [pc, #136]	@ (80048a8 <__ieee754_pow+0xa78>)
 800481e:	459a      	cmp	sl, r3
 8004820:	f63f aef3 	bhi.w	800460a <__ieee754_pow+0x7da>
 8004824:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004828:	e715      	b.n	8004656 <__ieee754_pow+0x826>
 800482a:	ec51 0b10 	vmov	r0, r1, d0
 800482e:	4619      	mov	r1, r3
 8004830:	e7cf      	b.n	80047d2 <__ieee754_pow+0x9a2>
 8004832:	491a      	ldr	r1, [pc, #104]	@ (800489c <__ieee754_pow+0xa6c>)
 8004834:	2000      	movs	r0, #0
 8004836:	f7ff bb18 	b.w	8003e6a <__ieee754_pow+0x3a>
 800483a:	2000      	movs	r0, #0
 800483c:	2100      	movs	r1, #0
 800483e:	f7ff bb14 	b.w	8003e6a <__ieee754_pow+0x3a>
 8004842:	4630      	mov	r0, r6
 8004844:	4639      	mov	r1, r7
 8004846:	f7ff bb10 	b.w	8003e6a <__ieee754_pow+0x3a>
 800484a:	460c      	mov	r4, r1
 800484c:	f7ff bb5e 	b.w	8003f0c <__ieee754_pow+0xdc>
 8004850:	2400      	movs	r4, #0
 8004852:	f7ff bb49 	b.w	8003ee8 <__ieee754_pow+0xb8>
 8004856:	bf00      	nop
 8004858:	00000000 	.word	0x00000000
 800485c:	3fe62e43 	.word	0x3fe62e43
 8004860:	fefa39ef 	.word	0xfefa39ef
 8004864:	3fe62e42 	.word	0x3fe62e42
 8004868:	0ca86c39 	.word	0x0ca86c39
 800486c:	be205c61 	.word	0xbe205c61
 8004870:	72bea4d0 	.word	0x72bea4d0
 8004874:	3e663769 	.word	0x3e663769
 8004878:	c5d26bf1 	.word	0xc5d26bf1
 800487c:	3ebbbd41 	.word	0x3ebbbd41
 8004880:	af25de2c 	.word	0xaf25de2c
 8004884:	3f11566a 	.word	0x3f11566a
 8004888:	16bebd93 	.word	0x16bebd93
 800488c:	3f66c16c 	.word	0x3f66c16c
 8004890:	5555553e 	.word	0x5555553e
 8004894:	3fc55555 	.word	0x3fc55555
 8004898:	fff00000 	.word	0xfff00000
 800489c:	3ff00000 	.word	0x3ff00000
 80048a0:	4090cbff 	.word	0x4090cbff
 80048a4:	3f6f3400 	.word	0x3f6f3400
 80048a8:	3fe00000 	.word	0x3fe00000
 80048ac:	652b82fe 	.word	0x652b82fe
 80048b0:	3c971547 	.word	0x3c971547
 80048b4:	4090cc00 	.word	0x4090cc00

080048b8 <fabs>:
 80048b8:	ec51 0b10 	vmov	r0, r1, d0
 80048bc:	4602      	mov	r2, r0
 80048be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80048c2:	ec43 2b10 	vmov	d0, r2, r3
 80048c6:	4770      	bx	lr

080048c8 <scalbn>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	ec55 4b10 	vmov	r4, r5, d0
 80048ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80048d2:	4606      	mov	r6, r0
 80048d4:	462b      	mov	r3, r5
 80048d6:	b991      	cbnz	r1, 80048fe <scalbn+0x36>
 80048d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80048dc:	4323      	orrs	r3, r4
 80048de:	d03d      	beq.n	800495c <scalbn+0x94>
 80048e0:	4b35      	ldr	r3, [pc, #212]	@ (80049b8 <scalbn+0xf0>)
 80048e2:	4620      	mov	r0, r4
 80048e4:	4629      	mov	r1, r5
 80048e6:	2200      	movs	r2, #0
 80048e8:	f7fb fe2a 	bl	8000540 <__aeabi_dmul>
 80048ec:	4b33      	ldr	r3, [pc, #204]	@ (80049bc <scalbn+0xf4>)
 80048ee:	429e      	cmp	r6, r3
 80048f0:	4604      	mov	r4, r0
 80048f2:	460d      	mov	r5, r1
 80048f4:	da0f      	bge.n	8004916 <scalbn+0x4e>
 80048f6:	a328      	add	r3, pc, #160	@ (adr r3, 8004998 <scalbn+0xd0>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	e01e      	b.n	800493c <scalbn+0x74>
 80048fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004902:	4291      	cmp	r1, r2
 8004904:	d10b      	bne.n	800491e <scalbn+0x56>
 8004906:	4622      	mov	r2, r4
 8004908:	4620      	mov	r0, r4
 800490a:	4629      	mov	r1, r5
 800490c:	f7fb fc62 	bl	80001d4 <__adddf3>
 8004910:	4604      	mov	r4, r0
 8004912:	460d      	mov	r5, r1
 8004914:	e022      	b.n	800495c <scalbn+0x94>
 8004916:	460b      	mov	r3, r1
 8004918:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800491c:	3936      	subs	r1, #54	@ 0x36
 800491e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004922:	4296      	cmp	r6, r2
 8004924:	dd0d      	ble.n	8004942 <scalbn+0x7a>
 8004926:	2d00      	cmp	r5, #0
 8004928:	a11d      	add	r1, pc, #116	@ (adr r1, 80049a0 <scalbn+0xd8>)
 800492a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800492e:	da02      	bge.n	8004936 <scalbn+0x6e>
 8004930:	a11d      	add	r1, pc, #116	@ (adr r1, 80049a8 <scalbn+0xe0>)
 8004932:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004936:	a31a      	add	r3, pc, #104	@ (adr r3, 80049a0 <scalbn+0xd8>)
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	f7fb fe00 	bl	8000540 <__aeabi_dmul>
 8004940:	e7e6      	b.n	8004910 <scalbn+0x48>
 8004942:	1872      	adds	r2, r6, r1
 8004944:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004948:	428a      	cmp	r2, r1
 800494a:	dcec      	bgt.n	8004926 <scalbn+0x5e>
 800494c:	2a00      	cmp	r2, #0
 800494e:	dd08      	ble.n	8004962 <scalbn+0x9a>
 8004950:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004954:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004958:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800495c:	ec45 4b10 	vmov	d0, r4, r5
 8004960:	bd70      	pop	{r4, r5, r6, pc}
 8004962:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004966:	da08      	bge.n	800497a <scalbn+0xb2>
 8004968:	2d00      	cmp	r5, #0
 800496a:	a10b      	add	r1, pc, #44	@ (adr r1, 8004998 <scalbn+0xd0>)
 800496c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004970:	dac1      	bge.n	80048f6 <scalbn+0x2e>
 8004972:	a10f      	add	r1, pc, #60	@ (adr r1, 80049b0 <scalbn+0xe8>)
 8004974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004978:	e7bd      	b.n	80048f6 <scalbn+0x2e>
 800497a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800497e:	3236      	adds	r2, #54	@ 0x36
 8004980:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004984:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004988:	4620      	mov	r0, r4
 800498a:	4b0d      	ldr	r3, [pc, #52]	@ (80049c0 <scalbn+0xf8>)
 800498c:	4629      	mov	r1, r5
 800498e:	2200      	movs	r2, #0
 8004990:	e7d4      	b.n	800493c <scalbn+0x74>
 8004992:	bf00      	nop
 8004994:	f3af 8000 	nop.w
 8004998:	c2f8f359 	.word	0xc2f8f359
 800499c:	01a56e1f 	.word	0x01a56e1f
 80049a0:	8800759c 	.word	0x8800759c
 80049a4:	7e37e43c 	.word	0x7e37e43c
 80049a8:	8800759c 	.word	0x8800759c
 80049ac:	fe37e43c 	.word	0xfe37e43c
 80049b0:	c2f8f359 	.word	0xc2f8f359
 80049b4:	81a56e1f 	.word	0x81a56e1f
 80049b8:	43500000 	.word	0x43500000
 80049bc:	ffff3cb0 	.word	0xffff3cb0
 80049c0:	3c900000 	.word	0x3c900000

080049c4 <with_errno>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	ed2d 8b02 	vpush	{d8}
 80049ca:	eeb0 8a40 	vmov.f32	s16, s0
 80049ce:	eef0 8a60 	vmov.f32	s17, s1
 80049d2:	4604      	mov	r4, r0
 80049d4:	f7ff f986 	bl	8003ce4 <__errno>
 80049d8:	eeb0 0a48 	vmov.f32	s0, s16
 80049dc:	eef0 0a68 	vmov.f32	s1, s17
 80049e0:	ecbd 8b02 	vpop	{d8}
 80049e4:	6004      	str	r4, [r0, #0]
 80049e6:	bd10      	pop	{r4, pc}

080049e8 <xflow>:
 80049e8:	4603      	mov	r3, r0
 80049ea:	b507      	push	{r0, r1, r2, lr}
 80049ec:	ec51 0b10 	vmov	r0, r1, d0
 80049f0:	b183      	cbz	r3, 8004a14 <xflow+0x2c>
 80049f2:	4602      	mov	r2, r0
 80049f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80049f8:	e9cd 2300 	strd	r2, r3, [sp]
 80049fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a00:	f7fb fd9e 	bl	8000540 <__aeabi_dmul>
 8004a04:	ec41 0b10 	vmov	d0, r0, r1
 8004a08:	2022      	movs	r0, #34	@ 0x22
 8004a0a:	b003      	add	sp, #12
 8004a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a10:	f7ff bfd8 	b.w	80049c4 <with_errno>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	e7ee      	b.n	80049f8 <xflow+0x10>
 8004a1a:	0000      	movs	r0, r0
 8004a1c:	0000      	movs	r0, r0
	...

08004a20 <__math_uflow>:
 8004a20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004a28 <__math_uflow+0x8>
 8004a24:	f7ff bfe0 	b.w	80049e8 <xflow>
 8004a28:	00000000 	.word	0x00000000
 8004a2c:	10000000 	.word	0x10000000

08004a30 <__math_oflow>:
 8004a30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004a38 <__math_oflow+0x8>
 8004a34:	f7ff bfd8 	b.w	80049e8 <xflow>
 8004a38:	00000000 	.word	0x00000000
 8004a3c:	70000000 	.word	0x70000000

08004a40 <__ieee754_sqrt>:
 8004a40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	4a68      	ldr	r2, [pc, #416]	@ (8004be8 <__ieee754_sqrt+0x1a8>)
 8004a46:	ec55 4b10 	vmov	r4, r5, d0
 8004a4a:	43aa      	bics	r2, r5
 8004a4c:	462b      	mov	r3, r5
 8004a4e:	4621      	mov	r1, r4
 8004a50:	d110      	bne.n	8004a74 <__ieee754_sqrt+0x34>
 8004a52:	4622      	mov	r2, r4
 8004a54:	4620      	mov	r0, r4
 8004a56:	4629      	mov	r1, r5
 8004a58:	f7fb fd72 	bl	8000540 <__aeabi_dmul>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4620      	mov	r0, r4
 8004a62:	4629      	mov	r1, r5
 8004a64:	f7fb fbb6 	bl	80001d4 <__adddf3>
 8004a68:	4604      	mov	r4, r0
 8004a6a:	460d      	mov	r5, r1
 8004a6c:	ec45 4b10 	vmov	d0, r4, r5
 8004a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a74:	2d00      	cmp	r5, #0
 8004a76:	dc0e      	bgt.n	8004a96 <__ieee754_sqrt+0x56>
 8004a78:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004a7c:	4322      	orrs	r2, r4
 8004a7e:	d0f5      	beq.n	8004a6c <__ieee754_sqrt+0x2c>
 8004a80:	b19d      	cbz	r5, 8004aaa <__ieee754_sqrt+0x6a>
 8004a82:	4622      	mov	r2, r4
 8004a84:	4620      	mov	r0, r4
 8004a86:	4629      	mov	r1, r5
 8004a88:	f7fb fba2 	bl	80001d0 <__aeabi_dsub>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	f7fb fe80 	bl	8000794 <__aeabi_ddiv>
 8004a94:	e7e8      	b.n	8004a68 <__ieee754_sqrt+0x28>
 8004a96:	152a      	asrs	r2, r5, #20
 8004a98:	d115      	bne.n	8004ac6 <__ieee754_sqrt+0x86>
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	e009      	b.n	8004ab2 <__ieee754_sqrt+0x72>
 8004a9e:	0acb      	lsrs	r3, r1, #11
 8004aa0:	3a15      	subs	r2, #21
 8004aa2:	0549      	lsls	r1, r1, #21
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0fa      	beq.n	8004a9e <__ieee754_sqrt+0x5e>
 8004aa8:	e7f7      	b.n	8004a9a <__ieee754_sqrt+0x5a>
 8004aaa:	462a      	mov	r2, r5
 8004aac:	e7fa      	b.n	8004aa4 <__ieee754_sqrt+0x64>
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	02dc      	lsls	r4, r3, #11
 8004ab4:	d5fb      	bpl.n	8004aae <__ieee754_sqrt+0x6e>
 8004ab6:	1e44      	subs	r4, r0, #1
 8004ab8:	1b12      	subs	r2, r2, r4
 8004aba:	f1c0 0420 	rsb	r4, r0, #32
 8004abe:	fa21 f404 	lsr.w	r4, r1, r4
 8004ac2:	4323      	orrs	r3, r4
 8004ac4:	4081      	lsls	r1, r0
 8004ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8004ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ad2:	07d2      	lsls	r2, r2, #31
 8004ad4:	bf5c      	itt	pl
 8004ad6:	005b      	lslpl	r3, r3, #1
 8004ad8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8004adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004ae0:	bf58      	it	pl
 8004ae2:	0049      	lslpl	r1, r1, #1
 8004ae4:	2600      	movs	r6, #0
 8004ae6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004aea:	106d      	asrs	r5, r5, #1
 8004aec:	0049      	lsls	r1, r1, #1
 8004aee:	2016      	movs	r0, #22
 8004af0:	4632      	mov	r2, r6
 8004af2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004af6:	1917      	adds	r7, r2, r4
 8004af8:	429f      	cmp	r7, r3
 8004afa:	bfde      	ittt	le
 8004afc:	193a      	addle	r2, r7, r4
 8004afe:	1bdb      	suble	r3, r3, r7
 8004b00:	1936      	addle	r6, r6, r4
 8004b02:	0fcf      	lsrs	r7, r1, #31
 8004b04:	3801      	subs	r0, #1
 8004b06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004b0a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004b0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004b12:	d1f0      	bne.n	8004af6 <__ieee754_sqrt+0xb6>
 8004b14:	4604      	mov	r4, r0
 8004b16:	2720      	movs	r7, #32
 8004b18:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	eb00 0e0c 	add.w	lr, r0, ip
 8004b22:	db02      	blt.n	8004b2a <__ieee754_sqrt+0xea>
 8004b24:	d113      	bne.n	8004b4e <__ieee754_sqrt+0x10e>
 8004b26:	458e      	cmp	lr, r1
 8004b28:	d811      	bhi.n	8004b4e <__ieee754_sqrt+0x10e>
 8004b2a:	f1be 0f00 	cmp.w	lr, #0
 8004b2e:	eb0e 000c 	add.w	r0, lr, ip
 8004b32:	da42      	bge.n	8004bba <__ieee754_sqrt+0x17a>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	db40      	blt.n	8004bba <__ieee754_sqrt+0x17a>
 8004b38:	f102 0801 	add.w	r8, r2, #1
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	458e      	cmp	lr, r1
 8004b40:	bf88      	it	hi
 8004b42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004b46:	eba1 010e 	sub.w	r1, r1, lr
 8004b4a:	4464      	add	r4, ip
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8004b52:	3f01      	subs	r7, #1
 8004b54:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004b58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004b5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004b60:	d1dc      	bne.n	8004b1c <__ieee754_sqrt+0xdc>
 8004b62:	4319      	orrs	r1, r3
 8004b64:	d01b      	beq.n	8004b9e <__ieee754_sqrt+0x15e>
 8004b66:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004bec <__ieee754_sqrt+0x1ac>
 8004b6a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004bf0 <__ieee754_sqrt+0x1b0>
 8004b6e:	e9da 0100 	ldrd	r0, r1, [sl]
 8004b72:	e9db 2300 	ldrd	r2, r3, [fp]
 8004b76:	f7fb fb2b 	bl	80001d0 <__aeabi_dsub>
 8004b7a:	e9da 8900 	ldrd	r8, r9, [sl]
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4640      	mov	r0, r8
 8004b84:	4649      	mov	r1, r9
 8004b86:	f7fb ff57 	bl	8000a38 <__aeabi_dcmple>
 8004b8a:	b140      	cbz	r0, 8004b9e <__ieee754_sqrt+0x15e>
 8004b8c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004b90:	e9da 0100 	ldrd	r0, r1, [sl]
 8004b94:	e9db 2300 	ldrd	r2, r3, [fp]
 8004b98:	d111      	bne.n	8004bbe <__ieee754_sqrt+0x17e>
 8004b9a:	3601      	adds	r6, #1
 8004b9c:	463c      	mov	r4, r7
 8004b9e:	1072      	asrs	r2, r6, #1
 8004ba0:	0863      	lsrs	r3, r4, #1
 8004ba2:	07f1      	lsls	r1, r6, #31
 8004ba4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004ba8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004bac:	bf48      	it	mi
 8004bae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004bb2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	e756      	b.n	8004a68 <__ieee754_sqrt+0x28>
 8004bba:	4690      	mov	r8, r2
 8004bbc:	e7be      	b.n	8004b3c <__ieee754_sqrt+0xfc>
 8004bbe:	f7fb fb09 	bl	80001d4 <__adddf3>
 8004bc2:	e9da 8900 	ldrd	r8, r9, [sl]
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	460b      	mov	r3, r1
 8004bca:	4640      	mov	r0, r8
 8004bcc:	4649      	mov	r1, r9
 8004bce:	f7fb ff29 	bl	8000a24 <__aeabi_dcmplt>
 8004bd2:	b120      	cbz	r0, 8004bde <__ieee754_sqrt+0x19e>
 8004bd4:	1ca0      	adds	r0, r4, #2
 8004bd6:	bf08      	it	eq
 8004bd8:	3601      	addeq	r6, #1
 8004bda:	3402      	adds	r4, #2
 8004bdc:	e7df      	b.n	8004b9e <__ieee754_sqrt+0x15e>
 8004bde:	1c63      	adds	r3, r4, #1
 8004be0:	f023 0401 	bic.w	r4, r3, #1
 8004be4:	e7db      	b.n	8004b9e <__ieee754_sqrt+0x15e>
 8004be6:	bf00      	nop
 8004be8:	7ff00000 	.word	0x7ff00000
 8004bec:	20000068 	.word	0x20000068
 8004bf0:	20000060 	.word	0x20000060

08004bf4 <_init>:
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	bf00      	nop
 8004bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfa:	bc08      	pop	{r3}
 8004bfc:	469e      	mov	lr, r3
 8004bfe:	4770      	bx	lr

08004c00 <_fini>:
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	bf00      	nop
 8004c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c06:	bc08      	pop	{r3}
 8004c08:	469e      	mov	lr, r3
 8004c0a:	4770      	bx	lr
