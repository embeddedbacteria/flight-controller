
mpu6500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004c98  08004c98  00005c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d98  08004d98  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d98  08004d98  00005d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004da0  08004da0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da0  08004da0  00005da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004da4  08004da4  00005da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004da8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          000001d4  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000023c  2000023c  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007b52  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017bb  00000000  00000000  0000dbea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0000f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000612  00000000  00000000  0000fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021462  00000000  00000000  000101c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa97  00000000  00000000  00031624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c516b  00000000  00000000  0003c0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00101226  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029ec  00000000  00000000  0010126c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00103c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c80 	.word	0x08004c80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004c80 	.word	0x08004c80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96a 	b.w	8000ea8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14e      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	458c      	cmp	ip, r1
 8000bfc:	4686      	mov	lr, r0
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	d962      	bls.n	8000cca <__udivmoddi4+0xde>
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	4319      	orrs	r1, r3
 8000c16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f f68c 	uxth.w	r6, ip
 8000c22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb04 f106 	mul.w	r1, r4, r6
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c42:	f080 8112 	bcs.w	8000e6a <__udivmoddi4+0x27e>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 810f 	bls.w	8000e6a <__udivmoddi4+0x27e>
 8000c4c:	3c02      	subs	r4, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f606 	mul.w	r6, r0, r6
 8000c66:	429e      	cmp	r6, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x94>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c72:	f080 80fc 	bcs.w	8000e6e <__udivmoddi4+0x282>
 8000c76:	429e      	cmp	r6, r3
 8000c78:	f240 80f9 	bls.w	8000e6e <__udivmoddi4+0x282>
 8000c7c:	4463      	add	r3, ip
 8000c7e:	3802      	subs	r0, #2
 8000c80:	1b9b      	subs	r3, r3, r6
 8000c82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c86:	2100      	movs	r1, #0
 8000c88:	b11d      	cbz	r5, 8000c92 <__udivmoddi4+0xa6>
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d905      	bls.n	8000ca6 <__udivmoddi4+0xba>
 8000c9a:	b10d      	cbz	r5, 8000ca0 <__udivmoddi4+0xb4>
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e7f5      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d146      	bne.n	8000d3c <__udivmoddi4+0x150>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xcc>
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f0c0 80f0 	bcc.w	8000e98 <__udivmoddi4+0x2ac>
 8000cb8:	1a86      	subs	r6, r0, r2
 8000cba:	eb64 0303 	sbc.w	r3, r4, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d0e6      	beq.n	8000c92 <__udivmoddi4+0xa6>
 8000cc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc8:	e7e3      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f040 8090 	bne.w	8000df0 <__udivmoddi4+0x204>
 8000cd0:	eba1 040c 	sub.w	r4, r1, ip
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa1f f78c 	uxth.w	r7, ip
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb07 f006 	mul.w	r0, r7, r6
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x11c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x11a>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d06:	4626      	mov	r6, r4
 8000d08:	1a1c      	subs	r4, r3, r0
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d12:	fb08 4410 	mls	r4, r8, r0, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb00 f707 	mul.w	r7, r0, r7
 8000d1e:	429f      	cmp	r7, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x148>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x146>
 8000d2c:	429f      	cmp	r7, r3
 8000d2e:	f200 80b0 	bhi.w	8000e92 <__udivmoddi4+0x2a6>
 8000d32:	4620      	mov	r0, r4
 8000d34:	1bdb      	subs	r3, r3, r7
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0x9c>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 f706 	lsr.w	r7, r2, r6
 8000d46:	431f      	orrs	r7, r3
 8000d48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d50:	ea43 030c 	orr.w	r3, r3, ip
 8000d54:	40f4      	lsrs	r4, r6
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d60:	fbb4 fef0 	udiv	lr, r4, r0
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fb00 441e 	mls	r4, r0, lr, r4
 8000d6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d70:	fb0e f90c 	mul.w	r9, lr, ip
 8000d74:	45a1      	cmp	r9, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	d90a      	bls.n	8000d92 <__udivmoddi4+0x1a6>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d82:	f080 8084 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000d86:	45a1      	cmp	r9, r4
 8000d88:	f240 8081 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000d8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000da2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1d2>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db4:	d267      	bcs.n	8000e86 <__udivmoddi4+0x29a>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d965      	bls.n	8000e86 <__udivmoddi4+0x29a>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc6:	eba4 040c 	sub.w	r4, r4, ip
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	46ce      	mov	lr, r9
 8000dce:	469c      	mov	ip, r3
 8000dd0:	d351      	bcc.n	8000e76 <__udivmoddi4+0x28a>
 8000dd2:	d04e      	beq.n	8000e72 <__udivmoddi4+0x286>
 8000dd4:	b155      	cbz	r5, 8000dec <__udivmoddi4+0x200>
 8000dd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dda:	eb64 040c 	sbc.w	r4, r4, ip
 8000dde:	fa04 f606 	lsl.w	r6, r4, r6
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431e      	orrs	r6, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e750      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000e00:	4094      	lsls	r4, r2
 8000e02:	430c      	orrs	r4, r1
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0c:	fa1f f78c 	uxth.w	r7, ip
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3110 	mls	r1, r8, r0, r3
 8000e18:	0c23      	lsrs	r3, r4, #16
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb00 f107 	mul.w	r1, r0, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x24c>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2e:	d22c      	bcs.n	8000e8a <__udivmoddi4+0x29e>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d92a      	bls.n	8000e8a <__udivmoddi4+0x29e>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e40:	fb08 3311 	mls	r3, r8, r1, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb01 f307 	mul.w	r3, r1, r7
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x276>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e58:	d213      	bcs.n	8000e82 <__udivmoddi4+0x296>
 8000e5a:	42a3      	cmp	r3, r4
 8000e5c:	d911      	bls.n	8000e82 <__udivmoddi4+0x296>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	1ae4      	subs	r4, r4, r3
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e739      	b.n	8000cde <__udivmoddi4+0xf2>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e6f0      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e706      	b.n	8000c80 <__udivmoddi4+0x94>
 8000e72:	45c8      	cmp	r8, r9
 8000e74:	d2ae      	bcs.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7e:	3801      	subs	r0, #1
 8000e80:	e7a8      	b.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e82:	4631      	mov	r1, r6
 8000e84:	e7ed      	b.n	8000e62 <__udivmoddi4+0x276>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e799      	b.n	8000dbe <__udivmoddi4+0x1d2>
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	e7d4      	b.n	8000e38 <__udivmoddi4+0x24c>
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	e77f      	b.n	8000d92 <__udivmoddi4+0x1a6>
 8000e92:	4463      	add	r3, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e74d      	b.n	8000d34 <__udivmoddi4+0x148>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e70f      	b.n	8000cc0 <__udivmoddi4+0xd4>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	e730      	b.n	8000d08 <__udivmoddi4+0x11c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <kalman_filter_init>:


#include "kalman_filter.h"


void kalman_filter_init(KalmanFilter* kf) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

    kf->q_angle = 0.001f;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef4 <kalman_filter_init+0x48>)
 8000eb8:	601a      	str	r2, [r3, #0]
    kf->r_measure = 0.03f;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef8 <kalman_filter_init+0x4c>)
 8000ebe:	605a      	str	r2, [r3, #4]
    kf->angle = 0.0f;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
    kf->p[0][0] = 0.0f;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
    kf->p[0][1] = 0.0f;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
    kf->p[1][0] = 0.0f;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
    kf->p[1][1] = 0.0f;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	3a83126f 	.word	0x3a83126f
 8000ef8:	3cf5c28f 	.word	0x3cf5c28f

08000efc <kalman_filter_get_angle>:

float kalman_filter_get_angle(KalmanFilter* kf, float new_angle, float dt) {
 8000efc:	b480      	push	{r7}
 8000efe:	b08b      	sub	sp, #44	@ 0x2c
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f08:	edc7 0a01 	vstr	s1, [r7, #4]
    // Step 1: Predict
    kf->angle += 0.0f; // No gyroscope rate, angle remains the same
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f12:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80010ac <kalman_filter_get_angle+0x1b0>
 8000f16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	edc3 7a02 	vstr	s15, [r3, #8]

    kf->p[0][0] += dt * (dt * kf->p[1][1] - kf->p[0][1] - kf->p[1][0] + kf->q_angle);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	edd3 6a06 	vldr	s13, [r3, #24]
 8000f2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f44:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	edd3 7a00 	vldr	s15, [r3]
 8000f4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->p[0][1] -= dt * kf->p[1][1];
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	edd3 6a06 	vldr	s13, [r3, #24]
 8000f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->p[1][0] -= dt * kf->p[1][1];
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	edd3 6a06 	vldr	s13, [r3, #24]
 8000f8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->p[1][1] += 0.0f; // No process noise for bias
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fa6:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80010ac <kalman_filter_get_angle+0x1b0>
 8000faa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	edc3 7a06 	vstr	s15, [r3, #24]

    // Step 2: Update
    float s = kf->p[0][0] + kf->r_measure;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float k[2];
    k[0] = kf->p[0][0] / s;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	edd3 6a03 	vldr	s13, [r3, #12]
 8000fce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd6:	edc7 7a04 	vstr	s15, [r7, #16]
    k[1] = kf->p[1][0] / s;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fe0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fe8:	edc7 7a05 	vstr	s15, [r7, #20]

    float y = new_angle - kf->angle;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ff2:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffa:	edc7 7a08 	vstr	s15, [r7, #32]
    kf->angle += k[0] * y;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	ed93 7a02 	vldr	s14, [r3, #8]
 8001004:	edd7 6a04 	vldr	s13, [r7, #16]
 8001008:	edd7 7a08 	vldr	s15, [r7, #32]
 800100c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	edc3 7a02 	vstr	s15, [r3, #8]

    float p00_temp = kf->p[0][0];
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	61fb      	str	r3, [r7, #28]
    float p01_temp = kf->p[0][1];
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	61bb      	str	r3, [r7, #24]

    kf->p[0][0] -= k[0] * p00_temp;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	ed93 7a03 	vldr	s14, [r3, #12]
 800102c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001030:	edd7 7a07 	vldr	s15, [r7, #28]
 8001034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->p[0][1] -= k[0] * p01_temp;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	ed93 7a04 	vldr	s14, [r3, #16]
 8001048:	edd7 6a04 	vldr	s13, [r7, #16]
 800104c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->p[1][0] -= k[1] * p00_temp;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	ed93 7a05 	vldr	s14, [r3, #20]
 8001064:	edd7 6a05 	vldr	s13, [r7, #20]
 8001068:	edd7 7a07 	vldr	s15, [r7, #28]
 800106c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->p[1][1] -= k[1] * p01_temp;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001080:	edd7 6a05 	vldr	s13, [r7, #20]
 8001084:	edd7 7a06 	vldr	s15, [r7, #24]
 8001088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	edc3 7a06 	vstr	s15, [r3, #24]

    return kf->angle;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	ee07 3a90 	vmov	s15, r3
}
 800109e:	eeb0 0a67 	vmov.f32	s0, s15
 80010a2:	372c      	adds	r7, #44	@ 0x2c
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	00000000 	.word	0x00000000

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b08c      	sub	sp, #48	@ 0x30
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	float dt = 0;
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010bc:	f000 fc6a 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c0:	f000 f8ac 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c4:	f000 f942 	bl	800134c <MX_GPIO_Init>
  MX_I2C1_Init();
 80010c8:	f000 f912 	bl	80012f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  KalmanFilter kf;
  kalman_filter_init(&kf);
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff feeb 	bl	8000eac <kalman_filter_init>
  if(mpu6500_init(&hi2c1, MPU6500_I2C_ADDR)!=MPU6500_OK)
  {
	  Error_Handler();
  }
*/
  while(mpu6500_init(&hi2c1, MPU6500_I2C_ADDR));
 80010d6:	bf00      	nop
 80010d8:	2168      	movs	r1, #104	@ 0x68
 80010da:	4849      	ldr	r0, [pc, #292]	@ (8001200 <main+0x150>)
 80010dc:	f000 fa14 	bl	8001508 <mpu6500_init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f8      	bne.n	80010d8 <main+0x28>
   uint32_t previous_tick = HAL_GetTick();
 80010e6:	f000 fcbb 	bl	8001a60 <HAL_GetTick>
 80010ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  uint32_t current_tick = HAL_GetTick();
 80010ec:	f000 fcb8 	bl	8001a60 <HAL_GetTick>
 80010f0:	6278      	str	r0, [r7, #36]	@ 0x24
	  dt = (current_tick -previous_tick) /1000.0f;
 80010f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001100:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8001204 <main+0x154>
 8001104:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001108:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	  previous_tick = current_tick;
 800110c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  {
		  Error_Handler();
	  }
*/

	  mpu6500_read_accelerometer_data(&hi2c1, MPU6500_I2C_ADDR, &g_accel_data);
 8001110:	4a3d      	ldr	r2, [pc, #244]	@ (8001208 <main+0x158>)
 8001112:	2168      	movs	r1, #104	@ 0x68
 8001114:	483a      	ldr	r0, [pc, #232]	@ (8001200 <main+0x150>)
 8001116:	f000 fa51 	bl	80015bc <mpu6500_read_accelerometer_data>

	  g_accel_data = mpu6500_accelerometer_calibration(&error_offset, &g_accel_data);
 800111a:	4c3b      	ldr	r4, [pc, #236]	@ (8001208 <main+0x158>)
 800111c:	463b      	mov	r3, r7
 800111e:	4a3a      	ldr	r2, [pc, #232]	@ (8001208 <main+0x158>)
 8001120:	493a      	ldr	r1, [pc, #232]	@ (800120c <main+0x15c>)
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fa7f 	bl	8001626 <mpu6500_accelerometer_calibration>
 8001128:	4622      	mov	r2, r4
 800112a:	463b      	mov	r3, r7
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	6010      	str	r0, [r2, #0]
 8001130:	889b      	ldrh	r3, [r3, #4]
 8001132:	8093      	strh	r3, [r2, #4]

	  roll_angle= atan2(g_accel_data.y,g_accel_data.z) *(180.0/M_PI);
 8001134:	4b34      	ldr	r3, [pc, #208]	@ (8001208 <main+0x158>)
 8001136:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f9ea 	bl	8000514 <__aeabi_i2d>
 8001140:	4604      	mov	r4, r0
 8001142:	460d      	mov	r5, r1
 8001144:	4b30      	ldr	r3, [pc, #192]	@ (8001208 <main+0x158>)
 8001146:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9e2 	bl	8000514 <__aeabi_i2d>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	ec43 2b11 	vmov	d1, r2, r3
 8001158:	ec45 4b10 	vmov	d0, r4, r5
 800115c:	f003 fb24 	bl	80047a8 <atan2>
 8001160:	ec51 0b10 	vmov	r0, r1, d0
 8001164:	a324      	add	r3, pc, #144	@ (adr r3, 80011f8 <main+0x148>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fa3d 	bl	80005e8 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fcd1 	bl	8000b1c <__aeabi_d2f>
 800117a:	4603      	mov	r3, r0
 800117c:	4a24      	ldr	r2, [pc, #144]	@ (8001210 <main+0x160>)
 800117e:	6013      	str	r3, [r2, #0]

	  kalman_roll_angle = kalman_filter_get_angle(&kf, roll_angle, dt);
 8001180:	4b23      	ldr	r3, [pc, #140]	@ (8001210 <main+0x160>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff feb2 	bl	8000efc <kalman_filter_get_angle>
 8001198:	eef0 7a40 	vmov.f32	s15, s0
 800119c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a0:	ee17 3a90 	vmov	r3, s15
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <main+0x164>)
 80011a8:	801a      	strh	r2, [r3, #0]
	  if(roll_angle<0)
 80011aa:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <main+0x160>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b8:	d50c      	bpl.n	80011d4 <main+0x124>
	  {
		  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c0:	4815      	ldr	r0, [pc, #84]	@ (8001218 <main+0x168>)
 80011c2:	f000 feff 	bl	8001fc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011cc:	4812      	ldr	r0, [pc, #72]	@ (8001218 <main+0x168>)
 80011ce:	f000 fef9 	bl	8001fc4 <HAL_GPIO_WritePin>
 80011d2:	e00b      	b.n	80011ec <main+0x13c>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011da:	480f      	ldr	r0, [pc, #60]	@ (8001218 <main+0x168>)
 80011dc:	f000 fef2 	bl	8001fc4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011e6:	480c      	ldr	r0, [pc, #48]	@ (8001218 <main+0x168>)
 80011e8:	f000 feec 	bl	8001fc4 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(250);
 80011ec:	20fa      	movs	r0, #250	@ 0xfa
 80011ee:	f000 fc43 	bl	8001a78 <HAL_Delay>
  {
 80011f2:	e77b      	b.n	80010ec <main+0x3c>
 80011f4:	f3af 8000 	nop.w
 80011f8:	1a63c1f8 	.word	0x1a63c1f8
 80011fc:	404ca5dc 	.word	0x404ca5dc
 8001200:	20000084 	.word	0x20000084
 8001204:	447a0000 	.word	0x447a0000
 8001208:	200000e0 	.word	0x200000e0
 800120c:	08004cd4 	.word	0x08004cd4
 8001210:	200000d8 	.word	0x200000d8
 8001214:	200000dc 	.word	0x200000dc
 8001218:	40020c00 	.word	0x40020c00

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	@ 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	2230      	movs	r2, #48	@ 0x30
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fca3 	bl	8003b76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <SystemClock_Config+0xcc>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	4a27      	ldr	r2, [pc, #156]	@ (80012e8 <SystemClock_Config+0xcc>)
 800124a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001250:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <SystemClock_Config+0xcc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <SystemClock_Config+0xd0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a21      	ldr	r2, [pc, #132]	@ (80012ec <SystemClock_Config+0xd0>)
 8001266:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <SystemClock_Config+0xd0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001278:	2302      	movs	r3, #2
 800127a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001280:	2310      	movs	r3, #16
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001288:	2300      	movs	r3, #0
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800128c:	2308      	movs	r3, #8
 800128e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001290:	23a8      	movs	r3, #168	@ 0xa8
 8001292:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001294:	2302      	movs	r3, #2
 8001296:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001298:	2307      	movs	r3, #7
 800129a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fecd 	bl	8003040 <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012ac:	f000 f8c0 	bl	8001430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b0:	230f      	movs	r3, #15
 80012b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b4:	2302      	movs	r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2105      	movs	r1, #5
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 f92e 	bl	8003530 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012da:	f000 f8a9 	bl	8001430 <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	3750      	adds	r7, #80	@ 0x50
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40007000 	.word	0x40007000

080012f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_I2C1_Init+0x50>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	@ (8001344 <MX_I2C1_Init+0x54>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_I2C1_Init+0x50>)
 80012fc:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <MX_I2C1_Init+0x58>)
 80012fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_I2C1_Init+0x50>)
 800130e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	@ (8001340 <MX_I2C1_Init+0x50>)
 800132e:	f000 fe63 	bl	8001ff8 <HAL_I2C_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 f87a 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000084 	.word	0x20000084
 8001344:	40005400 	.word	0x40005400
 8001348:	00061a80 	.word	0x00061a80

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b2f      	ldr	r3, [pc, #188]	@ (8001424 <MX_GPIO_Init+0xd8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a2e      	ldr	r2, [pc, #184]	@ (8001424 <MX_GPIO_Init+0xd8>)
 800136c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b2c      	ldr	r3, [pc, #176]	@ (8001424 <MX_GPIO_Init+0xd8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <MX_GPIO_Init+0xd8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a27      	ldr	r2, [pc, #156]	@ (8001424 <MX_GPIO_Init+0xd8>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b25      	ldr	r3, [pc, #148]	@ (8001424 <MX_GPIO_Init+0xd8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_GPIO_Init+0xd8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a20      	ldr	r2, [pc, #128]	@ (8001424 <MX_GPIO_Init+0xd8>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <MX_GPIO_Init+0xd8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80013bc:	481a      	ldr	r0, [pc, #104]	@ (8001428 <MX_GPIO_Init+0xdc>)
 80013be:	f000 fe01 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80013c2:	2304      	movs	r3, #4
 80013c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4619      	mov	r1, r3
 80013d4:	4815      	ldr	r0, [pc, #84]	@ (800142c <MX_GPIO_Init+0xe0>)
 80013d6:	f000 fc59 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80013da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ec:	2305      	movs	r3, #5
 80013ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	480d      	ldr	r0, [pc, #52]	@ (800142c <MX_GPIO_Init+0xe0>)
 80013f8:	f000 fc48 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80013fc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	4619      	mov	r1, r3
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_GPIO_Init+0xdc>)
 8001416:	f000 fc39 	bl	8001c8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40020c00 	.word	0x40020c00
 800142c:	40020400 	.word	0x40020400

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <Error_Handler+0x8>

0800143c <mpu6500_read_byte>:
#define I2C_TIMEOUT 500UL



mpu6500_status_t mpu6500_read_byte(I2C_HandleTypeDef *hi2c,uint8_t reg_addr, uint8_t *data)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af04      	add	r7, sp, #16
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	460b      	mov	r3, r1
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = \
			HAL_I2C_Mem_Read(hi2c, MPU6500_I2C_ADDR<<1, reg_addr, 1, data, 1, I2C_TIMEOUT);
 800144a:	7afb      	ldrb	r3, [r7, #11]
 800144c:	b29a      	uxth	r2, r3
 800144e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	2301      	movs	r3, #1
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2301      	movs	r3, #1
 800145e:	21d0      	movs	r1, #208	@ 0xd0
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f001 f807 	bl	8002474 <HAL_I2C_Mem_Read>
 8001466:	4603      	mov	r3, r0
 8001468:	75fb      	strb	r3, [r7, #23]


	return (status == HAL_OK) ? MPU6500_OK : MPU6500_ERR;
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
}
 8001476:	4618      	mov	r0, r3
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <mpu6500_read>:


mpu6500_status_t mpu6500_read(I2C_HandleTypeDef *hi2c,uint8_t reg_base_addr, uint8_t *buffer, uint32_t nbytes)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b08a      	sub	sp, #40	@ 0x28
 8001482:	af04      	add	r7, sp, #16
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	460b      	mov	r3, r1
 800148c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = \
			HAL_I2C_Mem_Read(hi2c, MPU6500_I2C_ADDR<<1, reg_base_addr, 1, buffer, nbytes, HAL_MAX_DELAY);
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	b29a      	uxth	r2, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b29b      	uxth	r3, r3
 8001496:	f04f 31ff 	mov.w	r1, #4294967295
 800149a:	9102      	str	r1, [sp, #8]
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2301      	movs	r3, #1
 80014a4:	21d0      	movs	r1, #208	@ 0xd0
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 ffe4 	bl	8002474 <HAL_I2C_Mem_Read>
 80014ac:	4603      	mov	r3, r0
 80014ae:	75fb      	strb	r3, [r7, #23]


	return (status == HAL_OK) ? MPU6500_OK : MPU6500_ERR;
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bf14      	ite	ne
 80014b6:	2301      	movne	r3, #1
 80014b8:	2300      	moveq	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <mpu6500_write_byte>:


mpu6500_status_t mpu6500_write_byte(I2C_HandleTypeDef *hi2c,uint8_t reg_addr, uint8_t data)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70fb      	strb	r3, [r7, #3]
 80014d0:	4613      	mov	r3, r2
 80014d2:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = \
			HAL_I2C_Mem_Write(hi2c, MPU6500_I2C_ADDR<<1, reg_addr, 1, &data, 1, I2C_TIMEOUT);
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	2301      	movs	r3, #1
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	1cbb      	adds	r3, r7, #2
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2301      	movs	r3, #1
 80014e8:	21d0      	movs	r1, #208	@ 0xd0
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fec8 	bl	8002280 <HAL_I2C_Mem_Write>
 80014f0:	4603      	mov	r3, r0
 80014f2:	73fb      	strb	r3, [r7, #15]


	return (status == HAL_OK) ? MPU6500_OK : MPU6500_ERR;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	bf14      	ite	ne
 80014fa:	2301      	movne	r3, #1
 80014fc:	2300      	moveq	r3, #0
 80014fe:	b2db      	uxtb	r3, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <mpu6500_init>:


static uint8_t mpu6500_i2c_addr;

mpu6500_status_t mpu6500_init(I2C_HandleTypeDef *hi2c, uint8_t i2c_dev_addr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]

	mpu6500_i2c_addr = i2c_dev_addr;
 8001514:	4a26      	ldr	r2, [pc, #152]	@ (80015b0 <mpu6500_init+0xa8>)
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	7013      	strb	r3, [r2, #0]
	uint8_t read_byte = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	73bb      	strb	r3, [r7, #14]

	if(mpu6500_read_byte(hi2c, MPU6500_REG_WHOAMI, &read_byte) != MPU6500_OK)
 800151e:	f107 030e 	add.w	r3, r7, #14
 8001522:	461a      	mov	r2, r3
 8001524:	2175      	movs	r1, #117	@ 0x75
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ff88 	bl	800143c <mpu6500_read_byte>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <mpu6500_init+0x2e>
	{
		return MPU6500_ERR;
 8001532:	2301      	movs	r3, #1
 8001534:	e037      	b.n	80015a6 <mpu6500_init+0x9e>
	}


	if(read_byte == 0x68 || read_byte == 0x70)
 8001536:	7bbb      	ldrb	r3, [r7, #14]
 8001538:	2b68      	cmp	r3, #104	@ 0x68
 800153a:	d002      	beq.n	8001542 <mpu6500_init+0x3a>
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	2b70      	cmp	r3, #112	@ 0x70
 8001540:	d10f      	bne.n	8001562 <mpu6500_init+0x5a>
	{
		printf("Valid mpu6500 sensor found ");
 8001542:	481c      	ldr	r0, [pc, #112]	@ (80015b4 <mpu6500_init+0xac>)
 8001544:	f002 fac2 	bl	8003acc <iprintf>
	{
 8001548:	bf00      	nop
	else
	{
		printf("Valid mpu6500 sensor not found ");
		return MPU6500_ERR;
	}
	uint8_t data = 0x00;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
	if(mpu6500_write_byte(hi2c, MPU6500_REG_PWMGMT_1, data ) !=  MPU6500_OK)
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	461a      	mov	r2, r3
 8001552:	216b      	movs	r1, #107	@ 0x6b
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ffb5 	bl	80014c4 <mpu6500_write_byte>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <mpu6500_init+0x68>
 8001560:	e004      	b.n	800156c <mpu6500_init+0x64>
		printf("Valid mpu6500 sensor not found ");
 8001562:	4815      	ldr	r0, [pc, #84]	@ (80015b8 <mpu6500_init+0xb0>)
 8001564:	f002 fab2 	bl	8003acc <iprintf>
		return MPU6500_ERR;
 8001568:	2301      	movs	r3, #1
 800156a:	e01c      	b.n	80015a6 <mpu6500_init+0x9e>
	{
		return MPU6500_ERR;
 800156c:	2301      	movs	r3, #1
 800156e:	e01a      	b.n	80015a6 <mpu6500_init+0x9e>
	}

	data = 0x08;
 8001570:	2308      	movs	r3, #8
 8001572:	73fb      	strb	r3, [r7, #15]
	if(mpu6500_write_byte(hi2c, MPU6500_GYRO_CNFG_REG, data) != MPU6500_OK)
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	461a      	mov	r2, r3
 8001578:	211b      	movs	r1, #27
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <mpu6500_write_byte>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <mpu6500_init+0x82>
	{
		return MPU6500_ERR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00d      	b.n	80015a6 <mpu6500_init+0x9e>
	}

	data = 0x10;
 800158a:	2310      	movs	r3, #16
 800158c:	73fb      	strb	r3, [r7, #15]
	if(mpu6500_write_byte(hi2c, MPU6500_ACC_CNFG_REG, data) != MPU6500_OK)
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	461a      	mov	r2, r3
 8001592:	211c      	movs	r1, #28
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff95 	bl	80014c4 <mpu6500_write_byte>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <mpu6500_init+0x9c>
		{
			return MPU6500_ERR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <mpu6500_init+0x9e>
		}


		return MPU6500_OK;
 80015a4:	2300      	movs	r3, #0

}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200000e6 	.word	0x200000e6
 80015b4:	08004c98 	.word	0x08004c98
 80015b8:	08004cb4 	.word	0x08004cb4

080015bc <mpu6500_read_accelerometer_data>:



mpu6500_status_t  mpu6500_read_accelerometer_data(I2C_HandleTypeDef *hi2c, uint8_t i2c_dev_addr, mpu6500_accel_data_t *accel_data)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	460b      	mov	r3, r1
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	72fb      	strb	r3, [r7, #11]

	uint8_t raw_data[6];
	mpu6500_status_t status = mpu6500_read(hi2c, MPU6500_REG_ACCEL_START,raw_data, sizeof(raw_data));
 80015ca:	f107 0210 	add.w	r2, r7, #16
 80015ce:	2306      	movs	r3, #6
 80015d0:	213b      	movs	r1, #59	@ 0x3b
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff ff53 	bl	800147e <mpu6500_read>
 80015d8:	4603      	mov	r3, r0
 80015da:	75fb      	strb	r3, [r7, #23]

	if(status != MPU6500_OK)
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <mpu6500_read_accelerometer_data+0x2a>
	{
		return status;
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	e01b      	b.n	800161e <mpu6500_read_accelerometer_data+0x62>
	}

	accel_data->x = (int16_t)(raw_data[0]<< 8 | raw_data[1]);
 80015e6:	7c3b      	ldrb	r3, [r7, #16]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	7c7b      	ldrb	r3, [r7, #17]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	801a      	strh	r2, [r3, #0]
	accel_data->y = (int16_t)(raw_data[2]<< 8 | raw_data[3]);
 80015f8:	7cbb      	ldrb	r3, [r7, #18]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	7cfb      	ldrb	r3, [r7, #19]
 8001600:	b21b      	sxth	r3, r3
 8001602:	4313      	orrs	r3, r2
 8001604:	b21a      	sxth	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	805a      	strh	r2, [r3, #2]
	accel_data->z = (int16_t)(raw_data[4]<< 8 | raw_data[5]);
 800160a:	7d3b      	ldrb	r3, [r7, #20]
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b21a      	sxth	r2, r3
 8001610:	7d7b      	ldrb	r3, [r7, #21]
 8001612:	b21b      	sxth	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b21a      	sxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	809a      	strh	r2, [r3, #4]



	return MPU6500_OK;
 800161c:	2300      	movs	r3, #0

}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <mpu6500_accelerometer_calibration>:




mpu6500_accel_data_t mpu6500_accelerometer_calibration(const mpu6500_accel_data_t *error_offset, mpu6500_accel_data_t *raw_data)
{
 8001626:	b480      	push	{r7}
 8001628:	b087      	sub	sp, #28
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
	mpu6500_accel_data_t accel_calibrated;
	accel_calibrated.x = raw_data->x - error_offset->x;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001638:	b29a      	uxth	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	b29b      	uxth	r3, r3
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	b29b      	uxth	r3, r3
 8001646:	b21b      	sxth	r3, r3
 8001648:	823b      	strh	r3, [r7, #16]
	accel_calibrated.y = raw_data->y - error_offset->y;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001650:	b29a      	uxth	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001658:	b29b      	uxth	r3, r3
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	b29b      	uxth	r3, r3
 800165e:	b21b      	sxth	r3, r3
 8001660:	827b      	strh	r3, [r7, #18]
	accel_calibrated.z = raw_data->z - error_offset->z;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001668:	b29a      	uxth	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001670:	b29b      	uxth	r3, r3
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29b      	uxth	r3, r3
 8001676:	b21b      	sxth	r3, r3
 8001678:	82bb      	strh	r3, [r7, #20]

	return accel_calibrated;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	461a      	mov	r2, r3
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	6010      	str	r0, [r2, #0]
 8001686:	889b      	ldrh	r3, [r3, #4]
 8001688:	8093      	strh	r3, [r2, #4]
}
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <HAL_MspInit+0x4c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	4a0f      	ldr	r2, [pc, #60]	@ (80016e4 <HAL_MspInit+0x4c>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ae:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <HAL_MspInit+0x4c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <HAL_MspInit+0x4c>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a08      	ldr	r2, [pc, #32]	@ (80016e4 <HAL_MspInit+0x4c>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_MspInit+0x4c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016d6:	2007      	movs	r0, #7
 80016d8:	f000 faa4 	bl	8001c24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800

080016e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	@ 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a19      	ldr	r2, [pc, #100]	@ (800176c <HAL_I2C_MspInit+0x84>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d12b      	bne.n	8001762 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <HAL_I2C_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a17      	ldr	r2, [pc, #92]	@ (8001770 <HAL_I2C_MspInit+0x88>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_I2C_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001726:	23c0      	movs	r3, #192	@ 0xc0
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172a:	2312      	movs	r3, #18
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001736:	2304      	movs	r3, #4
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	@ (8001774 <HAL_I2C_MspInit+0x8c>)
 8001742:	f000 faa3 	bl	8001c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <HAL_I2C_MspInit+0x88>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_I2C_MspInit+0x88>)
 8001750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_I2C_MspInit+0x88>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	@ 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40005400 	.word	0x40005400
 8001770:	40023800 	.word	0x40023800
 8001774:	40020400 	.word	0x40020400

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <NMI_Handler+0x4>

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <MemManage_Handler+0x4>

08001790 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <UsageFault_Handler+0x4>

080017a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ce:	f000 f933 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e00a      	b.n	80017fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017e8:	f3af 8000 	nop.w
 80017ec:	4601      	mov	r1, r0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	60ba      	str	r2, [r7, #8]
 80017f4:	b2ca      	uxtb	r2, r1
 80017f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	3301      	adds	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	429a      	cmp	r2, r3
 8001804:	dbf0      	blt.n	80017e8 <_read+0x12>
  }

  return len;
 8001806:	687b      	ldr	r3, [r7, #4]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e009      	b.n	8001836 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	60ba      	str	r2, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3301      	adds	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	dbf1      	blt.n	8001822 <_write+0x12>
  }
  return len;
 800183e:	687b      	ldr	r3, [r7, #4]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <_close>:

int _close(int file)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001870:	605a      	str	r2, [r3, #4]
  return 0;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_isatty>:

int _isatty(int file)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001888:	2301      	movs	r3, #1
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001896:	b480      	push	{r7}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	@ (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f002 f998 	bl	8003c14 <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20020000 	.word	0x20020000
 8001910:	00000400 	.word	0x00000400
 8001914:	200000e8 	.word	0x200000e8
 8001918:	20000240 	.word	0x20000240

0800191c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001978 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001944:	f7ff ffea 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194a:	490d      	ldr	r1, [pc, #52]	@ (8001980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800194c:	4a0d      	ldr	r2, [pc, #52]	@ (8001984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001960:	4c0a      	ldr	r4, [pc, #40]	@ (800198c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196e:	f002 f957 	bl	8003c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7ff fb9d 	bl	80010b0 <main>
  bx  lr    
 8001976:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001984:	08004da8 	.word	0x08004da8
  ldr r2, =_sbss
 8001988:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800198c:	2000023c 	.word	0x2000023c

08001990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0d      	ldr	r2, [pc, #52]	@ (80019d4 <HAL_Init+0x40>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <HAL_Init+0x40>)
 80019aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	@ (80019d4 <HAL_Init+0x40>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 f931 	bl	8001c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f808 	bl	80019d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fe66 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_InitTick+0x54>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_InitTick+0x58>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f93b 	bl	8001c72 <HAL_SYSTICK_Config>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00e      	b.n	8001a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d80a      	bhi.n	8001a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f000 f911 	bl	8001c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a18:	4a06      	ldr	r2, [pc, #24]	@ (8001a34 <HAL_InitTick+0x5c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_IncTick+0x20>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_IncTick+0x24>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <HAL_IncTick+0x24>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	200000ec 	.word	0x200000ec

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	200000ec 	.word	0x200000ec

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff ffee 	bl	8001a60 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_Delay+0x44>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a9e:	bf00      	nop
 8001aa0:	f7ff ffde 	bl	8001a60 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000008 	.word	0x20000008

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	db0a      	blt.n	8001b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	490c      	ldr	r1, [pc, #48]	@ (8001b70 <__NVIC_SetPriority+0x4c>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	0112      	lsls	r2, r2, #4
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b4c:	e00a      	b.n	8001b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4908      	ldr	r1, [pc, #32]	@ (8001b74 <__NVIC_SetPriority+0x50>)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	3b04      	subs	r3, #4
 8001b5c:	0112      	lsls	r2, r2, #4
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	440b      	add	r3, r1
 8001b62:	761a      	strb	r2, [r3, #24]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000e100 	.word	0xe000e100
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	@ 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f1c3 0307 	rsb	r3, r3, #7
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	bf28      	it	cs
 8001b96:	2304      	movcs	r3, #4
 8001b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d902      	bls.n	8001ba8 <NVIC_EncodePriority+0x30>
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3b03      	subs	r3, #3
 8001ba6:	e000      	b.n	8001baa <NVIC_EncodePriority+0x32>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	401a      	ands	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	4313      	orrs	r3, r2
         );
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3724      	adds	r7, #36	@ 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bf0:	d301      	bcc.n	8001bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00f      	b.n	8001c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <SysTick_Config+0x40>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfe:	210f      	movs	r1, #15
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f7ff ff8e 	bl	8001b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <SysTick_Config+0x40>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0e:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <SysTick_Config+0x40>)
 8001c10:	2207      	movs	r2, #7
 8001c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	e000e010 	.word	0xe000e010

08001c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff47 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4c:	f7ff ff5c 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	6978      	ldr	r0, [r7, #20]
 8001c58:	f7ff ff8e 	bl	8001b78 <NVIC_EncodePriority>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff5d 	bl	8001b24 <__NVIC_SetPriority>
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffb0 	bl	8001be0 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	e16b      	b.n	8001f80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 815a 	bne.w	8001f7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d005      	beq.n	8001cde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d130      	bne.n	8001d40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d14:	2201      	movs	r2, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 0201 	and.w	r2, r3, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d017      	beq.n	8001d7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d123      	bne.n	8001dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	08da      	lsrs	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3208      	adds	r2, #8
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0203 	and.w	r2, r3, #3
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80b4 	beq.w	8001f7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b60      	ldr	r3, [pc, #384]	@ (8001f98 <HAL_GPIO_Init+0x30c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	4a5f      	ldr	r2, [pc, #380]	@ (8001f98 <HAL_GPIO_Init+0x30c>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e22:	4b5d      	ldr	r3, [pc, #372]	@ (8001f98 <HAL_GPIO_Init+0x30c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001f9c <HAL_GPIO_Init+0x310>)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a52      	ldr	r2, [pc, #328]	@ (8001fa0 <HAL_GPIO_Init+0x314>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d02b      	beq.n	8001eb2 <HAL_GPIO_Init+0x226>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a51      	ldr	r2, [pc, #324]	@ (8001fa4 <HAL_GPIO_Init+0x318>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d025      	beq.n	8001eae <HAL_GPIO_Init+0x222>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a50      	ldr	r2, [pc, #320]	@ (8001fa8 <HAL_GPIO_Init+0x31c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01f      	beq.n	8001eaa <HAL_GPIO_Init+0x21e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001fac <HAL_GPIO_Init+0x320>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d019      	beq.n	8001ea6 <HAL_GPIO_Init+0x21a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4e      	ldr	r2, [pc, #312]	@ (8001fb0 <HAL_GPIO_Init+0x324>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0x216>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fb4 <HAL_GPIO_Init+0x328>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00d      	beq.n	8001e9e <HAL_GPIO_Init+0x212>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4c      	ldr	r2, [pc, #304]	@ (8001fb8 <HAL_GPIO_Init+0x32c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <HAL_GPIO_Init+0x20e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001fbc <HAL_GPIO_Init+0x330>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_GPIO_Init+0x20a>
 8001e92:	2307      	movs	r3, #7
 8001e94:	e00e      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001e96:	2308      	movs	r3, #8
 8001e98:	e00c      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e00a      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001e9e:	2305      	movs	r3, #5
 8001ea0:	e008      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x228>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec4:	4935      	ldr	r1, [pc, #212]	@ (8001f9c <HAL_GPIO_Init+0x310>)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef6:	4a32      	ldr	r2, [pc, #200]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efc:	4b30      	ldr	r3, [pc, #192]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f20:	4a27      	ldr	r2, [pc, #156]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f26:	4b26      	ldr	r3, [pc, #152]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f74:	4a12      	ldr	r2, [pc, #72]	@ (8001fc0 <HAL_GPIO_Init+0x334>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b0f      	cmp	r3, #15
 8001f84:	f67f ae90 	bls.w	8001ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3724      	adds	r7, #36	@ 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40013800 	.word	0x40013800
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40020400 	.word	0x40020400
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40021400 	.word	0x40021400
 8001fb8:	40021800 	.word	0x40021800
 8001fbc:	40021c00 	.word	0x40021c00
 8001fc0:	40013c00 	.word	0x40013c00

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe0:	e003      	b.n	8001fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fe2:	887b      	ldrh	r3, [r7, #2]
 8001fe4:	041a      	lsls	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	619a      	str	r2, [r3, #24]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e12b      	b.n	8002262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff fb62 	bl	80016e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	@ 0x24
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800204a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800205a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800205c:	f001 fc60 	bl	8003920 <HAL_RCC_GetPCLK1Freq>
 8002060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4a81      	ldr	r2, [pc, #516]	@ (800226c <HAL_I2C_Init+0x274>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d807      	bhi.n	800207c <HAL_I2C_Init+0x84>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a80      	ldr	r2, [pc, #512]	@ (8002270 <HAL_I2C_Init+0x278>)
 8002070:	4293      	cmp	r3, r2
 8002072:	bf94      	ite	ls
 8002074:	2301      	movls	r3, #1
 8002076:	2300      	movhi	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e006      	b.n	800208a <HAL_I2C_Init+0x92>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a7d      	ldr	r2, [pc, #500]	@ (8002274 <HAL_I2C_Init+0x27c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	bf94      	ite	ls
 8002084:	2301      	movls	r3, #1
 8002086:	2300      	movhi	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0e7      	b.n	8002262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4a78      	ldr	r2, [pc, #480]	@ (8002278 <HAL_I2C_Init+0x280>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0c9b      	lsrs	r3, r3, #18
 800209c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a6a      	ldr	r2, [pc, #424]	@ (800226c <HAL_I2C_Init+0x274>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d802      	bhi.n	80020cc <HAL_I2C_Init+0xd4>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	3301      	adds	r3, #1
 80020ca:	e009      	b.n	80020e0 <HAL_I2C_Init+0xe8>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	4a69      	ldr	r2, [pc, #420]	@ (800227c <HAL_I2C_Init+0x284>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	3301      	adds	r3, #1
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	495c      	ldr	r1, [pc, #368]	@ (800226c <HAL_I2C_Init+0x274>)
 80020fc:	428b      	cmp	r3, r1
 80020fe:	d819      	bhi.n	8002134 <HAL_I2C_Init+0x13c>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1e59      	subs	r1, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fbb1 f3f3 	udiv	r3, r1, r3
 800210e:	1c59      	adds	r1, r3, #1
 8002110:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002114:	400b      	ands	r3, r1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_I2C_Init+0x138>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1e59      	subs	r1, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fbb1 f3f3 	udiv	r3, r1, r3
 8002128:	3301      	adds	r3, #1
 800212a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212e:	e051      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 8002130:	2304      	movs	r3, #4
 8002132:	e04f      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d111      	bne.n	8002160 <HAL_I2C_Init+0x168>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1e58      	subs	r0, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	e012      	b.n	8002186 <HAL_I2C_Init+0x18e>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1e58      	subs	r0, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	0099      	lsls	r1, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	fbb0 f3f3 	udiv	r3, r0, r3
 8002176:	3301      	adds	r3, #1
 8002178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Init+0x196>
 800218a:	2301      	movs	r3, #1
 800218c:	e022      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10e      	bne.n	80021b4 <HAL_I2C_Init+0x1bc>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1e58      	subs	r0, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6859      	ldr	r1, [r3, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	440b      	add	r3, r1
 80021a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b2:	e00f      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1e58      	subs	r0, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	0099      	lsls	r1, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	6809      	ldr	r1, [r1, #0]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002202:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6911      	ldr	r1, [r2, #16]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68d2      	ldr	r2, [r2, #12]
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	430b      	orrs	r3, r1
 8002216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	000186a0 	.word	0x000186a0
 8002270:	001e847f 	.word	0x001e847f
 8002274:	003d08ff 	.word	0x003d08ff
 8002278:	431bde83 	.word	0x431bde83
 800227c:	10624dd3 	.word	0x10624dd3

08002280 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	4608      	mov	r0, r1
 800228a:	4611      	mov	r1, r2
 800228c:	461a      	mov	r2, r3
 800228e:	4603      	mov	r3, r0
 8002290:	817b      	strh	r3, [r7, #10]
 8002292:	460b      	mov	r3, r1
 8002294:	813b      	strh	r3, [r7, #8]
 8002296:	4613      	mov	r3, r2
 8002298:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800229a:	f7ff fbe1 	bl	8001a60 <HAL_GetTick>
 800229e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	f040 80d9 	bne.w	8002460 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2319      	movs	r3, #25
 80022b4:	2201      	movs	r2, #1
 80022b6:	496d      	ldr	r1, [pc, #436]	@ (800246c <HAL_I2C_Mem_Write+0x1ec>)
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 fc8b 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022c4:	2302      	movs	r3, #2
 80022c6:	e0cc      	b.n	8002462 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_I2C_Mem_Write+0x56>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e0c5      	b.n	8002462 <HAL_I2C_Mem_Write+0x1e2>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d007      	beq.n	80022fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800230a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2221      	movs	r2, #33	@ 0x21
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2240      	movs	r2, #64	@ 0x40
 8002318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a3a      	ldr	r2, [r7, #32]
 8002326:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800232c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a4d      	ldr	r2, [pc, #308]	@ (8002470 <HAL_I2C_Mem_Write+0x1f0>)
 800233c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800233e:	88f8      	ldrh	r0, [r7, #6]
 8002340:	893a      	ldrh	r2, [r7, #8]
 8002342:	8979      	ldrh	r1, [r7, #10]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4603      	mov	r3, r0
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 fac2 	bl	80028d8 <I2C_RequestMemoryWrite>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d052      	beq.n	8002400 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e081      	b.n	8002462 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fd50 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00d      	beq.n	800238a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	2b04      	cmp	r3, #4
 8002374:	d107      	bne.n	8002386 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002384:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06b      	b.n	8002462 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d11b      	bne.n	8002400 <HAL_I2C_Mem_Write+0x180>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d017      	beq.n	8002400 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1aa      	bne.n	800235e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fd43 	bl	8002e98 <I2C_WaitOnBTFFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00d      	beq.n	8002434 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	2b04      	cmp	r3, #4
 800241e:	d107      	bne.n	8002430 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800242e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e016      	b.n	8002462 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	00100002 	.word	0x00100002
 8002470:	ffff0000 	.word	0xffff0000

08002474 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08c      	sub	sp, #48	@ 0x30
 8002478:	af02      	add	r7, sp, #8
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	461a      	mov	r2, r3
 8002482:	4603      	mov	r3, r0
 8002484:	817b      	strh	r3, [r7, #10]
 8002486:	460b      	mov	r3, r1
 8002488:	813b      	strh	r3, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800248e:	f7ff fae7 	bl	8001a60 <HAL_GetTick>
 8002492:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b20      	cmp	r3, #32
 800249e:	f040 8214 	bne.w	80028ca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2319      	movs	r3, #25
 80024a8:	2201      	movs	r2, #1
 80024aa:	497b      	ldr	r1, [pc, #492]	@ (8002698 <HAL_I2C_Mem_Read+0x224>)
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fb91 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
 80024ba:	e207      	b.n	80028cc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Mem_Read+0x56>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e200      	b.n	80028cc <HAL_I2C_Mem_Read+0x458>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d007      	beq.n	80024f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2222      	movs	r2, #34	@ 0x22
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2240      	movs	r2, #64	@ 0x40
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002520:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a5b      	ldr	r2, [pc, #364]	@ (800269c <HAL_I2C_Mem_Read+0x228>)
 8002530:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002532:	88f8      	ldrh	r0, [r7, #6]
 8002534:	893a      	ldrh	r2, [r7, #8]
 8002536:	8979      	ldrh	r1, [r7, #10]
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	4603      	mov	r3, r0
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fa5e 	bl	8002a04 <I2C_RequestMemoryRead>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e1bc      	b.n	80028cc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002556:	2b00      	cmp	r3, #0
 8002558:	d113      	bne.n	8002582 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	623b      	str	r3, [r7, #32]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	623b      	str	r3, [r7, #32]
 800256e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e190      	b.n	80028a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002586:	2b01      	cmp	r3, #1
 8002588:	d11b      	bne.n	80025c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002598:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e170      	b.n	80028a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d11b      	bne.n	8002602 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	e150      	b.n	80028a4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002618:	e144      	b.n	80028a4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261e:	2b03      	cmp	r3, #3
 8002620:	f200 80f1 	bhi.w	8002806 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002628:	2b01      	cmp	r3, #1
 800262a:	d123      	bne.n	8002674 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fc79 	bl	8002f28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e145      	b.n	80028cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002668:	b29b      	uxth	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002672:	e117      	b.n	80028a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	2b02      	cmp	r3, #2
 800267a:	d14e      	bne.n	800271a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002682:	2200      	movs	r2, #0
 8002684:	4906      	ldr	r1, [pc, #24]	@ (80026a0 <HAL_I2C_Mem_Read+0x22c>)
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 faa4 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e11a      	b.n	80028cc <HAL_I2C_Mem_Read+0x458>
 8002696:	bf00      	nop
 8002698:	00100002 	.word	0x00100002
 800269c:	ffff0000 	.word	0xffff0000
 80026a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002718:	e0c4      	b.n	80028a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002720:	2200      	movs	r2, #0
 8002722:	496c      	ldr	r1, [pc, #432]	@ (80028d4 <HAL_I2C_Mem_Read+0x460>)
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fa55 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0cb      	b.n	80028cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277c:	2200      	movs	r2, #0
 800277e:	4955      	ldr	r1, [pc, #340]	@ (80028d4 <HAL_I2C_Mem_Read+0x460>)
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fa27 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e09d      	b.n	80028cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800279e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002804:	e04e      	b.n	80028a4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002808:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fb8c 	bl	8002f28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e058      	b.n	80028cc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b04      	cmp	r3, #4
 8002858:	d124      	bne.n	80028a4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285e:	2b03      	cmp	r3, #3
 8002860:	d107      	bne.n	8002872 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002870:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f47f aeb6 	bne.w	800261a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3728      	adds	r7, #40	@ 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	00010004 	.word	0x00010004

080028d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	4608      	mov	r0, r1
 80028e2:	4611      	mov	r1, r2
 80028e4:	461a      	mov	r2, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	817b      	strh	r3, [r7, #10]
 80028ea:	460b      	mov	r3, r1
 80028ec:	813b      	strh	r3, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002900:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	2200      	movs	r2, #0
 800290a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f960 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002928:	d103      	bne.n	8002932 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002930:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e05f      	b.n	80029f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002936:	897b      	ldrh	r3, [r7, #10]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002944:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	6a3a      	ldr	r2, [r7, #32]
 800294a:	492d      	ldr	r1, [pc, #180]	@ (8002a00 <I2C_RequestMemoryWrite+0x128>)
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f9bb 	bl	8002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e04c      	b.n	80029f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002974:	6a39      	ldr	r1, [r7, #32]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fa46 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	2b04      	cmp	r3, #4
 8002988:	d107      	bne.n	800299a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002998:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e02b      	b.n	80029f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029a4:	893b      	ldrh	r3, [r7, #8]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	e021      	b.n	80029f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029b0:	893b      	ldrh	r3, [r7, #8]
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c0:	6a39      	ldr	r1, [r7, #32]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fa20 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d107      	bne.n	80029e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e005      	b.n	80029f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029ea:	893b      	ldrh	r3, [r7, #8]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	00010002 	.word	0x00010002

08002a04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	817b      	strh	r3, [r7, #10]
 8002a16:	460b      	mov	r3, r1
 8002a18:	813b      	strh	r3, [r7, #8]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f8c2 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a64:	d103      	bne.n	8002a6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e0aa      	b.n	8002bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a72:	897b      	ldrh	r3, [r7, #10]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	6a3a      	ldr	r2, [r7, #32]
 8002a86:	4952      	ldr	r1, [pc, #328]	@ (8002bd0 <I2C_RequestMemoryRead+0x1cc>)
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f91d 	bl	8002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e097      	b.n	8002bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab0:	6a39      	ldr	r1, [r7, #32]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f9a8 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d107      	bne.n	8002ad6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e076      	b.n	8002bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ae0:	893b      	ldrh	r3, [r7, #8]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	611a      	str	r2, [r3, #16]
 8002aea:	e021      	b.n	8002b30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002afc:	6a39      	ldr	r1, [r7, #32]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f982 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00d      	beq.n	8002b26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d107      	bne.n	8002b22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e050      	b.n	8002bc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b26:	893b      	ldrh	r3, [r7, #8]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b32:	6a39      	ldr	r1, [r7, #32]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f967 	bl	8002e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00d      	beq.n	8002b5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d107      	bne.n	8002b58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e035      	b.n	8002bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f82b 	bl	8002bd4 <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b92:	d103      	bne.n	8002b9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e013      	b.n	8002bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ba0:	897b      	ldrh	r3, [r7, #10]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	6a3a      	ldr	r2, [r7, #32]
 8002bb4:	4906      	ldr	r1, [pc, #24]	@ (8002bd0 <I2C_RequestMemoryRead+0x1cc>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f886 	bl	8002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	00010002 	.word	0x00010002

08002bd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	603b      	str	r3, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be4:	e048      	b.n	8002c78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bec:	d044      	beq.n	8002c78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bee:	f7fe ff37 	bl	8001a60 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d302      	bcc.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d139      	bne.n	8002c78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	0c1b      	lsrs	r3, r3, #16
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d10d      	bne.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	43da      	mvns	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	e00c      	b.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	43da      	mvns	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	4013      	ands	r3, r2
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d116      	bne.n	8002c78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e023      	b.n	8002cc0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d10d      	bne.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	43da      	mvns	r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	e00c      	b.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	43da      	mvns	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d093      	beq.n	8002be6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd6:	e071      	b.n	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce6:	d123      	bne.n	8002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	f043 0204 	orr.w	r2, r3, #4
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e067      	b.n	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d36:	d041      	beq.n	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d38:	f7fe fe92 	bl	8001a60 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d302      	bcc.n	8002d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d136      	bne.n	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d10c      	bne.n	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4013      	ands	r3, r2
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	e00b      	b.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d016      	beq.n	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e021      	b.n	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	0c1b      	lsrs	r3, r3, #16
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d10c      	bne.n	8002de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	43da      	mvns	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e00b      	b.n	8002df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	43da      	mvns	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4013      	ands	r3, r2
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bf14      	ite	ne
 8002df2:	2301      	movne	r3, #1
 8002df4:	2300      	moveq	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f47f af6d 	bne.w	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e14:	e034      	b.n	8002e80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f8e3 	bl	8002fe2 <I2C_IsAcknowledgeFailed>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e034      	b.n	8002e90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d028      	beq.n	8002e80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2e:	f7fe fe17 	bl	8001a60 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d302      	bcc.n	8002e44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d11d      	bne.n	8002e80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4e:	2b80      	cmp	r3, #128	@ 0x80
 8002e50:	d016      	beq.n	8002e80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e007      	b.n	8002e90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8a:	2b80      	cmp	r3, #128	@ 0x80
 8002e8c:	d1c3      	bne.n	8002e16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ea4:	e034      	b.n	8002f10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f89b 	bl	8002fe2 <I2C_IsAcknowledgeFailed>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e034      	b.n	8002f20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d028      	beq.n	8002f10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7fe fdcf 	bl	8001a60 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d11d      	bne.n	8002f10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d016      	beq.n	8002f10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e007      	b.n	8002f20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d1c3      	bne.n	8002ea6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f34:	e049      	b.n	8002fca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d119      	bne.n	8002f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0210 	mvn.w	r2, #16
 8002f4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e030      	b.n	8002fda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f78:	f7fe fd72 	bl	8001a60 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d302      	bcc.n	8002f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d11d      	bne.n	8002fca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f98:	2b40      	cmp	r3, #64	@ 0x40
 8002f9a:	d016      	beq.n	8002fca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e007      	b.n	8002fda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd4:	2b40      	cmp	r3, #64	@ 0x40
 8002fd6:	d1ae      	bne.n	8002f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff8:	d11b      	bne.n	8003032 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003002:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	f043 0204 	orr.w	r2, r3, #4
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e267      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d075      	beq.n	800314a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800305e:	4b88      	ldr	r3, [pc, #544]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b04      	cmp	r3, #4
 8003068:	d00c      	beq.n	8003084 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306a:	4b85      	ldr	r3, [pc, #532]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003072:	2b08      	cmp	r3, #8
 8003074:	d112      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003076:	4b82      	ldr	r3, [pc, #520]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800307e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003082:	d10b      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	4b7e      	ldr	r3, [pc, #504]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d05b      	beq.n	8003148 <HAL_RCC_OscConfig+0x108>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d157      	bne.n	8003148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e242      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a4:	d106      	bne.n	80030b4 <HAL_RCC_OscConfig+0x74>
 80030a6:	4b76      	ldr	r3, [pc, #472]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a75      	ldr	r2, [pc, #468]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e01d      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x98>
 80030be:	4b70      	ldr	r3, [pc, #448]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6f      	ldr	r2, [pc, #444]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030d8:	4b69      	ldr	r3, [pc, #420]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a68      	ldr	r2, [pc, #416]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b66      	ldr	r3, [pc, #408]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a65      	ldr	r2, [pc, #404]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80030ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe fcb2 	bl	8001a60 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe fcae 	bl	8001a60 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	@ 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e207      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b5b      	ldr	r3, [pc, #364]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0xc0>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe fc9e 	bl	8001a60 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe fc9a 	bl	8001a60 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	@ 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e1f3      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313a:	4b51      	ldr	r3, [pc, #324]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0xe8>
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d063      	beq.n	800321e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003156:	4b4a      	ldr	r3, [pc, #296]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003162:	4b47      	ldr	r3, [pc, #284]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800316a:	2b08      	cmp	r3, #8
 800316c:	d11c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b44      	ldr	r3, [pc, #272]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d116      	bne.n	80031a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	4b41      	ldr	r3, [pc, #260]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x152>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d001      	beq.n	8003192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e1c7      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b3b      	ldr	r3, [pc, #236]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4937      	ldr	r1, [pc, #220]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	e03a      	b.n	800321e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d020      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b0:	4b34      	ldr	r3, [pc, #208]	@ (8003284 <HAL_RCC_OscConfig+0x244>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fe fc53 	bl	8001a60 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031be:	f7fe fc4f 	bl	8001a60 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1a8      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b28      	ldr	r3, [pc, #160]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4925      	ldr	r1, [pc, #148]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f2:	4b24      	ldr	r3, [pc, #144]	@ (8003284 <HAL_RCC_OscConfig+0x244>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe fc32 	bl	8001a60 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003200:	f7fe fc2e 	bl	8001a60 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e187      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	4b1b      	ldr	r3, [pc, #108]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d036      	beq.n	8003298 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003232:	4b15      	ldr	r3, [pc, #84]	@ (8003288 <HAL_RCC_OscConfig+0x248>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fe fc12 	bl	8001a60 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003240:	f7fe fc0e 	bl	8001a60 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e167      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003252:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_RCC_OscConfig+0x240>)
 8003254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x200>
 800325e:	e01b      	b.n	8003298 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003260:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <HAL_RCC_OscConfig+0x248>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fe fbfb 	bl	8001a60 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	e00e      	b.n	800328c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326e:	f7fe fbf7 	bl	8001a60 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d907      	bls.n	800328c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e150      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
 8003280:	40023800 	.word	0x40023800
 8003284:	42470000 	.word	0x42470000
 8003288:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b88      	ldr	r3, [pc, #544]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800328e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ea      	bne.n	800326e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8097 	beq.w	80033d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b81      	ldr	r3, [pc, #516]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	4b7d      	ldr	r3, [pc, #500]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	4a7c      	ldr	r2, [pc, #496]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c6:	4b7a      	ldr	r3, [pc, #488]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b77      	ldr	r3, [pc, #476]	@ (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d118      	bne.n	8003314 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e2:	4b74      	ldr	r3, [pc, #464]	@ (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a73      	ldr	r2, [pc, #460]	@ (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ee:	f7fe fbb7 	bl	8001a60 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f6:	f7fe fbb3 	bl	8001a60 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e10c      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	4b6a      	ldr	r3, [pc, #424]	@ (80034b4 <HAL_RCC_OscConfig+0x474>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x2ea>
 800331c:	4b64      	ldr	r3, [pc, #400]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003320:	4a63      	ldr	r2, [pc, #396]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	@ 0x70
 8003328:	e01c      	b.n	8003364 <HAL_RCC_OscConfig+0x324>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x30c>
 8003332:	4b5f      	ldr	r3, [pc, #380]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003336:	4a5e      	ldr	r2, [pc, #376]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	6713      	str	r3, [r2, #112]	@ 0x70
 800333e:	4b5c      	ldr	r3, [pc, #368]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003342:	4a5b      	ldr	r2, [pc, #364]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6713      	str	r3, [r2, #112]	@ 0x70
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0x324>
 800334c:	4b58      	ldr	r3, [pc, #352]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003350:	4a57      	ldr	r2, [pc, #348]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	@ 0x70
 8003358:	4b55      	ldr	r3, [pc, #340]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335c:	4a54      	ldr	r2, [pc, #336]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800335e:	f023 0304 	bic.w	r3, r3, #4
 8003362:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d015      	beq.n	8003398 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe fb78 	bl	8001a60 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	e00a      	b.n	800338a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003374:	f7fe fb74 	bl	8001a60 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e0cb      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	4b49      	ldr	r3, [pc, #292]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0ee      	beq.n	8003374 <HAL_RCC_OscConfig+0x334>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003398:	f7fe fb62 	bl	8001a60 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe fb5e 	bl	8001a60 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0b5      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b6:	4b3e      	ldr	r3, [pc, #248]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ee      	bne.n	80033a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4b39      	ldr	r3, [pc, #228]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	4a38      	ldr	r2, [pc, #224]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80a1 	beq.w	8003520 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033de:	4b34      	ldr	r3, [pc, #208]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d05c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d141      	bne.n	8003476 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <HAL_RCC_OscConfig+0x478>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe fb32 	bl	8001a60 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fb2e 	bl	8001a60 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e087      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b27      	ldr	r3, [pc, #156]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	491b      	ldr	r1, [pc, #108]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003448:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <HAL_RCC_OscConfig+0x478>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fe fb07 	bl	8001a60 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003456:	f7fe fb03 	bl	8001a60 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e05c      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003468:	4b11      	ldr	r3, [pc, #68]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x416>
 8003474:	e054      	b.n	8003520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <HAL_RCC_OscConfig+0x478>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe faf0 	bl	8001a60 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7fe faec 	bl	8001a60 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e045      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x444>
 80034a2:	e03d      	b.n	8003520 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e038      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40007000 	.word	0x40007000
 80034b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	@ (800352c <HAL_RCC_OscConfig+0x4ec>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d028      	beq.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d121      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d11a      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d111      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	3b01      	subs	r3, #1
 8003506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d107      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800

08003530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0cc      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b68      	ldr	r3, [pc, #416]	@ (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d90c      	bls.n	800356c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b65      	ldr	r3, [pc, #404]	@ (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b63      	ldr	r3, [pc, #396]	@ (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0b8      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003584:	4b59      	ldr	r3, [pc, #356]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a58      	ldr	r2, [pc, #352]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800358e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800359c:	4b53      	ldr	r3, [pc, #332]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a52      	ldr	r2, [pc, #328]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b50      	ldr	r3, [pc, #320]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	494d      	ldr	r1, [pc, #308]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d044      	beq.n	8003650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	4b47      	ldr	r3, [pc, #284]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d119      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e07f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	4b3f      	ldr	r3, [pc, #252]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e06f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	4b3b      	ldr	r3, [pc, #236]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e067      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b37      	ldr	r3, [pc, #220]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4934      	ldr	r1, [pc, #208]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	4313      	orrs	r3, r2
 800361e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003620:	f7fe fa1e 	bl	8001a60 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fe fa1a 	bl	8001a60 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e04f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b2b      	ldr	r3, [pc, #172]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003650:	4b25      	ldr	r3, [pc, #148]	@ (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d20c      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b22      	ldr	r3, [pc, #136]	@ (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e032      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003684:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4916      	ldr	r1, [pc, #88]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036a2:	4b12      	ldr	r3, [pc, #72]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	490e      	ldr	r1, [pc, #56]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036b6:	f000 f821 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80036ba:	4602      	mov	r2, r0
 80036bc:	4b0b      	ldr	r3, [pc, #44]	@ (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	490a      	ldr	r1, [pc, #40]	@ (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	5ccb      	ldrb	r3, [r1, r3]
 80036ca:	fa22 f303 	lsr.w	r3, r2, r3
 80036ce:	4a09      	ldr	r2, [pc, #36]	@ (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036d2:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe f97e 	bl	80019d8 <HAL_InitTick>

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023c00 	.word	0x40023c00
 80036ec:	40023800 	.word	0x40023800
 80036f0:	08004cdc 	.word	0x08004cdc
 80036f4:	20000000 	.word	0x20000000
 80036f8:	20000004 	.word	0x20000004

080036fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003700:	b094      	sub	sp, #80	@ 0x50
 8003702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003714:	4b79      	ldr	r3, [pc, #484]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b08      	cmp	r3, #8
 800371e:	d00d      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x40>
 8003720:	2b08      	cmp	r3, #8
 8003722:	f200 80e1 	bhi.w	80038e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x34>
 800372a:	2b04      	cmp	r3, #4
 800372c:	d003      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0x3a>
 800372e:	e0db      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003730:	4b73      	ldr	r3, [pc, #460]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x204>)
 8003732:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003734:	e0db      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003736:	4b73      	ldr	r3, [pc, #460]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x208>)
 8003738:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800373a:	e0d8      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800373c:	4b6f      	ldr	r3, [pc, #444]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x200>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003744:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003746:	4b6d      	ldr	r3, [pc, #436]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d063      	beq.n	800381a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b6a      	ldr	r3, [pc, #424]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	2200      	movs	r2, #0
 800375a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800375c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003764:	633b      	str	r3, [r7, #48]	@ 0x30
 8003766:	2300      	movs	r3, #0
 8003768:	637b      	str	r3, [r7, #52]	@ 0x34
 800376a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800376e:	4622      	mov	r2, r4
 8003770:	462b      	mov	r3, r5
 8003772:	f04f 0000 	mov.w	r0, #0
 8003776:	f04f 0100 	mov.w	r1, #0
 800377a:	0159      	lsls	r1, r3, #5
 800377c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003780:	0150      	lsls	r0, r2, #5
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4621      	mov	r1, r4
 8003788:	1a51      	subs	r1, r2, r1
 800378a:	6139      	str	r1, [r7, #16]
 800378c:	4629      	mov	r1, r5
 800378e:	eb63 0301 	sbc.w	r3, r3, r1
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037a0:	4659      	mov	r1, fp
 80037a2:	018b      	lsls	r3, r1, #6
 80037a4:	4651      	mov	r1, sl
 80037a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037aa:	4651      	mov	r1, sl
 80037ac:	018a      	lsls	r2, r1, #6
 80037ae:	4651      	mov	r1, sl
 80037b0:	ebb2 0801 	subs.w	r8, r2, r1
 80037b4:	4659      	mov	r1, fp
 80037b6:	eb63 0901 	sbc.w	r9, r3, r1
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ce:	4690      	mov	r8, r2
 80037d0:	4699      	mov	r9, r3
 80037d2:	4623      	mov	r3, r4
 80037d4:	eb18 0303 	adds.w	r3, r8, r3
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	462b      	mov	r3, r5
 80037dc:	eb49 0303 	adc.w	r3, r9, r3
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037ee:	4629      	mov	r1, r5
 80037f0:	024b      	lsls	r3, r1, #9
 80037f2:	4621      	mov	r1, r4
 80037f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037f8:	4621      	mov	r1, r4
 80037fa:	024a      	lsls	r2, r1, #9
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003802:	2200      	movs	r2, #0
 8003804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003806:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003808:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800380c:	f7fd f9d6 	bl	8000bbc <__aeabi_uldivmod>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4613      	mov	r3, r2
 8003816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003818:	e058      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381a:	4b38      	ldr	r3, [pc, #224]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x200>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	099b      	lsrs	r3, r3, #6
 8003820:	2200      	movs	r2, #0
 8003822:	4618      	mov	r0, r3
 8003824:	4611      	mov	r1, r2
 8003826:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800382a:	623b      	str	r3, [r7, #32]
 800382c:	2300      	movs	r3, #0
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003830:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003834:	4642      	mov	r2, r8
 8003836:	464b      	mov	r3, r9
 8003838:	f04f 0000 	mov.w	r0, #0
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	0159      	lsls	r1, r3, #5
 8003842:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003846:	0150      	lsls	r0, r2, #5
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4641      	mov	r1, r8
 800384e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003852:	4649      	mov	r1, r9
 8003854:	eb63 0b01 	sbc.w	fp, r3, r1
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003864:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003868:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800386c:	ebb2 040a 	subs.w	r4, r2, sl
 8003870:	eb63 050b 	sbc.w	r5, r3, fp
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	f04f 0300 	mov.w	r3, #0
 800387c:	00eb      	lsls	r3, r5, #3
 800387e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003882:	00e2      	lsls	r2, r4, #3
 8003884:	4614      	mov	r4, r2
 8003886:	461d      	mov	r5, r3
 8003888:	4643      	mov	r3, r8
 800388a:	18e3      	adds	r3, r4, r3
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	464b      	mov	r3, r9
 8003890:	eb45 0303 	adc.w	r3, r5, r3
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038a2:	4629      	mov	r1, r5
 80038a4:	028b      	lsls	r3, r1, #10
 80038a6:	4621      	mov	r1, r4
 80038a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038ac:	4621      	mov	r1, r4
 80038ae:	028a      	lsls	r2, r1, #10
 80038b0:	4610      	mov	r0, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b6:	2200      	movs	r2, #0
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	61fa      	str	r2, [r7, #28]
 80038bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038c0:	f7fd f97c 	bl	8000bbc <__aeabi_uldivmod>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4613      	mov	r3, r2
 80038ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038cc:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x200>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	3301      	adds	r3, #1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038e6:	e002      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038e8:	4b05      	ldr	r3, [pc, #20]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x204>)
 80038ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3750      	adds	r7, #80	@ 0x50
 80038f4:	46bd      	mov	sp, r7
 80038f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800
 8003900:	00f42400 	.word	0x00f42400
 8003904:	007a1200 	.word	0x007a1200

08003908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800390c:	4b03      	ldr	r3, [pc, #12]	@ (800391c <HAL_RCC_GetHCLKFreq+0x14>)
 800390e:	681b      	ldr	r3, [r3, #0]
}
 8003910:	4618      	mov	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000000 	.word	0x20000000

08003920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003924:	f7ff fff0 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8003928:	4602      	mov	r2, r0
 800392a:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	0a9b      	lsrs	r3, r3, #10
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4903      	ldr	r1, [pc, #12]	@ (8003944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003936:	5ccb      	ldrb	r3, [r1, r3]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	08004cec 	.word	0x08004cec

08003948 <std>:
 8003948:	2300      	movs	r3, #0
 800394a:	b510      	push	{r4, lr}
 800394c:	4604      	mov	r4, r0
 800394e:	e9c0 3300 	strd	r3, r3, [r0]
 8003952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003956:	6083      	str	r3, [r0, #8]
 8003958:	8181      	strh	r1, [r0, #12]
 800395a:	6643      	str	r3, [r0, #100]	@ 0x64
 800395c:	81c2      	strh	r2, [r0, #14]
 800395e:	6183      	str	r3, [r0, #24]
 8003960:	4619      	mov	r1, r3
 8003962:	2208      	movs	r2, #8
 8003964:	305c      	adds	r0, #92	@ 0x5c
 8003966:	f000 f906 	bl	8003b76 <memset>
 800396a:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <std+0x58>)
 800396c:	6263      	str	r3, [r4, #36]	@ 0x24
 800396e:	4b0d      	ldr	r3, [pc, #52]	@ (80039a4 <std+0x5c>)
 8003970:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003972:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <std+0x60>)
 8003974:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003976:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <std+0x64>)
 8003978:	6323      	str	r3, [r4, #48]	@ 0x30
 800397a:	4b0d      	ldr	r3, [pc, #52]	@ (80039b0 <std+0x68>)
 800397c:	6224      	str	r4, [r4, #32]
 800397e:	429c      	cmp	r4, r3
 8003980:	d006      	beq.n	8003990 <std+0x48>
 8003982:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003986:	4294      	cmp	r4, r2
 8003988:	d002      	beq.n	8003990 <std+0x48>
 800398a:	33d0      	adds	r3, #208	@ 0xd0
 800398c:	429c      	cmp	r4, r3
 800398e:	d105      	bne.n	800399c <std+0x54>
 8003990:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003998:	f000 b966 	b.w	8003c68 <__retarget_lock_init_recursive>
 800399c:	bd10      	pop	{r4, pc}
 800399e:	bf00      	nop
 80039a0:	08003af1 	.word	0x08003af1
 80039a4:	08003b13 	.word	0x08003b13
 80039a8:	08003b4b 	.word	0x08003b4b
 80039ac:	08003b6f 	.word	0x08003b6f
 80039b0:	200000f0 	.word	0x200000f0

080039b4 <stdio_exit_handler>:
 80039b4:	4a02      	ldr	r2, [pc, #8]	@ (80039c0 <stdio_exit_handler+0xc>)
 80039b6:	4903      	ldr	r1, [pc, #12]	@ (80039c4 <stdio_exit_handler+0x10>)
 80039b8:	4803      	ldr	r0, [pc, #12]	@ (80039c8 <stdio_exit_handler+0x14>)
 80039ba:	f000 b869 	b.w	8003a90 <_fwalk_sglue>
 80039be:	bf00      	nop
 80039c0:	2000000c 	.word	0x2000000c
 80039c4:	08004509 	.word	0x08004509
 80039c8:	2000001c 	.word	0x2000001c

080039cc <cleanup_stdio>:
 80039cc:	6841      	ldr	r1, [r0, #4]
 80039ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003a00 <cleanup_stdio+0x34>)
 80039d0:	4299      	cmp	r1, r3
 80039d2:	b510      	push	{r4, lr}
 80039d4:	4604      	mov	r4, r0
 80039d6:	d001      	beq.n	80039dc <cleanup_stdio+0x10>
 80039d8:	f000 fd96 	bl	8004508 <_fflush_r>
 80039dc:	68a1      	ldr	r1, [r4, #8]
 80039de:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <cleanup_stdio+0x38>)
 80039e0:	4299      	cmp	r1, r3
 80039e2:	d002      	beq.n	80039ea <cleanup_stdio+0x1e>
 80039e4:	4620      	mov	r0, r4
 80039e6:	f000 fd8f 	bl	8004508 <_fflush_r>
 80039ea:	68e1      	ldr	r1, [r4, #12]
 80039ec:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <cleanup_stdio+0x3c>)
 80039ee:	4299      	cmp	r1, r3
 80039f0:	d004      	beq.n	80039fc <cleanup_stdio+0x30>
 80039f2:	4620      	mov	r0, r4
 80039f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039f8:	f000 bd86 	b.w	8004508 <_fflush_r>
 80039fc:	bd10      	pop	{r4, pc}
 80039fe:	bf00      	nop
 8003a00:	200000f0 	.word	0x200000f0
 8003a04:	20000158 	.word	0x20000158
 8003a08:	200001c0 	.word	0x200001c0

08003a0c <global_stdio_init.part.0>:
 8003a0c:	b510      	push	{r4, lr}
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a3c <global_stdio_init.part.0+0x30>)
 8003a10:	4c0b      	ldr	r4, [pc, #44]	@ (8003a40 <global_stdio_init.part.0+0x34>)
 8003a12:	4a0c      	ldr	r2, [pc, #48]	@ (8003a44 <global_stdio_init.part.0+0x38>)
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	4620      	mov	r0, r4
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2104      	movs	r1, #4
 8003a1c:	f7ff ff94 	bl	8003948 <std>
 8003a20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a24:	2201      	movs	r2, #1
 8003a26:	2109      	movs	r1, #9
 8003a28:	f7ff ff8e 	bl	8003948 <std>
 8003a2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a30:	2202      	movs	r2, #2
 8003a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a36:	2112      	movs	r1, #18
 8003a38:	f7ff bf86 	b.w	8003948 <std>
 8003a3c:	20000228 	.word	0x20000228
 8003a40:	200000f0 	.word	0x200000f0
 8003a44:	080039b5 	.word	0x080039b5

08003a48 <__sfp_lock_acquire>:
 8003a48:	4801      	ldr	r0, [pc, #4]	@ (8003a50 <__sfp_lock_acquire+0x8>)
 8003a4a:	f000 b90e 	b.w	8003c6a <__retarget_lock_acquire_recursive>
 8003a4e:	bf00      	nop
 8003a50:	20000231 	.word	0x20000231

08003a54 <__sfp_lock_release>:
 8003a54:	4801      	ldr	r0, [pc, #4]	@ (8003a5c <__sfp_lock_release+0x8>)
 8003a56:	f000 b909 	b.w	8003c6c <__retarget_lock_release_recursive>
 8003a5a:	bf00      	nop
 8003a5c:	20000231 	.word	0x20000231

08003a60 <__sinit>:
 8003a60:	b510      	push	{r4, lr}
 8003a62:	4604      	mov	r4, r0
 8003a64:	f7ff fff0 	bl	8003a48 <__sfp_lock_acquire>
 8003a68:	6a23      	ldr	r3, [r4, #32]
 8003a6a:	b11b      	cbz	r3, 8003a74 <__sinit+0x14>
 8003a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a70:	f7ff bff0 	b.w	8003a54 <__sfp_lock_release>
 8003a74:	4b04      	ldr	r3, [pc, #16]	@ (8003a88 <__sinit+0x28>)
 8003a76:	6223      	str	r3, [r4, #32]
 8003a78:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <__sinit+0x2c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f5      	bne.n	8003a6c <__sinit+0xc>
 8003a80:	f7ff ffc4 	bl	8003a0c <global_stdio_init.part.0>
 8003a84:	e7f2      	b.n	8003a6c <__sinit+0xc>
 8003a86:	bf00      	nop
 8003a88:	080039cd 	.word	0x080039cd
 8003a8c:	20000228 	.word	0x20000228

08003a90 <_fwalk_sglue>:
 8003a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a94:	4607      	mov	r7, r0
 8003a96:	4688      	mov	r8, r1
 8003a98:	4614      	mov	r4, r2
 8003a9a:	2600      	movs	r6, #0
 8003a9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003aa0:	f1b9 0901 	subs.w	r9, r9, #1
 8003aa4:	d505      	bpl.n	8003ab2 <_fwalk_sglue+0x22>
 8003aa6:	6824      	ldr	r4, [r4, #0]
 8003aa8:	2c00      	cmp	r4, #0
 8003aaa:	d1f7      	bne.n	8003a9c <_fwalk_sglue+0xc>
 8003aac:	4630      	mov	r0, r6
 8003aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ab2:	89ab      	ldrh	r3, [r5, #12]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d907      	bls.n	8003ac8 <_fwalk_sglue+0x38>
 8003ab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003abc:	3301      	adds	r3, #1
 8003abe:	d003      	beq.n	8003ac8 <_fwalk_sglue+0x38>
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	47c0      	blx	r8
 8003ac6:	4306      	orrs	r6, r0
 8003ac8:	3568      	adds	r5, #104	@ 0x68
 8003aca:	e7e9      	b.n	8003aa0 <_fwalk_sglue+0x10>

08003acc <iprintf>:
 8003acc:	b40f      	push	{r0, r1, r2, r3}
 8003ace:	b507      	push	{r0, r1, r2, lr}
 8003ad0:	4906      	ldr	r1, [pc, #24]	@ (8003aec <iprintf+0x20>)
 8003ad2:	ab04      	add	r3, sp, #16
 8003ad4:	6808      	ldr	r0, [r1, #0]
 8003ad6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ada:	6881      	ldr	r1, [r0, #8]
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	f000 f9e9 	bl	8003eb4 <_vfiprintf_r>
 8003ae2:	b003      	add	sp, #12
 8003ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ae8:	b004      	add	sp, #16
 8003aea:	4770      	bx	lr
 8003aec:	20000018 	.word	0x20000018

08003af0 <__sread>:
 8003af0:	b510      	push	{r4, lr}
 8003af2:	460c      	mov	r4, r1
 8003af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af8:	f000 f868 	bl	8003bcc <_read_r>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	bfab      	itete	ge
 8003b00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b02:	89a3      	ldrhlt	r3, [r4, #12]
 8003b04:	181b      	addge	r3, r3, r0
 8003b06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b0a:	bfac      	ite	ge
 8003b0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b0e:	81a3      	strhlt	r3, [r4, #12]
 8003b10:	bd10      	pop	{r4, pc}

08003b12 <__swrite>:
 8003b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b16:	461f      	mov	r7, r3
 8003b18:	898b      	ldrh	r3, [r1, #12]
 8003b1a:	05db      	lsls	r3, r3, #23
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	460c      	mov	r4, r1
 8003b20:	4616      	mov	r6, r2
 8003b22:	d505      	bpl.n	8003b30 <__swrite+0x1e>
 8003b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b28:	2302      	movs	r3, #2
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f000 f83c 	bl	8003ba8 <_lseek_r>
 8003b30:	89a3      	ldrh	r3, [r4, #12]
 8003b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b3a:	81a3      	strh	r3, [r4, #12]
 8003b3c:	4632      	mov	r2, r6
 8003b3e:	463b      	mov	r3, r7
 8003b40:	4628      	mov	r0, r5
 8003b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b46:	f000 b853 	b.w	8003bf0 <_write_r>

08003b4a <__sseek>:
 8003b4a:	b510      	push	{r4, lr}
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b52:	f000 f829 	bl	8003ba8 <_lseek_r>
 8003b56:	1c43      	adds	r3, r0, #1
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	bf15      	itete	ne
 8003b5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b66:	81a3      	strheq	r3, [r4, #12]
 8003b68:	bf18      	it	ne
 8003b6a:	81a3      	strhne	r3, [r4, #12]
 8003b6c:	bd10      	pop	{r4, pc}

08003b6e <__sclose>:
 8003b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b72:	f000 b809 	b.w	8003b88 <_close_r>

08003b76 <memset>:
 8003b76:	4402      	add	r2, r0
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d100      	bne.n	8003b80 <memset+0xa>
 8003b7e:	4770      	bx	lr
 8003b80:	f803 1b01 	strb.w	r1, [r3], #1
 8003b84:	e7f9      	b.n	8003b7a <memset+0x4>
	...

08003b88 <_close_r>:
 8003b88:	b538      	push	{r3, r4, r5, lr}
 8003b8a:	4d06      	ldr	r5, [pc, #24]	@ (8003ba4 <_close_r+0x1c>)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	4604      	mov	r4, r0
 8003b90:	4608      	mov	r0, r1
 8003b92:	602b      	str	r3, [r5, #0]
 8003b94:	f7fd fe58 	bl	8001848 <_close>
 8003b98:	1c43      	adds	r3, r0, #1
 8003b9a:	d102      	bne.n	8003ba2 <_close_r+0x1a>
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	b103      	cbz	r3, 8003ba2 <_close_r+0x1a>
 8003ba0:	6023      	str	r3, [r4, #0]
 8003ba2:	bd38      	pop	{r3, r4, r5, pc}
 8003ba4:	2000022c 	.word	0x2000022c

08003ba8 <_lseek_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4d07      	ldr	r5, [pc, #28]	@ (8003bc8 <_lseek_r+0x20>)
 8003bac:	4604      	mov	r4, r0
 8003bae:	4608      	mov	r0, r1
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	602a      	str	r2, [r5, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f7fd fe6d 	bl	8001896 <_lseek>
 8003bbc:	1c43      	adds	r3, r0, #1
 8003bbe:	d102      	bne.n	8003bc6 <_lseek_r+0x1e>
 8003bc0:	682b      	ldr	r3, [r5, #0]
 8003bc2:	b103      	cbz	r3, 8003bc6 <_lseek_r+0x1e>
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	bd38      	pop	{r3, r4, r5, pc}
 8003bc8:	2000022c 	.word	0x2000022c

08003bcc <_read_r>:
 8003bcc:	b538      	push	{r3, r4, r5, lr}
 8003bce:	4d07      	ldr	r5, [pc, #28]	@ (8003bec <_read_r+0x20>)
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	4608      	mov	r0, r1
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	602a      	str	r2, [r5, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f7fd fdfb 	bl	80017d6 <_read>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d102      	bne.n	8003bea <_read_r+0x1e>
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	b103      	cbz	r3, 8003bea <_read_r+0x1e>
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
 8003bec:	2000022c 	.word	0x2000022c

08003bf0 <_write_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4d07      	ldr	r5, [pc, #28]	@ (8003c10 <_write_r+0x20>)
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	4608      	mov	r0, r1
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	602a      	str	r2, [r5, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f7fd fe06 	bl	8001810 <_write>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_write_r+0x1e>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_write_r+0x1e>
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	2000022c 	.word	0x2000022c

08003c14 <__errno>:
 8003c14:	4b01      	ldr	r3, [pc, #4]	@ (8003c1c <__errno+0x8>)
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000018 	.word	0x20000018

08003c20 <__libc_init_array>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	4d0d      	ldr	r5, [pc, #52]	@ (8003c58 <__libc_init_array+0x38>)
 8003c24:	4c0d      	ldr	r4, [pc, #52]	@ (8003c5c <__libc_init_array+0x3c>)
 8003c26:	1b64      	subs	r4, r4, r5
 8003c28:	10a4      	asrs	r4, r4, #2
 8003c2a:	2600      	movs	r6, #0
 8003c2c:	42a6      	cmp	r6, r4
 8003c2e:	d109      	bne.n	8003c44 <__libc_init_array+0x24>
 8003c30:	4d0b      	ldr	r5, [pc, #44]	@ (8003c60 <__libc_init_array+0x40>)
 8003c32:	4c0c      	ldr	r4, [pc, #48]	@ (8003c64 <__libc_init_array+0x44>)
 8003c34:	f001 f824 	bl	8004c80 <_init>
 8003c38:	1b64      	subs	r4, r4, r5
 8003c3a:	10a4      	asrs	r4, r4, #2
 8003c3c:	2600      	movs	r6, #0
 8003c3e:	42a6      	cmp	r6, r4
 8003c40:	d105      	bne.n	8003c4e <__libc_init_array+0x2e>
 8003c42:	bd70      	pop	{r4, r5, r6, pc}
 8003c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c48:	4798      	blx	r3
 8003c4a:	3601      	adds	r6, #1
 8003c4c:	e7ee      	b.n	8003c2c <__libc_init_array+0xc>
 8003c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c52:	4798      	blx	r3
 8003c54:	3601      	adds	r6, #1
 8003c56:	e7f2      	b.n	8003c3e <__libc_init_array+0x1e>
 8003c58:	08004da0 	.word	0x08004da0
 8003c5c:	08004da0 	.word	0x08004da0
 8003c60:	08004da0 	.word	0x08004da0
 8003c64:	08004da4 	.word	0x08004da4

08003c68 <__retarget_lock_init_recursive>:
 8003c68:	4770      	bx	lr

08003c6a <__retarget_lock_acquire_recursive>:
 8003c6a:	4770      	bx	lr

08003c6c <__retarget_lock_release_recursive>:
 8003c6c:	4770      	bx	lr
	...

08003c70 <_free_r>:
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4605      	mov	r5, r0
 8003c74:	2900      	cmp	r1, #0
 8003c76:	d041      	beq.n	8003cfc <_free_r+0x8c>
 8003c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c7c:	1f0c      	subs	r4, r1, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bfb8      	it	lt
 8003c82:	18e4      	addlt	r4, r4, r3
 8003c84:	f000 f8e0 	bl	8003e48 <__malloc_lock>
 8003c88:	4a1d      	ldr	r2, [pc, #116]	@ (8003d00 <_free_r+0x90>)
 8003c8a:	6813      	ldr	r3, [r2, #0]
 8003c8c:	b933      	cbnz	r3, 8003c9c <_free_r+0x2c>
 8003c8e:	6063      	str	r3, [r4, #4]
 8003c90:	6014      	str	r4, [r2, #0]
 8003c92:	4628      	mov	r0, r5
 8003c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c98:	f000 b8dc 	b.w	8003e54 <__malloc_unlock>
 8003c9c:	42a3      	cmp	r3, r4
 8003c9e:	d908      	bls.n	8003cb2 <_free_r+0x42>
 8003ca0:	6820      	ldr	r0, [r4, #0]
 8003ca2:	1821      	adds	r1, r4, r0
 8003ca4:	428b      	cmp	r3, r1
 8003ca6:	bf01      	itttt	eq
 8003ca8:	6819      	ldreq	r1, [r3, #0]
 8003caa:	685b      	ldreq	r3, [r3, #4]
 8003cac:	1809      	addeq	r1, r1, r0
 8003cae:	6021      	streq	r1, [r4, #0]
 8003cb0:	e7ed      	b.n	8003c8e <_free_r+0x1e>
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	b10b      	cbz	r3, 8003cbc <_free_r+0x4c>
 8003cb8:	42a3      	cmp	r3, r4
 8003cba:	d9fa      	bls.n	8003cb2 <_free_r+0x42>
 8003cbc:	6811      	ldr	r1, [r2, #0]
 8003cbe:	1850      	adds	r0, r2, r1
 8003cc0:	42a0      	cmp	r0, r4
 8003cc2:	d10b      	bne.n	8003cdc <_free_r+0x6c>
 8003cc4:	6820      	ldr	r0, [r4, #0]
 8003cc6:	4401      	add	r1, r0
 8003cc8:	1850      	adds	r0, r2, r1
 8003cca:	4283      	cmp	r3, r0
 8003ccc:	6011      	str	r1, [r2, #0]
 8003cce:	d1e0      	bne.n	8003c92 <_free_r+0x22>
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	6053      	str	r3, [r2, #4]
 8003cd6:	4408      	add	r0, r1
 8003cd8:	6010      	str	r0, [r2, #0]
 8003cda:	e7da      	b.n	8003c92 <_free_r+0x22>
 8003cdc:	d902      	bls.n	8003ce4 <_free_r+0x74>
 8003cde:	230c      	movs	r3, #12
 8003ce0:	602b      	str	r3, [r5, #0]
 8003ce2:	e7d6      	b.n	8003c92 <_free_r+0x22>
 8003ce4:	6820      	ldr	r0, [r4, #0]
 8003ce6:	1821      	adds	r1, r4, r0
 8003ce8:	428b      	cmp	r3, r1
 8003cea:	bf04      	itt	eq
 8003cec:	6819      	ldreq	r1, [r3, #0]
 8003cee:	685b      	ldreq	r3, [r3, #4]
 8003cf0:	6063      	str	r3, [r4, #4]
 8003cf2:	bf04      	itt	eq
 8003cf4:	1809      	addeq	r1, r1, r0
 8003cf6:	6021      	streq	r1, [r4, #0]
 8003cf8:	6054      	str	r4, [r2, #4]
 8003cfa:	e7ca      	b.n	8003c92 <_free_r+0x22>
 8003cfc:	bd38      	pop	{r3, r4, r5, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000238 	.word	0x20000238

08003d04 <sbrk_aligned>:
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	4e0f      	ldr	r6, [pc, #60]	@ (8003d44 <sbrk_aligned+0x40>)
 8003d08:	460c      	mov	r4, r1
 8003d0a:	6831      	ldr	r1, [r6, #0]
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	b911      	cbnz	r1, 8003d16 <sbrk_aligned+0x12>
 8003d10:	f000 fcb6 	bl	8004680 <_sbrk_r>
 8003d14:	6030      	str	r0, [r6, #0]
 8003d16:	4621      	mov	r1, r4
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f000 fcb1 	bl	8004680 <_sbrk_r>
 8003d1e:	1c43      	adds	r3, r0, #1
 8003d20:	d103      	bne.n	8003d2a <sbrk_aligned+0x26>
 8003d22:	f04f 34ff 	mov.w	r4, #4294967295
 8003d26:	4620      	mov	r0, r4
 8003d28:	bd70      	pop	{r4, r5, r6, pc}
 8003d2a:	1cc4      	adds	r4, r0, #3
 8003d2c:	f024 0403 	bic.w	r4, r4, #3
 8003d30:	42a0      	cmp	r0, r4
 8003d32:	d0f8      	beq.n	8003d26 <sbrk_aligned+0x22>
 8003d34:	1a21      	subs	r1, r4, r0
 8003d36:	4628      	mov	r0, r5
 8003d38:	f000 fca2 	bl	8004680 <_sbrk_r>
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d1f2      	bne.n	8003d26 <sbrk_aligned+0x22>
 8003d40:	e7ef      	b.n	8003d22 <sbrk_aligned+0x1e>
 8003d42:	bf00      	nop
 8003d44:	20000234 	.word	0x20000234

08003d48 <_malloc_r>:
 8003d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d4c:	1ccd      	adds	r5, r1, #3
 8003d4e:	f025 0503 	bic.w	r5, r5, #3
 8003d52:	3508      	adds	r5, #8
 8003d54:	2d0c      	cmp	r5, #12
 8003d56:	bf38      	it	cc
 8003d58:	250c      	movcc	r5, #12
 8003d5a:	2d00      	cmp	r5, #0
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	db01      	blt.n	8003d64 <_malloc_r+0x1c>
 8003d60:	42a9      	cmp	r1, r5
 8003d62:	d904      	bls.n	8003d6e <_malloc_r+0x26>
 8003d64:	230c      	movs	r3, #12
 8003d66:	6033      	str	r3, [r6, #0]
 8003d68:	2000      	movs	r0, #0
 8003d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e44 <_malloc_r+0xfc>
 8003d72:	f000 f869 	bl	8003e48 <__malloc_lock>
 8003d76:	f8d8 3000 	ldr.w	r3, [r8]
 8003d7a:	461c      	mov	r4, r3
 8003d7c:	bb44      	cbnz	r4, 8003dd0 <_malloc_r+0x88>
 8003d7e:	4629      	mov	r1, r5
 8003d80:	4630      	mov	r0, r6
 8003d82:	f7ff ffbf 	bl	8003d04 <sbrk_aligned>
 8003d86:	1c43      	adds	r3, r0, #1
 8003d88:	4604      	mov	r4, r0
 8003d8a:	d158      	bne.n	8003e3e <_malloc_r+0xf6>
 8003d8c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d90:	4627      	mov	r7, r4
 8003d92:	2f00      	cmp	r7, #0
 8003d94:	d143      	bne.n	8003e1e <_malloc_r+0xd6>
 8003d96:	2c00      	cmp	r4, #0
 8003d98:	d04b      	beq.n	8003e32 <_malloc_r+0xea>
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	4639      	mov	r1, r7
 8003d9e:	4630      	mov	r0, r6
 8003da0:	eb04 0903 	add.w	r9, r4, r3
 8003da4:	f000 fc6c 	bl	8004680 <_sbrk_r>
 8003da8:	4581      	cmp	r9, r0
 8003daa:	d142      	bne.n	8003e32 <_malloc_r+0xea>
 8003dac:	6821      	ldr	r1, [r4, #0]
 8003dae:	1a6d      	subs	r5, r5, r1
 8003db0:	4629      	mov	r1, r5
 8003db2:	4630      	mov	r0, r6
 8003db4:	f7ff ffa6 	bl	8003d04 <sbrk_aligned>
 8003db8:	3001      	adds	r0, #1
 8003dba:	d03a      	beq.n	8003e32 <_malloc_r+0xea>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	442b      	add	r3, r5
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	bb62      	cbnz	r2, 8003e24 <_malloc_r+0xdc>
 8003dca:	f8c8 7000 	str.w	r7, [r8]
 8003dce:	e00f      	b.n	8003df0 <_malloc_r+0xa8>
 8003dd0:	6822      	ldr	r2, [r4, #0]
 8003dd2:	1b52      	subs	r2, r2, r5
 8003dd4:	d420      	bmi.n	8003e18 <_malloc_r+0xd0>
 8003dd6:	2a0b      	cmp	r2, #11
 8003dd8:	d917      	bls.n	8003e0a <_malloc_r+0xc2>
 8003dda:	1961      	adds	r1, r4, r5
 8003ddc:	42a3      	cmp	r3, r4
 8003dde:	6025      	str	r5, [r4, #0]
 8003de0:	bf18      	it	ne
 8003de2:	6059      	strne	r1, [r3, #4]
 8003de4:	6863      	ldr	r3, [r4, #4]
 8003de6:	bf08      	it	eq
 8003de8:	f8c8 1000 	streq.w	r1, [r8]
 8003dec:	5162      	str	r2, [r4, r5]
 8003dee:	604b      	str	r3, [r1, #4]
 8003df0:	4630      	mov	r0, r6
 8003df2:	f000 f82f 	bl	8003e54 <__malloc_unlock>
 8003df6:	f104 000b 	add.w	r0, r4, #11
 8003dfa:	1d23      	adds	r3, r4, #4
 8003dfc:	f020 0007 	bic.w	r0, r0, #7
 8003e00:	1ac2      	subs	r2, r0, r3
 8003e02:	bf1c      	itt	ne
 8003e04:	1a1b      	subne	r3, r3, r0
 8003e06:	50a3      	strne	r3, [r4, r2]
 8003e08:	e7af      	b.n	8003d6a <_malloc_r+0x22>
 8003e0a:	6862      	ldr	r2, [r4, #4]
 8003e0c:	42a3      	cmp	r3, r4
 8003e0e:	bf0c      	ite	eq
 8003e10:	f8c8 2000 	streq.w	r2, [r8]
 8003e14:	605a      	strne	r2, [r3, #4]
 8003e16:	e7eb      	b.n	8003df0 <_malloc_r+0xa8>
 8003e18:	4623      	mov	r3, r4
 8003e1a:	6864      	ldr	r4, [r4, #4]
 8003e1c:	e7ae      	b.n	8003d7c <_malloc_r+0x34>
 8003e1e:	463c      	mov	r4, r7
 8003e20:	687f      	ldr	r7, [r7, #4]
 8003e22:	e7b6      	b.n	8003d92 <_malloc_r+0x4a>
 8003e24:	461a      	mov	r2, r3
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	42a3      	cmp	r3, r4
 8003e2a:	d1fb      	bne.n	8003e24 <_malloc_r+0xdc>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6053      	str	r3, [r2, #4]
 8003e30:	e7de      	b.n	8003df0 <_malloc_r+0xa8>
 8003e32:	230c      	movs	r3, #12
 8003e34:	6033      	str	r3, [r6, #0]
 8003e36:	4630      	mov	r0, r6
 8003e38:	f000 f80c 	bl	8003e54 <__malloc_unlock>
 8003e3c:	e794      	b.n	8003d68 <_malloc_r+0x20>
 8003e3e:	6005      	str	r5, [r0, #0]
 8003e40:	e7d6      	b.n	8003df0 <_malloc_r+0xa8>
 8003e42:	bf00      	nop
 8003e44:	20000238 	.word	0x20000238

08003e48 <__malloc_lock>:
 8003e48:	4801      	ldr	r0, [pc, #4]	@ (8003e50 <__malloc_lock+0x8>)
 8003e4a:	f7ff bf0e 	b.w	8003c6a <__retarget_lock_acquire_recursive>
 8003e4e:	bf00      	nop
 8003e50:	20000230 	.word	0x20000230

08003e54 <__malloc_unlock>:
 8003e54:	4801      	ldr	r0, [pc, #4]	@ (8003e5c <__malloc_unlock+0x8>)
 8003e56:	f7ff bf09 	b.w	8003c6c <__retarget_lock_release_recursive>
 8003e5a:	bf00      	nop
 8003e5c:	20000230 	.word	0x20000230

08003e60 <__sfputc_r>:
 8003e60:	6893      	ldr	r3, [r2, #8]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	b410      	push	{r4}
 8003e68:	6093      	str	r3, [r2, #8]
 8003e6a:	da08      	bge.n	8003e7e <__sfputc_r+0x1e>
 8003e6c:	6994      	ldr	r4, [r2, #24]
 8003e6e:	42a3      	cmp	r3, r4
 8003e70:	db01      	blt.n	8003e76 <__sfputc_r+0x16>
 8003e72:	290a      	cmp	r1, #10
 8003e74:	d103      	bne.n	8003e7e <__sfputc_r+0x1e>
 8003e76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e7a:	f000 bb6d 	b.w	8004558 <__swbuf_r>
 8003e7e:	6813      	ldr	r3, [r2, #0]
 8003e80:	1c58      	adds	r0, r3, #1
 8003e82:	6010      	str	r0, [r2, #0]
 8003e84:	7019      	strb	r1, [r3, #0]
 8003e86:	4608      	mov	r0, r1
 8003e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <__sfputs_r>:
 8003e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e90:	4606      	mov	r6, r0
 8003e92:	460f      	mov	r7, r1
 8003e94:	4614      	mov	r4, r2
 8003e96:	18d5      	adds	r5, r2, r3
 8003e98:	42ac      	cmp	r4, r5
 8003e9a:	d101      	bne.n	8003ea0 <__sfputs_r+0x12>
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	e007      	b.n	8003eb0 <__sfputs_r+0x22>
 8003ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea4:	463a      	mov	r2, r7
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f7ff ffda 	bl	8003e60 <__sfputc_r>
 8003eac:	1c43      	adds	r3, r0, #1
 8003eae:	d1f3      	bne.n	8003e98 <__sfputs_r+0xa>
 8003eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003eb4 <_vfiprintf_r>:
 8003eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb8:	460d      	mov	r5, r1
 8003eba:	b09d      	sub	sp, #116	@ 0x74
 8003ebc:	4614      	mov	r4, r2
 8003ebe:	4698      	mov	r8, r3
 8003ec0:	4606      	mov	r6, r0
 8003ec2:	b118      	cbz	r0, 8003ecc <_vfiprintf_r+0x18>
 8003ec4:	6a03      	ldr	r3, [r0, #32]
 8003ec6:	b90b      	cbnz	r3, 8003ecc <_vfiprintf_r+0x18>
 8003ec8:	f7ff fdca 	bl	8003a60 <__sinit>
 8003ecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ece:	07d9      	lsls	r1, r3, #31
 8003ed0:	d405      	bmi.n	8003ede <_vfiprintf_r+0x2a>
 8003ed2:	89ab      	ldrh	r3, [r5, #12]
 8003ed4:	059a      	lsls	r2, r3, #22
 8003ed6:	d402      	bmi.n	8003ede <_vfiprintf_r+0x2a>
 8003ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003eda:	f7ff fec6 	bl	8003c6a <__retarget_lock_acquire_recursive>
 8003ede:	89ab      	ldrh	r3, [r5, #12]
 8003ee0:	071b      	lsls	r3, r3, #28
 8003ee2:	d501      	bpl.n	8003ee8 <_vfiprintf_r+0x34>
 8003ee4:	692b      	ldr	r3, [r5, #16]
 8003ee6:	b99b      	cbnz	r3, 8003f10 <_vfiprintf_r+0x5c>
 8003ee8:	4629      	mov	r1, r5
 8003eea:	4630      	mov	r0, r6
 8003eec:	f000 fb72 	bl	80045d4 <__swsetup_r>
 8003ef0:	b170      	cbz	r0, 8003f10 <_vfiprintf_r+0x5c>
 8003ef2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ef4:	07dc      	lsls	r4, r3, #31
 8003ef6:	d504      	bpl.n	8003f02 <_vfiprintf_r+0x4e>
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	b01d      	add	sp, #116	@ 0x74
 8003efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f02:	89ab      	ldrh	r3, [r5, #12]
 8003f04:	0598      	lsls	r0, r3, #22
 8003f06:	d4f7      	bmi.n	8003ef8 <_vfiprintf_r+0x44>
 8003f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f0a:	f7ff feaf 	bl	8003c6c <__retarget_lock_release_recursive>
 8003f0e:	e7f3      	b.n	8003ef8 <_vfiprintf_r+0x44>
 8003f10:	2300      	movs	r3, #0
 8003f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f14:	2320      	movs	r3, #32
 8003f16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f1e:	2330      	movs	r3, #48	@ 0x30
 8003f20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80040d0 <_vfiprintf_r+0x21c>
 8003f24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f28:	f04f 0901 	mov.w	r9, #1
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	469a      	mov	sl, r3
 8003f30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f34:	b10a      	cbz	r2, 8003f3a <_vfiprintf_r+0x86>
 8003f36:	2a25      	cmp	r2, #37	@ 0x25
 8003f38:	d1f9      	bne.n	8003f2e <_vfiprintf_r+0x7a>
 8003f3a:	ebba 0b04 	subs.w	fp, sl, r4
 8003f3e:	d00b      	beq.n	8003f58 <_vfiprintf_r+0xa4>
 8003f40:	465b      	mov	r3, fp
 8003f42:	4622      	mov	r2, r4
 8003f44:	4629      	mov	r1, r5
 8003f46:	4630      	mov	r0, r6
 8003f48:	f7ff ffa1 	bl	8003e8e <__sfputs_r>
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	f000 80a7 	beq.w	80040a0 <_vfiprintf_r+0x1ec>
 8003f52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f54:	445a      	add	r2, fp
 8003f56:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f58:	f89a 3000 	ldrb.w	r3, [sl]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 809f 	beq.w	80040a0 <_vfiprintf_r+0x1ec>
 8003f62:	2300      	movs	r3, #0
 8003f64:	f04f 32ff 	mov.w	r2, #4294967295
 8003f68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f6c:	f10a 0a01 	add.w	sl, sl, #1
 8003f70:	9304      	str	r3, [sp, #16]
 8003f72:	9307      	str	r3, [sp, #28]
 8003f74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f78:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f7a:	4654      	mov	r4, sl
 8003f7c:	2205      	movs	r2, #5
 8003f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f82:	4853      	ldr	r0, [pc, #332]	@ (80040d0 <_vfiprintf_r+0x21c>)
 8003f84:	f7fc f924 	bl	80001d0 <memchr>
 8003f88:	9a04      	ldr	r2, [sp, #16]
 8003f8a:	b9d8      	cbnz	r0, 8003fc4 <_vfiprintf_r+0x110>
 8003f8c:	06d1      	lsls	r1, r2, #27
 8003f8e:	bf44      	itt	mi
 8003f90:	2320      	movmi	r3, #32
 8003f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f96:	0713      	lsls	r3, r2, #28
 8003f98:	bf44      	itt	mi
 8003f9a:	232b      	movmi	r3, #43	@ 0x2b
 8003f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fa6:	d015      	beq.n	8003fd4 <_vfiprintf_r+0x120>
 8003fa8:	9a07      	ldr	r2, [sp, #28]
 8003faa:	4654      	mov	r4, sl
 8003fac:	2000      	movs	r0, #0
 8003fae:	f04f 0c0a 	mov.w	ip, #10
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fb8:	3b30      	subs	r3, #48	@ 0x30
 8003fba:	2b09      	cmp	r3, #9
 8003fbc:	d94b      	bls.n	8004056 <_vfiprintf_r+0x1a2>
 8003fbe:	b1b0      	cbz	r0, 8003fee <_vfiprintf_r+0x13a>
 8003fc0:	9207      	str	r2, [sp, #28]
 8003fc2:	e014      	b.n	8003fee <_vfiprintf_r+0x13a>
 8003fc4:	eba0 0308 	sub.w	r3, r0, r8
 8003fc8:	fa09 f303 	lsl.w	r3, r9, r3
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	9304      	str	r3, [sp, #16]
 8003fd0:	46a2      	mov	sl, r4
 8003fd2:	e7d2      	b.n	8003f7a <_vfiprintf_r+0xc6>
 8003fd4:	9b03      	ldr	r3, [sp, #12]
 8003fd6:	1d19      	adds	r1, r3, #4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	9103      	str	r1, [sp, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bfbb      	ittet	lt
 8003fe0:	425b      	neglt	r3, r3
 8003fe2:	f042 0202 	orrlt.w	r2, r2, #2
 8003fe6:	9307      	strge	r3, [sp, #28]
 8003fe8:	9307      	strlt	r3, [sp, #28]
 8003fea:	bfb8      	it	lt
 8003fec:	9204      	strlt	r2, [sp, #16]
 8003fee:	7823      	ldrb	r3, [r4, #0]
 8003ff0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ff2:	d10a      	bne.n	800400a <_vfiprintf_r+0x156>
 8003ff4:	7863      	ldrb	r3, [r4, #1]
 8003ff6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ff8:	d132      	bne.n	8004060 <_vfiprintf_r+0x1ac>
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	1d1a      	adds	r2, r3, #4
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	9203      	str	r2, [sp, #12]
 8004002:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004006:	3402      	adds	r4, #2
 8004008:	9305      	str	r3, [sp, #20]
 800400a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80040e0 <_vfiprintf_r+0x22c>
 800400e:	7821      	ldrb	r1, [r4, #0]
 8004010:	2203      	movs	r2, #3
 8004012:	4650      	mov	r0, sl
 8004014:	f7fc f8dc 	bl	80001d0 <memchr>
 8004018:	b138      	cbz	r0, 800402a <_vfiprintf_r+0x176>
 800401a:	9b04      	ldr	r3, [sp, #16]
 800401c:	eba0 000a 	sub.w	r0, r0, sl
 8004020:	2240      	movs	r2, #64	@ 0x40
 8004022:	4082      	lsls	r2, r0
 8004024:	4313      	orrs	r3, r2
 8004026:	3401      	adds	r4, #1
 8004028:	9304      	str	r3, [sp, #16]
 800402a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800402e:	4829      	ldr	r0, [pc, #164]	@ (80040d4 <_vfiprintf_r+0x220>)
 8004030:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004034:	2206      	movs	r2, #6
 8004036:	f7fc f8cb 	bl	80001d0 <memchr>
 800403a:	2800      	cmp	r0, #0
 800403c:	d03f      	beq.n	80040be <_vfiprintf_r+0x20a>
 800403e:	4b26      	ldr	r3, [pc, #152]	@ (80040d8 <_vfiprintf_r+0x224>)
 8004040:	bb1b      	cbnz	r3, 800408a <_vfiprintf_r+0x1d6>
 8004042:	9b03      	ldr	r3, [sp, #12]
 8004044:	3307      	adds	r3, #7
 8004046:	f023 0307 	bic.w	r3, r3, #7
 800404a:	3308      	adds	r3, #8
 800404c:	9303      	str	r3, [sp, #12]
 800404e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004050:	443b      	add	r3, r7
 8004052:	9309      	str	r3, [sp, #36]	@ 0x24
 8004054:	e76a      	b.n	8003f2c <_vfiprintf_r+0x78>
 8004056:	fb0c 3202 	mla	r2, ip, r2, r3
 800405a:	460c      	mov	r4, r1
 800405c:	2001      	movs	r0, #1
 800405e:	e7a8      	b.n	8003fb2 <_vfiprintf_r+0xfe>
 8004060:	2300      	movs	r3, #0
 8004062:	3401      	adds	r4, #1
 8004064:	9305      	str	r3, [sp, #20]
 8004066:	4619      	mov	r1, r3
 8004068:	f04f 0c0a 	mov.w	ip, #10
 800406c:	4620      	mov	r0, r4
 800406e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004072:	3a30      	subs	r2, #48	@ 0x30
 8004074:	2a09      	cmp	r2, #9
 8004076:	d903      	bls.n	8004080 <_vfiprintf_r+0x1cc>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0c6      	beq.n	800400a <_vfiprintf_r+0x156>
 800407c:	9105      	str	r1, [sp, #20]
 800407e:	e7c4      	b.n	800400a <_vfiprintf_r+0x156>
 8004080:	fb0c 2101 	mla	r1, ip, r1, r2
 8004084:	4604      	mov	r4, r0
 8004086:	2301      	movs	r3, #1
 8004088:	e7f0      	b.n	800406c <_vfiprintf_r+0x1b8>
 800408a:	ab03      	add	r3, sp, #12
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	462a      	mov	r2, r5
 8004090:	4b12      	ldr	r3, [pc, #72]	@ (80040dc <_vfiprintf_r+0x228>)
 8004092:	a904      	add	r1, sp, #16
 8004094:	4630      	mov	r0, r6
 8004096:	f3af 8000 	nop.w
 800409a:	4607      	mov	r7, r0
 800409c:	1c78      	adds	r0, r7, #1
 800409e:	d1d6      	bne.n	800404e <_vfiprintf_r+0x19a>
 80040a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040a2:	07d9      	lsls	r1, r3, #31
 80040a4:	d405      	bmi.n	80040b2 <_vfiprintf_r+0x1fe>
 80040a6:	89ab      	ldrh	r3, [r5, #12]
 80040a8:	059a      	lsls	r2, r3, #22
 80040aa:	d402      	bmi.n	80040b2 <_vfiprintf_r+0x1fe>
 80040ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040ae:	f7ff fddd 	bl	8003c6c <__retarget_lock_release_recursive>
 80040b2:	89ab      	ldrh	r3, [r5, #12]
 80040b4:	065b      	lsls	r3, r3, #25
 80040b6:	f53f af1f 	bmi.w	8003ef8 <_vfiprintf_r+0x44>
 80040ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040bc:	e71e      	b.n	8003efc <_vfiprintf_r+0x48>
 80040be:	ab03      	add	r3, sp, #12
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	462a      	mov	r2, r5
 80040c4:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <_vfiprintf_r+0x228>)
 80040c6:	a904      	add	r1, sp, #16
 80040c8:	4630      	mov	r0, r6
 80040ca:	f000 f879 	bl	80041c0 <_printf_i>
 80040ce:	e7e4      	b.n	800409a <_vfiprintf_r+0x1e6>
 80040d0:	08004cf4 	.word	0x08004cf4
 80040d4:	08004cfe 	.word	0x08004cfe
 80040d8:	00000000 	.word	0x00000000
 80040dc:	08003e8f 	.word	0x08003e8f
 80040e0:	08004cfa 	.word	0x08004cfa

080040e4 <_printf_common>:
 80040e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e8:	4616      	mov	r6, r2
 80040ea:	4698      	mov	r8, r3
 80040ec:	688a      	ldr	r2, [r1, #8]
 80040ee:	690b      	ldr	r3, [r1, #16]
 80040f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040f4:	4293      	cmp	r3, r2
 80040f6:	bfb8      	it	lt
 80040f8:	4613      	movlt	r3, r2
 80040fa:	6033      	str	r3, [r6, #0]
 80040fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004100:	4607      	mov	r7, r0
 8004102:	460c      	mov	r4, r1
 8004104:	b10a      	cbz	r2, 800410a <_printf_common+0x26>
 8004106:	3301      	adds	r3, #1
 8004108:	6033      	str	r3, [r6, #0]
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	0699      	lsls	r1, r3, #26
 800410e:	bf42      	ittt	mi
 8004110:	6833      	ldrmi	r3, [r6, #0]
 8004112:	3302      	addmi	r3, #2
 8004114:	6033      	strmi	r3, [r6, #0]
 8004116:	6825      	ldr	r5, [r4, #0]
 8004118:	f015 0506 	ands.w	r5, r5, #6
 800411c:	d106      	bne.n	800412c <_printf_common+0x48>
 800411e:	f104 0a19 	add.w	sl, r4, #25
 8004122:	68e3      	ldr	r3, [r4, #12]
 8004124:	6832      	ldr	r2, [r6, #0]
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	42ab      	cmp	r3, r5
 800412a:	dc26      	bgt.n	800417a <_printf_common+0x96>
 800412c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004130:	6822      	ldr	r2, [r4, #0]
 8004132:	3b00      	subs	r3, #0
 8004134:	bf18      	it	ne
 8004136:	2301      	movne	r3, #1
 8004138:	0692      	lsls	r2, r2, #26
 800413a:	d42b      	bmi.n	8004194 <_printf_common+0xb0>
 800413c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004140:	4641      	mov	r1, r8
 8004142:	4638      	mov	r0, r7
 8004144:	47c8      	blx	r9
 8004146:	3001      	adds	r0, #1
 8004148:	d01e      	beq.n	8004188 <_printf_common+0xa4>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	6922      	ldr	r2, [r4, #16]
 800414e:	f003 0306 	and.w	r3, r3, #6
 8004152:	2b04      	cmp	r3, #4
 8004154:	bf02      	ittt	eq
 8004156:	68e5      	ldreq	r5, [r4, #12]
 8004158:	6833      	ldreq	r3, [r6, #0]
 800415a:	1aed      	subeq	r5, r5, r3
 800415c:	68a3      	ldr	r3, [r4, #8]
 800415e:	bf0c      	ite	eq
 8004160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004164:	2500      	movne	r5, #0
 8004166:	4293      	cmp	r3, r2
 8004168:	bfc4      	itt	gt
 800416a:	1a9b      	subgt	r3, r3, r2
 800416c:	18ed      	addgt	r5, r5, r3
 800416e:	2600      	movs	r6, #0
 8004170:	341a      	adds	r4, #26
 8004172:	42b5      	cmp	r5, r6
 8004174:	d11a      	bne.n	80041ac <_printf_common+0xc8>
 8004176:	2000      	movs	r0, #0
 8004178:	e008      	b.n	800418c <_printf_common+0xa8>
 800417a:	2301      	movs	r3, #1
 800417c:	4652      	mov	r2, sl
 800417e:	4641      	mov	r1, r8
 8004180:	4638      	mov	r0, r7
 8004182:	47c8      	blx	r9
 8004184:	3001      	adds	r0, #1
 8004186:	d103      	bne.n	8004190 <_printf_common+0xac>
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004190:	3501      	adds	r5, #1
 8004192:	e7c6      	b.n	8004122 <_printf_common+0x3e>
 8004194:	18e1      	adds	r1, r4, r3
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	2030      	movs	r0, #48	@ 0x30
 800419a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800419e:	4422      	add	r2, r4
 80041a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041a8:	3302      	adds	r3, #2
 80041aa:	e7c7      	b.n	800413c <_printf_common+0x58>
 80041ac:	2301      	movs	r3, #1
 80041ae:	4622      	mov	r2, r4
 80041b0:	4641      	mov	r1, r8
 80041b2:	4638      	mov	r0, r7
 80041b4:	47c8      	blx	r9
 80041b6:	3001      	adds	r0, #1
 80041b8:	d0e6      	beq.n	8004188 <_printf_common+0xa4>
 80041ba:	3601      	adds	r6, #1
 80041bc:	e7d9      	b.n	8004172 <_printf_common+0x8e>
	...

080041c0 <_printf_i>:
 80041c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	7e0f      	ldrb	r7, [r1, #24]
 80041c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041c8:	2f78      	cmp	r7, #120	@ 0x78
 80041ca:	4691      	mov	r9, r2
 80041cc:	4680      	mov	r8, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	469a      	mov	sl, r3
 80041d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041d6:	d807      	bhi.n	80041e8 <_printf_i+0x28>
 80041d8:	2f62      	cmp	r7, #98	@ 0x62
 80041da:	d80a      	bhi.n	80041f2 <_printf_i+0x32>
 80041dc:	2f00      	cmp	r7, #0
 80041de:	f000 80d2 	beq.w	8004386 <_printf_i+0x1c6>
 80041e2:	2f58      	cmp	r7, #88	@ 0x58
 80041e4:	f000 80b9 	beq.w	800435a <_printf_i+0x19a>
 80041e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041f0:	e03a      	b.n	8004268 <_printf_i+0xa8>
 80041f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041f6:	2b15      	cmp	r3, #21
 80041f8:	d8f6      	bhi.n	80041e8 <_printf_i+0x28>
 80041fa:	a101      	add	r1, pc, #4	@ (adr r1, 8004200 <_printf_i+0x40>)
 80041fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004200:	08004259 	.word	0x08004259
 8004204:	0800426d 	.word	0x0800426d
 8004208:	080041e9 	.word	0x080041e9
 800420c:	080041e9 	.word	0x080041e9
 8004210:	080041e9 	.word	0x080041e9
 8004214:	080041e9 	.word	0x080041e9
 8004218:	0800426d 	.word	0x0800426d
 800421c:	080041e9 	.word	0x080041e9
 8004220:	080041e9 	.word	0x080041e9
 8004224:	080041e9 	.word	0x080041e9
 8004228:	080041e9 	.word	0x080041e9
 800422c:	0800436d 	.word	0x0800436d
 8004230:	08004297 	.word	0x08004297
 8004234:	08004327 	.word	0x08004327
 8004238:	080041e9 	.word	0x080041e9
 800423c:	080041e9 	.word	0x080041e9
 8004240:	0800438f 	.word	0x0800438f
 8004244:	080041e9 	.word	0x080041e9
 8004248:	08004297 	.word	0x08004297
 800424c:	080041e9 	.word	0x080041e9
 8004250:	080041e9 	.word	0x080041e9
 8004254:	0800432f 	.word	0x0800432f
 8004258:	6833      	ldr	r3, [r6, #0]
 800425a:	1d1a      	adds	r2, r3, #4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6032      	str	r2, [r6, #0]
 8004260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004264:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004268:	2301      	movs	r3, #1
 800426a:	e09d      	b.n	80043a8 <_printf_i+0x1e8>
 800426c:	6833      	ldr	r3, [r6, #0]
 800426e:	6820      	ldr	r0, [r4, #0]
 8004270:	1d19      	adds	r1, r3, #4
 8004272:	6031      	str	r1, [r6, #0]
 8004274:	0606      	lsls	r6, r0, #24
 8004276:	d501      	bpl.n	800427c <_printf_i+0xbc>
 8004278:	681d      	ldr	r5, [r3, #0]
 800427a:	e003      	b.n	8004284 <_printf_i+0xc4>
 800427c:	0645      	lsls	r5, r0, #25
 800427e:	d5fb      	bpl.n	8004278 <_printf_i+0xb8>
 8004280:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004284:	2d00      	cmp	r5, #0
 8004286:	da03      	bge.n	8004290 <_printf_i+0xd0>
 8004288:	232d      	movs	r3, #45	@ 0x2d
 800428a:	426d      	negs	r5, r5
 800428c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004290:	4859      	ldr	r0, [pc, #356]	@ (80043f8 <_printf_i+0x238>)
 8004292:	230a      	movs	r3, #10
 8004294:	e011      	b.n	80042ba <_printf_i+0xfa>
 8004296:	6821      	ldr	r1, [r4, #0]
 8004298:	6833      	ldr	r3, [r6, #0]
 800429a:	0608      	lsls	r0, r1, #24
 800429c:	f853 5b04 	ldr.w	r5, [r3], #4
 80042a0:	d402      	bmi.n	80042a8 <_printf_i+0xe8>
 80042a2:	0649      	lsls	r1, r1, #25
 80042a4:	bf48      	it	mi
 80042a6:	b2ad      	uxthmi	r5, r5
 80042a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80042aa:	4853      	ldr	r0, [pc, #332]	@ (80043f8 <_printf_i+0x238>)
 80042ac:	6033      	str	r3, [r6, #0]
 80042ae:	bf14      	ite	ne
 80042b0:	230a      	movne	r3, #10
 80042b2:	2308      	moveq	r3, #8
 80042b4:	2100      	movs	r1, #0
 80042b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042ba:	6866      	ldr	r6, [r4, #4]
 80042bc:	60a6      	str	r6, [r4, #8]
 80042be:	2e00      	cmp	r6, #0
 80042c0:	bfa2      	ittt	ge
 80042c2:	6821      	ldrge	r1, [r4, #0]
 80042c4:	f021 0104 	bicge.w	r1, r1, #4
 80042c8:	6021      	strge	r1, [r4, #0]
 80042ca:	b90d      	cbnz	r5, 80042d0 <_printf_i+0x110>
 80042cc:	2e00      	cmp	r6, #0
 80042ce:	d04b      	beq.n	8004368 <_printf_i+0x1a8>
 80042d0:	4616      	mov	r6, r2
 80042d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80042d6:	fb03 5711 	mls	r7, r3, r1, r5
 80042da:	5dc7      	ldrb	r7, [r0, r7]
 80042dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042e0:	462f      	mov	r7, r5
 80042e2:	42bb      	cmp	r3, r7
 80042e4:	460d      	mov	r5, r1
 80042e6:	d9f4      	bls.n	80042d2 <_printf_i+0x112>
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d10b      	bne.n	8004304 <_printf_i+0x144>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	07df      	lsls	r7, r3, #31
 80042f0:	d508      	bpl.n	8004304 <_printf_i+0x144>
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	6861      	ldr	r1, [r4, #4]
 80042f6:	4299      	cmp	r1, r3
 80042f8:	bfde      	ittt	le
 80042fa:	2330      	movle	r3, #48	@ 0x30
 80042fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004300:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004304:	1b92      	subs	r2, r2, r6
 8004306:	6122      	str	r2, [r4, #16]
 8004308:	f8cd a000 	str.w	sl, [sp]
 800430c:	464b      	mov	r3, r9
 800430e:	aa03      	add	r2, sp, #12
 8004310:	4621      	mov	r1, r4
 8004312:	4640      	mov	r0, r8
 8004314:	f7ff fee6 	bl	80040e4 <_printf_common>
 8004318:	3001      	adds	r0, #1
 800431a:	d14a      	bne.n	80043b2 <_printf_i+0x1f2>
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	b004      	add	sp, #16
 8004322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	f043 0320 	orr.w	r3, r3, #32
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	4833      	ldr	r0, [pc, #204]	@ (80043fc <_printf_i+0x23c>)
 8004330:	2778      	movs	r7, #120	@ 0x78
 8004332:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	6831      	ldr	r1, [r6, #0]
 800433a:	061f      	lsls	r7, r3, #24
 800433c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004340:	d402      	bmi.n	8004348 <_printf_i+0x188>
 8004342:	065f      	lsls	r7, r3, #25
 8004344:	bf48      	it	mi
 8004346:	b2ad      	uxthmi	r5, r5
 8004348:	6031      	str	r1, [r6, #0]
 800434a:	07d9      	lsls	r1, r3, #31
 800434c:	bf44      	itt	mi
 800434e:	f043 0320 	orrmi.w	r3, r3, #32
 8004352:	6023      	strmi	r3, [r4, #0]
 8004354:	b11d      	cbz	r5, 800435e <_printf_i+0x19e>
 8004356:	2310      	movs	r3, #16
 8004358:	e7ac      	b.n	80042b4 <_printf_i+0xf4>
 800435a:	4827      	ldr	r0, [pc, #156]	@ (80043f8 <_printf_i+0x238>)
 800435c:	e7e9      	b.n	8004332 <_printf_i+0x172>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	f023 0320 	bic.w	r3, r3, #32
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	e7f6      	b.n	8004356 <_printf_i+0x196>
 8004368:	4616      	mov	r6, r2
 800436a:	e7bd      	b.n	80042e8 <_printf_i+0x128>
 800436c:	6833      	ldr	r3, [r6, #0]
 800436e:	6825      	ldr	r5, [r4, #0]
 8004370:	6961      	ldr	r1, [r4, #20]
 8004372:	1d18      	adds	r0, r3, #4
 8004374:	6030      	str	r0, [r6, #0]
 8004376:	062e      	lsls	r6, r5, #24
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	d501      	bpl.n	8004380 <_printf_i+0x1c0>
 800437c:	6019      	str	r1, [r3, #0]
 800437e:	e002      	b.n	8004386 <_printf_i+0x1c6>
 8004380:	0668      	lsls	r0, r5, #25
 8004382:	d5fb      	bpl.n	800437c <_printf_i+0x1bc>
 8004384:	8019      	strh	r1, [r3, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	6123      	str	r3, [r4, #16]
 800438a:	4616      	mov	r6, r2
 800438c:	e7bc      	b.n	8004308 <_printf_i+0x148>
 800438e:	6833      	ldr	r3, [r6, #0]
 8004390:	1d1a      	adds	r2, r3, #4
 8004392:	6032      	str	r2, [r6, #0]
 8004394:	681e      	ldr	r6, [r3, #0]
 8004396:	6862      	ldr	r2, [r4, #4]
 8004398:	2100      	movs	r1, #0
 800439a:	4630      	mov	r0, r6
 800439c:	f7fb ff18 	bl	80001d0 <memchr>
 80043a0:	b108      	cbz	r0, 80043a6 <_printf_i+0x1e6>
 80043a2:	1b80      	subs	r0, r0, r6
 80043a4:	6060      	str	r0, [r4, #4]
 80043a6:	6863      	ldr	r3, [r4, #4]
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	2300      	movs	r3, #0
 80043ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b0:	e7aa      	b.n	8004308 <_printf_i+0x148>
 80043b2:	6923      	ldr	r3, [r4, #16]
 80043b4:	4632      	mov	r2, r6
 80043b6:	4649      	mov	r1, r9
 80043b8:	4640      	mov	r0, r8
 80043ba:	47d0      	blx	sl
 80043bc:	3001      	adds	r0, #1
 80043be:	d0ad      	beq.n	800431c <_printf_i+0x15c>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	079b      	lsls	r3, r3, #30
 80043c4:	d413      	bmi.n	80043ee <_printf_i+0x22e>
 80043c6:	68e0      	ldr	r0, [r4, #12]
 80043c8:	9b03      	ldr	r3, [sp, #12]
 80043ca:	4298      	cmp	r0, r3
 80043cc:	bfb8      	it	lt
 80043ce:	4618      	movlt	r0, r3
 80043d0:	e7a6      	b.n	8004320 <_printf_i+0x160>
 80043d2:	2301      	movs	r3, #1
 80043d4:	4632      	mov	r2, r6
 80043d6:	4649      	mov	r1, r9
 80043d8:	4640      	mov	r0, r8
 80043da:	47d0      	blx	sl
 80043dc:	3001      	adds	r0, #1
 80043de:	d09d      	beq.n	800431c <_printf_i+0x15c>
 80043e0:	3501      	adds	r5, #1
 80043e2:	68e3      	ldr	r3, [r4, #12]
 80043e4:	9903      	ldr	r1, [sp, #12]
 80043e6:	1a5b      	subs	r3, r3, r1
 80043e8:	42ab      	cmp	r3, r5
 80043ea:	dcf2      	bgt.n	80043d2 <_printf_i+0x212>
 80043ec:	e7eb      	b.n	80043c6 <_printf_i+0x206>
 80043ee:	2500      	movs	r5, #0
 80043f0:	f104 0619 	add.w	r6, r4, #25
 80043f4:	e7f5      	b.n	80043e2 <_printf_i+0x222>
 80043f6:	bf00      	nop
 80043f8:	08004d05 	.word	0x08004d05
 80043fc:	08004d16 	.word	0x08004d16

08004400 <__sflush_r>:
 8004400:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004408:	0716      	lsls	r6, r2, #28
 800440a:	4605      	mov	r5, r0
 800440c:	460c      	mov	r4, r1
 800440e:	d454      	bmi.n	80044ba <__sflush_r+0xba>
 8004410:	684b      	ldr	r3, [r1, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	dc02      	bgt.n	800441c <__sflush_r+0x1c>
 8004416:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	dd48      	ble.n	80044ae <__sflush_r+0xae>
 800441c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800441e:	2e00      	cmp	r6, #0
 8004420:	d045      	beq.n	80044ae <__sflush_r+0xae>
 8004422:	2300      	movs	r3, #0
 8004424:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004428:	682f      	ldr	r7, [r5, #0]
 800442a:	6a21      	ldr	r1, [r4, #32]
 800442c:	602b      	str	r3, [r5, #0]
 800442e:	d030      	beq.n	8004492 <__sflush_r+0x92>
 8004430:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	0759      	lsls	r1, r3, #29
 8004436:	d505      	bpl.n	8004444 <__sflush_r+0x44>
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	1ad2      	subs	r2, r2, r3
 800443c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800443e:	b10b      	cbz	r3, 8004444 <__sflush_r+0x44>
 8004440:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004442:	1ad2      	subs	r2, r2, r3
 8004444:	2300      	movs	r3, #0
 8004446:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004448:	6a21      	ldr	r1, [r4, #32]
 800444a:	4628      	mov	r0, r5
 800444c:	47b0      	blx	r6
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	d106      	bne.n	8004462 <__sflush_r+0x62>
 8004454:	6829      	ldr	r1, [r5, #0]
 8004456:	291d      	cmp	r1, #29
 8004458:	d82b      	bhi.n	80044b2 <__sflush_r+0xb2>
 800445a:	4a2a      	ldr	r2, [pc, #168]	@ (8004504 <__sflush_r+0x104>)
 800445c:	410a      	asrs	r2, r1
 800445e:	07d6      	lsls	r6, r2, #31
 8004460:	d427      	bmi.n	80044b2 <__sflush_r+0xb2>
 8004462:	2200      	movs	r2, #0
 8004464:	6062      	str	r2, [r4, #4]
 8004466:	04d9      	lsls	r1, r3, #19
 8004468:	6922      	ldr	r2, [r4, #16]
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	d504      	bpl.n	8004478 <__sflush_r+0x78>
 800446e:	1c42      	adds	r2, r0, #1
 8004470:	d101      	bne.n	8004476 <__sflush_r+0x76>
 8004472:	682b      	ldr	r3, [r5, #0]
 8004474:	b903      	cbnz	r3, 8004478 <__sflush_r+0x78>
 8004476:	6560      	str	r0, [r4, #84]	@ 0x54
 8004478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800447a:	602f      	str	r7, [r5, #0]
 800447c:	b1b9      	cbz	r1, 80044ae <__sflush_r+0xae>
 800447e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004482:	4299      	cmp	r1, r3
 8004484:	d002      	beq.n	800448c <__sflush_r+0x8c>
 8004486:	4628      	mov	r0, r5
 8004488:	f7ff fbf2 	bl	8003c70 <_free_r>
 800448c:	2300      	movs	r3, #0
 800448e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004490:	e00d      	b.n	80044ae <__sflush_r+0xae>
 8004492:	2301      	movs	r3, #1
 8004494:	4628      	mov	r0, r5
 8004496:	47b0      	blx	r6
 8004498:	4602      	mov	r2, r0
 800449a:	1c50      	adds	r0, r2, #1
 800449c:	d1c9      	bne.n	8004432 <__sflush_r+0x32>
 800449e:	682b      	ldr	r3, [r5, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0c6      	beq.n	8004432 <__sflush_r+0x32>
 80044a4:	2b1d      	cmp	r3, #29
 80044a6:	d001      	beq.n	80044ac <__sflush_r+0xac>
 80044a8:	2b16      	cmp	r3, #22
 80044aa:	d11e      	bne.n	80044ea <__sflush_r+0xea>
 80044ac:	602f      	str	r7, [r5, #0]
 80044ae:	2000      	movs	r0, #0
 80044b0:	e022      	b.n	80044f8 <__sflush_r+0xf8>
 80044b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044b6:	b21b      	sxth	r3, r3
 80044b8:	e01b      	b.n	80044f2 <__sflush_r+0xf2>
 80044ba:	690f      	ldr	r7, [r1, #16]
 80044bc:	2f00      	cmp	r7, #0
 80044be:	d0f6      	beq.n	80044ae <__sflush_r+0xae>
 80044c0:	0793      	lsls	r3, r2, #30
 80044c2:	680e      	ldr	r6, [r1, #0]
 80044c4:	bf08      	it	eq
 80044c6:	694b      	ldreq	r3, [r1, #20]
 80044c8:	600f      	str	r7, [r1, #0]
 80044ca:	bf18      	it	ne
 80044cc:	2300      	movne	r3, #0
 80044ce:	eba6 0807 	sub.w	r8, r6, r7
 80044d2:	608b      	str	r3, [r1, #8]
 80044d4:	f1b8 0f00 	cmp.w	r8, #0
 80044d8:	dde9      	ble.n	80044ae <__sflush_r+0xae>
 80044da:	6a21      	ldr	r1, [r4, #32]
 80044dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80044de:	4643      	mov	r3, r8
 80044e0:	463a      	mov	r2, r7
 80044e2:	4628      	mov	r0, r5
 80044e4:	47b0      	blx	r6
 80044e6:	2800      	cmp	r0, #0
 80044e8:	dc08      	bgt.n	80044fc <__sflush_r+0xfc>
 80044ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044f2:	81a3      	strh	r3, [r4, #12]
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044fc:	4407      	add	r7, r0
 80044fe:	eba8 0800 	sub.w	r8, r8, r0
 8004502:	e7e7      	b.n	80044d4 <__sflush_r+0xd4>
 8004504:	dfbffffe 	.word	0xdfbffffe

08004508 <_fflush_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	690b      	ldr	r3, [r1, #16]
 800450c:	4605      	mov	r5, r0
 800450e:	460c      	mov	r4, r1
 8004510:	b913      	cbnz	r3, 8004518 <_fflush_r+0x10>
 8004512:	2500      	movs	r5, #0
 8004514:	4628      	mov	r0, r5
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	b118      	cbz	r0, 8004522 <_fflush_r+0x1a>
 800451a:	6a03      	ldr	r3, [r0, #32]
 800451c:	b90b      	cbnz	r3, 8004522 <_fflush_r+0x1a>
 800451e:	f7ff fa9f 	bl	8003a60 <__sinit>
 8004522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f3      	beq.n	8004512 <_fflush_r+0xa>
 800452a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800452c:	07d0      	lsls	r0, r2, #31
 800452e:	d404      	bmi.n	800453a <_fflush_r+0x32>
 8004530:	0599      	lsls	r1, r3, #22
 8004532:	d402      	bmi.n	800453a <_fflush_r+0x32>
 8004534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004536:	f7ff fb98 	bl	8003c6a <__retarget_lock_acquire_recursive>
 800453a:	4628      	mov	r0, r5
 800453c:	4621      	mov	r1, r4
 800453e:	f7ff ff5f 	bl	8004400 <__sflush_r>
 8004542:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004544:	07da      	lsls	r2, r3, #31
 8004546:	4605      	mov	r5, r0
 8004548:	d4e4      	bmi.n	8004514 <_fflush_r+0xc>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	059b      	lsls	r3, r3, #22
 800454e:	d4e1      	bmi.n	8004514 <_fflush_r+0xc>
 8004550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004552:	f7ff fb8b 	bl	8003c6c <__retarget_lock_release_recursive>
 8004556:	e7dd      	b.n	8004514 <_fflush_r+0xc>

08004558 <__swbuf_r>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	460e      	mov	r6, r1
 800455c:	4614      	mov	r4, r2
 800455e:	4605      	mov	r5, r0
 8004560:	b118      	cbz	r0, 800456a <__swbuf_r+0x12>
 8004562:	6a03      	ldr	r3, [r0, #32]
 8004564:	b90b      	cbnz	r3, 800456a <__swbuf_r+0x12>
 8004566:	f7ff fa7b 	bl	8003a60 <__sinit>
 800456a:	69a3      	ldr	r3, [r4, #24]
 800456c:	60a3      	str	r3, [r4, #8]
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	071a      	lsls	r2, r3, #28
 8004572:	d501      	bpl.n	8004578 <__swbuf_r+0x20>
 8004574:	6923      	ldr	r3, [r4, #16]
 8004576:	b943      	cbnz	r3, 800458a <__swbuf_r+0x32>
 8004578:	4621      	mov	r1, r4
 800457a:	4628      	mov	r0, r5
 800457c:	f000 f82a 	bl	80045d4 <__swsetup_r>
 8004580:	b118      	cbz	r0, 800458a <__swbuf_r+0x32>
 8004582:	f04f 37ff 	mov.w	r7, #4294967295
 8004586:	4638      	mov	r0, r7
 8004588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	6922      	ldr	r2, [r4, #16]
 800458e:	1a98      	subs	r0, r3, r2
 8004590:	6963      	ldr	r3, [r4, #20]
 8004592:	b2f6      	uxtb	r6, r6
 8004594:	4283      	cmp	r3, r0
 8004596:	4637      	mov	r7, r6
 8004598:	dc05      	bgt.n	80045a6 <__swbuf_r+0x4e>
 800459a:	4621      	mov	r1, r4
 800459c:	4628      	mov	r0, r5
 800459e:	f7ff ffb3 	bl	8004508 <_fflush_r>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d1ed      	bne.n	8004582 <__swbuf_r+0x2a>
 80045a6:	68a3      	ldr	r3, [r4, #8]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	60a3      	str	r3, [r4, #8]
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	6022      	str	r2, [r4, #0]
 80045b2:	701e      	strb	r6, [r3, #0]
 80045b4:	6962      	ldr	r2, [r4, #20]
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d004      	beq.n	80045c6 <__swbuf_r+0x6e>
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	07db      	lsls	r3, r3, #31
 80045c0:	d5e1      	bpl.n	8004586 <__swbuf_r+0x2e>
 80045c2:	2e0a      	cmp	r6, #10
 80045c4:	d1df      	bne.n	8004586 <__swbuf_r+0x2e>
 80045c6:	4621      	mov	r1, r4
 80045c8:	4628      	mov	r0, r5
 80045ca:	f7ff ff9d 	bl	8004508 <_fflush_r>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d0d9      	beq.n	8004586 <__swbuf_r+0x2e>
 80045d2:	e7d6      	b.n	8004582 <__swbuf_r+0x2a>

080045d4 <__swsetup_r>:
 80045d4:	b538      	push	{r3, r4, r5, lr}
 80045d6:	4b29      	ldr	r3, [pc, #164]	@ (800467c <__swsetup_r+0xa8>)
 80045d8:	4605      	mov	r5, r0
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	460c      	mov	r4, r1
 80045de:	b118      	cbz	r0, 80045e8 <__swsetup_r+0x14>
 80045e0:	6a03      	ldr	r3, [r0, #32]
 80045e2:	b90b      	cbnz	r3, 80045e8 <__swsetup_r+0x14>
 80045e4:	f7ff fa3c 	bl	8003a60 <__sinit>
 80045e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ec:	0719      	lsls	r1, r3, #28
 80045ee:	d422      	bmi.n	8004636 <__swsetup_r+0x62>
 80045f0:	06da      	lsls	r2, r3, #27
 80045f2:	d407      	bmi.n	8004604 <__swsetup_r+0x30>
 80045f4:	2209      	movs	r2, #9
 80045f6:	602a      	str	r2, [r5, #0]
 80045f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004602:	e033      	b.n	800466c <__swsetup_r+0x98>
 8004604:	0758      	lsls	r0, r3, #29
 8004606:	d512      	bpl.n	800462e <__swsetup_r+0x5a>
 8004608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800460a:	b141      	cbz	r1, 800461e <__swsetup_r+0x4a>
 800460c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004610:	4299      	cmp	r1, r3
 8004612:	d002      	beq.n	800461a <__swsetup_r+0x46>
 8004614:	4628      	mov	r0, r5
 8004616:	f7ff fb2b 	bl	8003c70 <_free_r>
 800461a:	2300      	movs	r3, #0
 800461c:	6363      	str	r3, [r4, #52]	@ 0x34
 800461e:	89a3      	ldrh	r3, [r4, #12]
 8004620:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004624:	81a3      	strh	r3, [r4, #12]
 8004626:	2300      	movs	r3, #0
 8004628:	6063      	str	r3, [r4, #4]
 800462a:	6923      	ldr	r3, [r4, #16]
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	89a3      	ldrh	r3, [r4, #12]
 8004630:	f043 0308 	orr.w	r3, r3, #8
 8004634:	81a3      	strh	r3, [r4, #12]
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	b94b      	cbnz	r3, 800464e <__swsetup_r+0x7a>
 800463a:	89a3      	ldrh	r3, [r4, #12]
 800463c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004644:	d003      	beq.n	800464e <__swsetup_r+0x7a>
 8004646:	4621      	mov	r1, r4
 8004648:	4628      	mov	r0, r5
 800464a:	f000 f84f 	bl	80046ec <__smakebuf_r>
 800464e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004652:	f013 0201 	ands.w	r2, r3, #1
 8004656:	d00a      	beq.n	800466e <__swsetup_r+0x9a>
 8004658:	2200      	movs	r2, #0
 800465a:	60a2      	str	r2, [r4, #8]
 800465c:	6962      	ldr	r2, [r4, #20]
 800465e:	4252      	negs	r2, r2
 8004660:	61a2      	str	r2, [r4, #24]
 8004662:	6922      	ldr	r2, [r4, #16]
 8004664:	b942      	cbnz	r2, 8004678 <__swsetup_r+0xa4>
 8004666:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800466a:	d1c5      	bne.n	80045f8 <__swsetup_r+0x24>
 800466c:	bd38      	pop	{r3, r4, r5, pc}
 800466e:	0799      	lsls	r1, r3, #30
 8004670:	bf58      	it	pl
 8004672:	6962      	ldrpl	r2, [r4, #20]
 8004674:	60a2      	str	r2, [r4, #8]
 8004676:	e7f4      	b.n	8004662 <__swsetup_r+0x8e>
 8004678:	2000      	movs	r0, #0
 800467a:	e7f7      	b.n	800466c <__swsetup_r+0x98>
 800467c:	20000018 	.word	0x20000018

08004680 <_sbrk_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4d06      	ldr	r5, [pc, #24]	@ (800469c <_sbrk_r+0x1c>)
 8004684:	2300      	movs	r3, #0
 8004686:	4604      	mov	r4, r0
 8004688:	4608      	mov	r0, r1
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	f7fd f910 	bl	80018b0 <_sbrk>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d102      	bne.n	800469a <_sbrk_r+0x1a>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	b103      	cbz	r3, 800469a <_sbrk_r+0x1a>
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	2000022c 	.word	0x2000022c

080046a0 <__swhatbuf_r>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	460c      	mov	r4, r1
 80046a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a8:	2900      	cmp	r1, #0
 80046aa:	b096      	sub	sp, #88	@ 0x58
 80046ac:	4615      	mov	r5, r2
 80046ae:	461e      	mov	r6, r3
 80046b0:	da0d      	bge.n	80046ce <__swhatbuf_r+0x2e>
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80046b8:	f04f 0100 	mov.w	r1, #0
 80046bc:	bf14      	ite	ne
 80046be:	2340      	movne	r3, #64	@ 0x40
 80046c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80046c4:	2000      	movs	r0, #0
 80046c6:	6031      	str	r1, [r6, #0]
 80046c8:	602b      	str	r3, [r5, #0]
 80046ca:	b016      	add	sp, #88	@ 0x58
 80046cc:	bd70      	pop	{r4, r5, r6, pc}
 80046ce:	466a      	mov	r2, sp
 80046d0:	f000 f848 	bl	8004764 <_fstat_r>
 80046d4:	2800      	cmp	r0, #0
 80046d6:	dbec      	blt.n	80046b2 <__swhatbuf_r+0x12>
 80046d8:	9901      	ldr	r1, [sp, #4]
 80046da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80046de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80046e2:	4259      	negs	r1, r3
 80046e4:	4159      	adcs	r1, r3
 80046e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046ea:	e7eb      	b.n	80046c4 <__swhatbuf_r+0x24>

080046ec <__smakebuf_r>:
 80046ec:	898b      	ldrh	r3, [r1, #12]
 80046ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046f0:	079d      	lsls	r5, r3, #30
 80046f2:	4606      	mov	r6, r0
 80046f4:	460c      	mov	r4, r1
 80046f6:	d507      	bpl.n	8004708 <__smakebuf_r+0x1c>
 80046f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	6123      	str	r3, [r4, #16]
 8004700:	2301      	movs	r3, #1
 8004702:	6163      	str	r3, [r4, #20]
 8004704:	b003      	add	sp, #12
 8004706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004708:	ab01      	add	r3, sp, #4
 800470a:	466a      	mov	r2, sp
 800470c:	f7ff ffc8 	bl	80046a0 <__swhatbuf_r>
 8004710:	9f00      	ldr	r7, [sp, #0]
 8004712:	4605      	mov	r5, r0
 8004714:	4639      	mov	r1, r7
 8004716:	4630      	mov	r0, r6
 8004718:	f7ff fb16 	bl	8003d48 <_malloc_r>
 800471c:	b948      	cbnz	r0, 8004732 <__smakebuf_r+0x46>
 800471e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004722:	059a      	lsls	r2, r3, #22
 8004724:	d4ee      	bmi.n	8004704 <__smakebuf_r+0x18>
 8004726:	f023 0303 	bic.w	r3, r3, #3
 800472a:	f043 0302 	orr.w	r3, r3, #2
 800472e:	81a3      	strh	r3, [r4, #12]
 8004730:	e7e2      	b.n	80046f8 <__smakebuf_r+0xc>
 8004732:	89a3      	ldrh	r3, [r4, #12]
 8004734:	6020      	str	r0, [r4, #0]
 8004736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800473a:	81a3      	strh	r3, [r4, #12]
 800473c:	9b01      	ldr	r3, [sp, #4]
 800473e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004742:	b15b      	cbz	r3, 800475c <__smakebuf_r+0x70>
 8004744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004748:	4630      	mov	r0, r6
 800474a:	f000 f81d 	bl	8004788 <_isatty_r>
 800474e:	b128      	cbz	r0, 800475c <__smakebuf_r+0x70>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	81a3      	strh	r3, [r4, #12]
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	431d      	orrs	r5, r3
 8004760:	81a5      	strh	r5, [r4, #12]
 8004762:	e7cf      	b.n	8004704 <__smakebuf_r+0x18>

08004764 <_fstat_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4d07      	ldr	r5, [pc, #28]	@ (8004784 <_fstat_r+0x20>)
 8004768:	2300      	movs	r3, #0
 800476a:	4604      	mov	r4, r0
 800476c:	4608      	mov	r0, r1
 800476e:	4611      	mov	r1, r2
 8004770:	602b      	str	r3, [r5, #0]
 8004772:	f7fd f875 	bl	8001860 <_fstat>
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	d102      	bne.n	8004780 <_fstat_r+0x1c>
 800477a:	682b      	ldr	r3, [r5, #0]
 800477c:	b103      	cbz	r3, 8004780 <_fstat_r+0x1c>
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	bd38      	pop	{r3, r4, r5, pc}
 8004782:	bf00      	nop
 8004784:	2000022c 	.word	0x2000022c

08004788 <_isatty_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4d06      	ldr	r5, [pc, #24]	@ (80047a4 <_isatty_r+0x1c>)
 800478c:	2300      	movs	r3, #0
 800478e:	4604      	mov	r4, r0
 8004790:	4608      	mov	r0, r1
 8004792:	602b      	str	r3, [r5, #0]
 8004794:	f7fd f874 	bl	8001880 <_isatty>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_isatty_r+0x1a>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_isatty_r+0x1a>
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	2000022c 	.word	0x2000022c

080047a8 <atan2>:
 80047a8:	f000 b802 	b.w	80047b0 <__ieee754_atan2>
 80047ac:	0000      	movs	r0, r0
	...

080047b0 <__ieee754_atan2>:
 80047b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b4:	ec57 6b11 	vmov	r6, r7, d1
 80047b8:	4273      	negs	r3, r6
 80047ba:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8004938 <__ieee754_atan2+0x188>
 80047be:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80047c2:	4333      	orrs	r3, r6
 80047c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80047c8:	4543      	cmp	r3, r8
 80047ca:	ec51 0b10 	vmov	r0, r1, d0
 80047ce:	4635      	mov	r5, r6
 80047d0:	d809      	bhi.n	80047e6 <__ieee754_atan2+0x36>
 80047d2:	4244      	negs	r4, r0
 80047d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80047d8:	4304      	orrs	r4, r0
 80047da:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80047de:	4544      	cmp	r4, r8
 80047e0:	468e      	mov	lr, r1
 80047e2:	4681      	mov	r9, r0
 80047e4:	d907      	bls.n	80047f6 <__ieee754_atan2+0x46>
 80047e6:	4632      	mov	r2, r6
 80047e8:	463b      	mov	r3, r7
 80047ea:	f7fb fd47 	bl	800027c <__adddf3>
 80047ee:	ec41 0b10 	vmov	d0, r0, r1
 80047f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047f6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80047fa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80047fe:	4334      	orrs	r4, r6
 8004800:	d103      	bne.n	800480a <__ieee754_atan2+0x5a>
 8004802:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004806:	f000 b89b 	b.w	8004940 <atan>
 800480a:	17bc      	asrs	r4, r7, #30
 800480c:	f004 0402 	and.w	r4, r4, #2
 8004810:	ea53 0909 	orrs.w	r9, r3, r9
 8004814:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004818:	d107      	bne.n	800482a <__ieee754_atan2+0x7a>
 800481a:	2c02      	cmp	r4, #2
 800481c:	d05f      	beq.n	80048de <__ieee754_atan2+0x12e>
 800481e:	2c03      	cmp	r4, #3
 8004820:	d1e5      	bne.n	80047ee <__ieee754_atan2+0x3e>
 8004822:	a141      	add	r1, pc, #260	@ (adr r1, 8004928 <__ieee754_atan2+0x178>)
 8004824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004828:	e7e1      	b.n	80047ee <__ieee754_atan2+0x3e>
 800482a:	4315      	orrs	r5, r2
 800482c:	d106      	bne.n	800483c <__ieee754_atan2+0x8c>
 800482e:	f1be 0f00 	cmp.w	lr, #0
 8004832:	da5f      	bge.n	80048f4 <__ieee754_atan2+0x144>
 8004834:	a13e      	add	r1, pc, #248	@ (adr r1, 8004930 <__ieee754_atan2+0x180>)
 8004836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800483a:	e7d8      	b.n	80047ee <__ieee754_atan2+0x3e>
 800483c:	4542      	cmp	r2, r8
 800483e:	d10f      	bne.n	8004860 <__ieee754_atan2+0xb0>
 8004840:	4293      	cmp	r3, r2
 8004842:	f104 34ff 	add.w	r4, r4, #4294967295
 8004846:	d107      	bne.n	8004858 <__ieee754_atan2+0xa8>
 8004848:	2c02      	cmp	r4, #2
 800484a:	d84c      	bhi.n	80048e6 <__ieee754_atan2+0x136>
 800484c:	4b34      	ldr	r3, [pc, #208]	@ (8004920 <__ieee754_atan2+0x170>)
 800484e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004852:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004856:	e7ca      	b.n	80047ee <__ieee754_atan2+0x3e>
 8004858:	2c02      	cmp	r4, #2
 800485a:	d848      	bhi.n	80048ee <__ieee754_atan2+0x13e>
 800485c:	4b31      	ldr	r3, [pc, #196]	@ (8004924 <__ieee754_atan2+0x174>)
 800485e:	e7f6      	b.n	800484e <__ieee754_atan2+0x9e>
 8004860:	4543      	cmp	r3, r8
 8004862:	d0e4      	beq.n	800482e <__ieee754_atan2+0x7e>
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800486a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800486e:	da1e      	bge.n	80048ae <__ieee754_atan2+0xfe>
 8004870:	2f00      	cmp	r7, #0
 8004872:	da01      	bge.n	8004878 <__ieee754_atan2+0xc8>
 8004874:	323c      	adds	r2, #60	@ 0x3c
 8004876:	db1e      	blt.n	80048b6 <__ieee754_atan2+0x106>
 8004878:	4632      	mov	r2, r6
 800487a:	463b      	mov	r3, r7
 800487c:	f7fb ffde 	bl	800083c <__aeabi_ddiv>
 8004880:	ec41 0b10 	vmov	d0, r0, r1
 8004884:	f000 f9f4 	bl	8004c70 <fabs>
 8004888:	f000 f85a 	bl	8004940 <atan>
 800488c:	ec51 0b10 	vmov	r0, r1, d0
 8004890:	2c01      	cmp	r4, #1
 8004892:	d013      	beq.n	80048bc <__ieee754_atan2+0x10c>
 8004894:	2c02      	cmp	r4, #2
 8004896:	d015      	beq.n	80048c4 <__ieee754_atan2+0x114>
 8004898:	2c00      	cmp	r4, #0
 800489a:	d0a8      	beq.n	80047ee <__ieee754_atan2+0x3e>
 800489c:	a318      	add	r3, pc, #96	@ (adr r3, 8004900 <__ieee754_atan2+0x150>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f7fb fce9 	bl	8000278 <__aeabi_dsub>
 80048a6:	a318      	add	r3, pc, #96	@ (adr r3, 8004908 <__ieee754_atan2+0x158>)
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	e014      	b.n	80048d8 <__ieee754_atan2+0x128>
 80048ae:	a118      	add	r1, pc, #96	@ (adr r1, 8004910 <__ieee754_atan2+0x160>)
 80048b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048b4:	e7ec      	b.n	8004890 <__ieee754_atan2+0xe0>
 80048b6:	2000      	movs	r0, #0
 80048b8:	2100      	movs	r1, #0
 80048ba:	e7e9      	b.n	8004890 <__ieee754_atan2+0xe0>
 80048bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048c0:	4619      	mov	r1, r3
 80048c2:	e794      	b.n	80047ee <__ieee754_atan2+0x3e>
 80048c4:	a30e      	add	r3, pc, #56	@ (adr r3, 8004900 <__ieee754_atan2+0x150>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f7fb fcd5 	bl	8000278 <__aeabi_dsub>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	a10d      	add	r1, pc, #52	@ (adr r1, 8004908 <__ieee754_atan2+0x158>)
 80048d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048d8:	f7fb fcce 	bl	8000278 <__aeabi_dsub>
 80048dc:	e787      	b.n	80047ee <__ieee754_atan2+0x3e>
 80048de:	a10a      	add	r1, pc, #40	@ (adr r1, 8004908 <__ieee754_atan2+0x158>)
 80048e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048e4:	e783      	b.n	80047ee <__ieee754_atan2+0x3e>
 80048e6:	a10c      	add	r1, pc, #48	@ (adr r1, 8004918 <__ieee754_atan2+0x168>)
 80048e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048ec:	e77f      	b.n	80047ee <__ieee754_atan2+0x3e>
 80048ee:	2000      	movs	r0, #0
 80048f0:	2100      	movs	r1, #0
 80048f2:	e77c      	b.n	80047ee <__ieee754_atan2+0x3e>
 80048f4:	a106      	add	r1, pc, #24	@ (adr r1, 8004910 <__ieee754_atan2+0x160>)
 80048f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048fa:	e778      	b.n	80047ee <__ieee754_atan2+0x3e>
 80048fc:	f3af 8000 	nop.w
 8004900:	33145c07 	.word	0x33145c07
 8004904:	3ca1a626 	.word	0x3ca1a626
 8004908:	54442d18 	.word	0x54442d18
 800490c:	400921fb 	.word	0x400921fb
 8004910:	54442d18 	.word	0x54442d18
 8004914:	3ff921fb 	.word	0x3ff921fb
 8004918:	54442d18 	.word	0x54442d18
 800491c:	3fe921fb 	.word	0x3fe921fb
 8004920:	08004d40 	.word	0x08004d40
 8004924:	08004d28 	.word	0x08004d28
 8004928:	54442d18 	.word	0x54442d18
 800492c:	c00921fb 	.word	0xc00921fb
 8004930:	54442d18 	.word	0x54442d18
 8004934:	bff921fb 	.word	0xbff921fb
 8004938:	7ff00000 	.word	0x7ff00000
 800493c:	00000000 	.word	0x00000000

08004940 <atan>:
 8004940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004944:	ec55 4b10 	vmov	r4, r5, d0
 8004948:	4bbf      	ldr	r3, [pc, #764]	@ (8004c48 <atan+0x308>)
 800494a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800494e:	429e      	cmp	r6, r3
 8004950:	46ab      	mov	fp, r5
 8004952:	d918      	bls.n	8004986 <atan+0x46>
 8004954:	4bbd      	ldr	r3, [pc, #756]	@ (8004c4c <atan+0x30c>)
 8004956:	429e      	cmp	r6, r3
 8004958:	d801      	bhi.n	800495e <atan+0x1e>
 800495a:	d109      	bne.n	8004970 <atan+0x30>
 800495c:	b144      	cbz	r4, 8004970 <atan+0x30>
 800495e:	4622      	mov	r2, r4
 8004960:	462b      	mov	r3, r5
 8004962:	4620      	mov	r0, r4
 8004964:	4629      	mov	r1, r5
 8004966:	f7fb fc89 	bl	800027c <__adddf3>
 800496a:	4604      	mov	r4, r0
 800496c:	460d      	mov	r5, r1
 800496e:	e006      	b.n	800497e <atan+0x3e>
 8004970:	f1bb 0f00 	cmp.w	fp, #0
 8004974:	f340 812b 	ble.w	8004bce <atan+0x28e>
 8004978:	a597      	add	r5, pc, #604	@ (adr r5, 8004bd8 <atan+0x298>)
 800497a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800497e:	ec45 4b10 	vmov	d0, r4, r5
 8004982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004986:	4bb2      	ldr	r3, [pc, #712]	@ (8004c50 <atan+0x310>)
 8004988:	429e      	cmp	r6, r3
 800498a:	d813      	bhi.n	80049b4 <atan+0x74>
 800498c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8004990:	429e      	cmp	r6, r3
 8004992:	d80c      	bhi.n	80049ae <atan+0x6e>
 8004994:	a392      	add	r3, pc, #584	@ (adr r3, 8004be0 <atan+0x2a0>)
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	4620      	mov	r0, r4
 800499c:	4629      	mov	r1, r5
 800499e:	f7fb fc6d 	bl	800027c <__adddf3>
 80049a2:	4bac      	ldr	r3, [pc, #688]	@ (8004c54 <atan+0x314>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	f7fc f8af 	bl	8000b08 <__aeabi_dcmpgt>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d1e7      	bne.n	800497e <atan+0x3e>
 80049ae:	f04f 3aff 	mov.w	sl, #4294967295
 80049b2:	e029      	b.n	8004a08 <atan+0xc8>
 80049b4:	f000 f95c 	bl	8004c70 <fabs>
 80049b8:	4ba7      	ldr	r3, [pc, #668]	@ (8004c58 <atan+0x318>)
 80049ba:	429e      	cmp	r6, r3
 80049bc:	ec55 4b10 	vmov	r4, r5, d0
 80049c0:	f200 80bc 	bhi.w	8004b3c <atan+0x1fc>
 80049c4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80049c8:	429e      	cmp	r6, r3
 80049ca:	f200 809e 	bhi.w	8004b0a <atan+0x1ca>
 80049ce:	4622      	mov	r2, r4
 80049d0:	462b      	mov	r3, r5
 80049d2:	4620      	mov	r0, r4
 80049d4:	4629      	mov	r1, r5
 80049d6:	f7fb fc51 	bl	800027c <__adddf3>
 80049da:	4b9e      	ldr	r3, [pc, #632]	@ (8004c54 <atan+0x314>)
 80049dc:	2200      	movs	r2, #0
 80049de:	f7fb fc4b 	bl	8000278 <__aeabi_dsub>
 80049e2:	2200      	movs	r2, #0
 80049e4:	4606      	mov	r6, r0
 80049e6:	460f      	mov	r7, r1
 80049e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80049ec:	4620      	mov	r0, r4
 80049ee:	4629      	mov	r1, r5
 80049f0:	f7fb fc44 	bl	800027c <__adddf3>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4630      	mov	r0, r6
 80049fa:	4639      	mov	r1, r7
 80049fc:	f7fb ff1e 	bl	800083c <__aeabi_ddiv>
 8004a00:	f04f 0a00 	mov.w	sl, #0
 8004a04:	4604      	mov	r4, r0
 8004a06:	460d      	mov	r5, r1
 8004a08:	4622      	mov	r2, r4
 8004a0a:	462b      	mov	r3, r5
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	4629      	mov	r1, r5
 8004a10:	f7fb fdea 	bl	80005e8 <__aeabi_dmul>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4680      	mov	r8, r0
 8004a1a:	4689      	mov	r9, r1
 8004a1c:	f7fb fde4 	bl	80005e8 <__aeabi_dmul>
 8004a20:	a371      	add	r3, pc, #452	@ (adr r3, 8004be8 <atan+0x2a8>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	4606      	mov	r6, r0
 8004a28:	460f      	mov	r7, r1
 8004a2a:	f7fb fddd 	bl	80005e8 <__aeabi_dmul>
 8004a2e:	a370      	add	r3, pc, #448	@ (adr r3, 8004bf0 <atan+0x2b0>)
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f7fb fc22 	bl	800027c <__adddf3>
 8004a38:	4632      	mov	r2, r6
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	f7fb fdd4 	bl	80005e8 <__aeabi_dmul>
 8004a40:	a36d      	add	r3, pc, #436	@ (adr r3, 8004bf8 <atan+0x2b8>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f7fb fc19 	bl	800027c <__adddf3>
 8004a4a:	4632      	mov	r2, r6
 8004a4c:	463b      	mov	r3, r7
 8004a4e:	f7fb fdcb 	bl	80005e8 <__aeabi_dmul>
 8004a52:	a36b      	add	r3, pc, #428	@ (adr r3, 8004c00 <atan+0x2c0>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f7fb fc10 	bl	800027c <__adddf3>
 8004a5c:	4632      	mov	r2, r6
 8004a5e:	463b      	mov	r3, r7
 8004a60:	f7fb fdc2 	bl	80005e8 <__aeabi_dmul>
 8004a64:	a368      	add	r3, pc, #416	@ (adr r3, 8004c08 <atan+0x2c8>)
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f7fb fc07 	bl	800027c <__adddf3>
 8004a6e:	4632      	mov	r2, r6
 8004a70:	463b      	mov	r3, r7
 8004a72:	f7fb fdb9 	bl	80005e8 <__aeabi_dmul>
 8004a76:	a366      	add	r3, pc, #408	@ (adr r3, 8004c10 <atan+0x2d0>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb fbfe 	bl	800027c <__adddf3>
 8004a80:	4642      	mov	r2, r8
 8004a82:	464b      	mov	r3, r9
 8004a84:	f7fb fdb0 	bl	80005e8 <__aeabi_dmul>
 8004a88:	a363      	add	r3, pc, #396	@ (adr r3, 8004c18 <atan+0x2d8>)
 8004a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8e:	4680      	mov	r8, r0
 8004a90:	4689      	mov	r9, r1
 8004a92:	4630      	mov	r0, r6
 8004a94:	4639      	mov	r1, r7
 8004a96:	f7fb fda7 	bl	80005e8 <__aeabi_dmul>
 8004a9a:	a361      	add	r3, pc, #388	@ (adr r3, 8004c20 <atan+0x2e0>)
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	f7fb fbea 	bl	8000278 <__aeabi_dsub>
 8004aa4:	4632      	mov	r2, r6
 8004aa6:	463b      	mov	r3, r7
 8004aa8:	f7fb fd9e 	bl	80005e8 <__aeabi_dmul>
 8004aac:	a35e      	add	r3, pc, #376	@ (adr r3, 8004c28 <atan+0x2e8>)
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f7fb fbe1 	bl	8000278 <__aeabi_dsub>
 8004ab6:	4632      	mov	r2, r6
 8004ab8:	463b      	mov	r3, r7
 8004aba:	f7fb fd95 	bl	80005e8 <__aeabi_dmul>
 8004abe:	a35c      	add	r3, pc, #368	@ (adr r3, 8004c30 <atan+0x2f0>)
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f7fb fbd8 	bl	8000278 <__aeabi_dsub>
 8004ac8:	4632      	mov	r2, r6
 8004aca:	463b      	mov	r3, r7
 8004acc:	f7fb fd8c 	bl	80005e8 <__aeabi_dmul>
 8004ad0:	a359      	add	r3, pc, #356	@ (adr r3, 8004c38 <atan+0x2f8>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f7fb fbcf 	bl	8000278 <__aeabi_dsub>
 8004ada:	4632      	mov	r2, r6
 8004adc:	463b      	mov	r3, r7
 8004ade:	f7fb fd83 	bl	80005e8 <__aeabi_dmul>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	4649      	mov	r1, r9
 8004aea:	f7fb fbc7 	bl	800027c <__adddf3>
 8004aee:	4622      	mov	r2, r4
 8004af0:	462b      	mov	r3, r5
 8004af2:	f7fb fd79 	bl	80005e8 <__aeabi_dmul>
 8004af6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	d148      	bne.n	8004b92 <atan+0x252>
 8004b00:	4620      	mov	r0, r4
 8004b02:	4629      	mov	r1, r5
 8004b04:	f7fb fbb8 	bl	8000278 <__aeabi_dsub>
 8004b08:	e72f      	b.n	800496a <atan+0x2a>
 8004b0a:	4b52      	ldr	r3, [pc, #328]	@ (8004c54 <atan+0x314>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4620      	mov	r0, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	f7fb fbb1 	bl	8000278 <__aeabi_dsub>
 8004b16:	4b4f      	ldr	r3, [pc, #316]	@ (8004c54 <atan+0x314>)
 8004b18:	4606      	mov	r6, r0
 8004b1a:	460f      	mov	r7, r1
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	4620      	mov	r0, r4
 8004b20:	4629      	mov	r1, r5
 8004b22:	f7fb fbab 	bl	800027c <__adddf3>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	f7fb fe85 	bl	800083c <__aeabi_ddiv>
 8004b32:	f04f 0a01 	mov.w	sl, #1
 8004b36:	4604      	mov	r4, r0
 8004b38:	460d      	mov	r5, r1
 8004b3a:	e765      	b.n	8004a08 <atan+0xc8>
 8004b3c:	4b47      	ldr	r3, [pc, #284]	@ (8004c5c <atan+0x31c>)
 8004b3e:	429e      	cmp	r6, r3
 8004b40:	d21c      	bcs.n	8004b7c <atan+0x23c>
 8004b42:	4b47      	ldr	r3, [pc, #284]	@ (8004c60 <atan+0x320>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	4620      	mov	r0, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	f7fb fb95 	bl	8000278 <__aeabi_dsub>
 8004b4e:	4b44      	ldr	r3, [pc, #272]	@ (8004c60 <atan+0x320>)
 8004b50:	4606      	mov	r6, r0
 8004b52:	460f      	mov	r7, r1
 8004b54:	2200      	movs	r2, #0
 8004b56:	4620      	mov	r0, r4
 8004b58:	4629      	mov	r1, r5
 8004b5a:	f7fb fd45 	bl	80005e8 <__aeabi_dmul>
 8004b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c54 <atan+0x314>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	f7fb fb8b 	bl	800027c <__adddf3>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	f7fb fe65 	bl	800083c <__aeabi_ddiv>
 8004b72:	f04f 0a02 	mov.w	sl, #2
 8004b76:	4604      	mov	r4, r0
 8004b78:	460d      	mov	r5, r1
 8004b7a:	e745      	b.n	8004a08 <atan+0xc8>
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	462b      	mov	r3, r5
 8004b80:	4938      	ldr	r1, [pc, #224]	@ (8004c64 <atan+0x324>)
 8004b82:	2000      	movs	r0, #0
 8004b84:	f7fb fe5a 	bl	800083c <__aeabi_ddiv>
 8004b88:	f04f 0a03 	mov.w	sl, #3
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	460d      	mov	r5, r1
 8004b90:	e73a      	b.n	8004a08 <atan+0xc8>
 8004b92:	4b35      	ldr	r3, [pc, #212]	@ (8004c68 <atan+0x328>)
 8004b94:	4e35      	ldr	r6, [pc, #212]	@ (8004c6c <atan+0x32c>)
 8004b96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	f7fb fb6b 	bl	8000278 <__aeabi_dsub>
 8004ba2:	4622      	mov	r2, r4
 8004ba4:	462b      	mov	r3, r5
 8004ba6:	f7fb fb67 	bl	8000278 <__aeabi_dsub>
 8004baa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004bb6:	f7fb fb5f 	bl	8000278 <__aeabi_dsub>
 8004bba:	f1bb 0f00 	cmp.w	fp, #0
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	460d      	mov	r5, r1
 8004bc2:	f6bf aedc 	bge.w	800497e <atan+0x3e>
 8004bc6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004bca:	461d      	mov	r5, r3
 8004bcc:	e6d7      	b.n	800497e <atan+0x3e>
 8004bce:	a51c      	add	r5, pc, #112	@ (adr r5, 8004c40 <atan+0x300>)
 8004bd0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004bd4:	e6d3      	b.n	800497e <atan+0x3e>
 8004bd6:	bf00      	nop
 8004bd8:	54442d18 	.word	0x54442d18
 8004bdc:	3ff921fb 	.word	0x3ff921fb
 8004be0:	8800759c 	.word	0x8800759c
 8004be4:	7e37e43c 	.word	0x7e37e43c
 8004be8:	e322da11 	.word	0xe322da11
 8004bec:	3f90ad3a 	.word	0x3f90ad3a
 8004bf0:	24760deb 	.word	0x24760deb
 8004bf4:	3fa97b4b 	.word	0x3fa97b4b
 8004bf8:	a0d03d51 	.word	0xa0d03d51
 8004bfc:	3fb10d66 	.word	0x3fb10d66
 8004c00:	c54c206e 	.word	0xc54c206e
 8004c04:	3fb745cd 	.word	0x3fb745cd
 8004c08:	920083ff 	.word	0x920083ff
 8004c0c:	3fc24924 	.word	0x3fc24924
 8004c10:	5555550d 	.word	0x5555550d
 8004c14:	3fd55555 	.word	0x3fd55555
 8004c18:	2c6a6c2f 	.word	0x2c6a6c2f
 8004c1c:	bfa2b444 	.word	0xbfa2b444
 8004c20:	52defd9a 	.word	0x52defd9a
 8004c24:	3fadde2d 	.word	0x3fadde2d
 8004c28:	af749a6d 	.word	0xaf749a6d
 8004c2c:	3fb3b0f2 	.word	0x3fb3b0f2
 8004c30:	fe231671 	.word	0xfe231671
 8004c34:	3fbc71c6 	.word	0x3fbc71c6
 8004c38:	9998ebc4 	.word	0x9998ebc4
 8004c3c:	3fc99999 	.word	0x3fc99999
 8004c40:	54442d18 	.word	0x54442d18
 8004c44:	bff921fb 	.word	0xbff921fb
 8004c48:	440fffff 	.word	0x440fffff
 8004c4c:	7ff00000 	.word	0x7ff00000
 8004c50:	3fdbffff 	.word	0x3fdbffff
 8004c54:	3ff00000 	.word	0x3ff00000
 8004c58:	3ff2ffff 	.word	0x3ff2ffff
 8004c5c:	40038000 	.word	0x40038000
 8004c60:	3ff80000 	.word	0x3ff80000
 8004c64:	bff00000 	.word	0xbff00000
 8004c68:	08004d58 	.word	0x08004d58
 8004c6c:	08004d78 	.word	0x08004d78

08004c70 <fabs>:
 8004c70:	ec51 0b10 	vmov	r0, r1, d0
 8004c74:	4602      	mov	r2, r0
 8004c76:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004c7a:	ec43 2b10 	vmov	d0, r2, r3
 8004c7e:	4770      	bx	lr

08004c80 <_init>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	bf00      	nop
 8004c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c86:	bc08      	pop	{r3}
 8004c88:	469e      	mov	lr, r3
 8004c8a:	4770      	bx	lr

08004c8c <_fini>:
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	bf00      	nop
 8004c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c92:	bc08      	pop	{r3}
 8004c94:	469e      	mov	lr, r3
 8004c96:	4770      	bx	lr
