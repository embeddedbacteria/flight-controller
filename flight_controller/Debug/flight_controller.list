
flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009570  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08009700  08009700  0000a700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009830  08009830  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  08009830  08009830  0000a830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009838  08009838  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009838  08009838  0000a838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800983c  0800983c  0000a83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08009840  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b078  2**0
                  CONTENTS
 10 .bss          00000510  20000078  20000078  0000b078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000588  20000588  0000b078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129d4  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000285e  00000000  00000000  0001da7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  000202e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d3b  00000000  00000000  000213b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002305b  00000000  00000000  000220eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001539a  00000000  00000000  00045146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1414  00000000  00000000  0005a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b8f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005434  00000000  00000000  0012b938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00130d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096e8 	.word	0x080096e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080096e8 	.word	0x080096e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2203      	movs	r2, #3
 8000f84:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_4;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2202      	movs	r2, #2
 8000f8a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_ULTRA_HIGH_RES;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2205      	movs	r2, #5
 8000f90:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_ULTRA_HIGH_RES;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2205      	movs	r2, #5
 8000f96:	70da      	strb	r2, [r3, #3]
	params->standby = BMP280_STANDBY_05;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	711a      	strb	r2, [r3, #4]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b08a      	sub	sp, #40	@ 0x28
 8000fae:	af04      	add	r7, sp, #16
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000fc4:	7afb      	ldrb	r3, [r7, #11]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	8af9      	ldrh	r1, [r7, #22]
 8000fca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f003 f9a8 	bl	8004330 <HAL_I2C_Mem_Read>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10b      	bne.n	8000ffe <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000fe6:	7d7b      	ldrb	r3, [r7, #21]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	7d3b      	ldrb	r3, [r7, #20]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	801a      	strh	r2, [r3, #0]
		return true;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <read_register16+0x56>
	} else
		return false;
 8000ffe:	2300      	movs	r3, #0

}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b08b      	sub	sp, #44	@ 0x2c
 800100c:	af04      	add	r7, sp, #16
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	461a      	mov	r2, r3
 8001014:	460b      	mov	r3, r1
 8001016:	72fb      	strb	r3, [r7, #11]
 8001018:	4613      	mov	r3, r2
 800101a:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	b29a      	uxth	r2, r3
 800102c:	7abb      	ldrb	r3, [r7, #10]
 800102e:	b29b      	uxth	r3, r3
 8001030:	8af9      	ldrh	r1, [r7, #22]
 8001032:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001036:	9402      	str	r4, [sp, #8]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	f003 f976 	bl	8004330 <HAL_I2C_Mem_Read>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <read_data+0x46>
		return 0;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <read_data+0x48>
	else
		return 1;
 800104e:	2301      	movs	r3, #1

}
 8001050:	4618      	mov	r0, r3
 8001052:	371c      	adds	r7, #28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}

08001058 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	461a      	mov	r2, r3
 8001064:	2188      	movs	r1, #136	@ 0x88
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ff9f 	bl	8000faa <read_register16>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d06f      	beq.n	8001152 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3302      	adds	r3, #2
 8001076:	461a      	mov	r2, r3
 8001078:	218a      	movs	r1, #138	@ 0x8a
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff95 	bl	8000faa <read_register16>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d065      	beq.n	8001152 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3304      	adds	r3, #4
 800108a:	461a      	mov	r2, r3
 800108c:	218c      	movs	r1, #140	@ 0x8c
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff8b 	bl	8000faa <read_register16>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d05b      	beq.n	8001152 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3306      	adds	r3, #6
 800109e:	461a      	mov	r2, r3
 80010a0:	218e      	movs	r1, #142	@ 0x8e
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff81 	bl	8000faa <read_register16>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d051      	beq.n	8001152 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3308      	adds	r3, #8
 80010b2:	461a      	mov	r2, r3
 80010b4:	2190      	movs	r1, #144	@ 0x90
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff77 	bl	8000faa <read_register16>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d047      	beq.n	8001152 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	330a      	adds	r3, #10
 80010c6:	461a      	mov	r2, r3
 80010c8:	2192      	movs	r1, #146	@ 0x92
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff6d 	bl	8000faa <read_register16>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d03d      	beq.n	8001152 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	330c      	adds	r3, #12
 80010da:	461a      	mov	r2, r3
 80010dc:	2194      	movs	r1, #148	@ 0x94
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff63 	bl	8000faa <read_register16>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d033      	beq.n	8001152 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	330e      	adds	r3, #14
 80010ee:	461a      	mov	r2, r3
 80010f0:	2196      	movs	r1, #150	@ 0x96
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff59 	bl	8000faa <read_register16>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d029      	beq.n	8001152 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3310      	adds	r3, #16
 8001102:	461a      	mov	r2, r3
 8001104:	2198      	movs	r1, #152	@ 0x98
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff4f 	bl	8000faa <read_register16>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d01f      	beq.n	8001152 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3312      	adds	r3, #18
 8001116:	461a      	mov	r2, r3
 8001118:	219a      	movs	r1, #154	@ 0x9a
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff45 	bl	8000faa <read_register16>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d015      	beq.n	8001152 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3314      	adds	r3, #20
 800112a:	461a      	mov	r2, r3
 800112c:	219c      	movs	r1, #156	@ 0x9c
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff3b 	bl	8000faa <read_register16>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00b      	beq.n	8001152 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800113e:	461a      	mov	r2, r3
 8001140:	219e      	movs	r1, #158	@ 0x9e
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff31 	bl	8000faa <read_register16>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <read_calibration_data+0xfa>

		return true;
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <read_calibration_data+0xfc>
	}

	return false;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <write_register8>:



static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af04      	add	r7, sp, #16
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
 8001168:	4613      	mov	r3, r2
 800116a:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	b29a      	uxth	r2, r3
 800117c:	89f9      	ldrh	r1, [r7, #14]
 800117e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2301      	movs	r3, #1
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	1cbb      	adds	r3, r7, #2
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	f002 ffd5 	bl	800413c <HAL_I2C_Mem_Write>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <write_register8+0x40>
		return false;
 8001198:	2300      	movs	r3, #0
 800119a:	e000      	b.n	800119e <write_register8+0x42>
	else
		return true;
 800119c:	2301      	movs	r3, #1
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80011b4:	2b76      	cmp	r3, #118	@ 0x76
 80011b6:	d005      	beq.n	80011c4 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80011bc:	2b77      	cmp	r3, #119	@ 0x77
 80011be:	d001      	beq.n	80011c4 <bmp280_init+0x1e>

		return false;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e076      	b.n	80012b2 <bmp280_init+0x10c>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f103 0231 	add.w	r2, r3, #49	@ 0x31
 80011ca:	2301      	movs	r3, #1
 80011cc:	21d0      	movs	r1, #208	@ 0xd0
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ff1a 	bl	8001008 <read_data>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <bmp280_init+0x38>
		return false;
 80011da:	2300      	movs	r3, #0
 80011dc:	e069      	b.n	80012b2 <bmp280_init+0x10c>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80011e4:	2b58      	cmp	r3, #88	@ 0x58
 80011e6:	d006      	beq.n	80011f6 <bmp280_init+0x50>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80011ee:	2b60      	cmp	r3, #96	@ 0x60
 80011f0:	d001      	beq.n	80011f6 <bmp280_init+0x50>

		return false;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e05d      	b.n	80012b2 <bmp280_init+0x10c>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80011f6:	22b6      	movs	r2, #182	@ 0xb6
 80011f8:	21e0      	movs	r1, #224	@ 0xe0
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffae 	bl	800115c <write_register8>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <bmp280_init+0x64>
		return false;
 8001206:	2300      	movs	r3, #0
 8001208:	e053      	b.n	80012b2 <bmp280_init+0x10c>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800120a:	f107 020d 	add.w	r2, r7, #13
 800120e:	2301      	movs	r3, #1
 8001210:	21f3      	movs	r1, #243	@ 0xf3
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fef8 	bl	8001008 <read_data>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f5      	bne.n	800120a <bmp280_init+0x64>
				&& (status & 1) == 0)
 800121e:	7b7b      	ldrb	r3, [r7, #13]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f0      	bne.n	800120a <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff15 	bl	8001058 <read_calibration_data>
 800122e:	4603      	mov	r3, r0
 8001230:	f083 0301 	eor.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d100      	bne.n	800123c <bmp280_init+0x96>
 800123a:	e001      	b.n	8001240 <bmp280_init+0x9a>
		return false;
 800123c:	2300      	movs	r3, #0
 800123e:	e038      	b.n	80012b2 <bmp280_init+0x10c>
	}



	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	791b      	ldrb	r3, [r3, #4]
 8001244:	015b      	lsls	r3, r3, #5
 8001246:	b25a      	sxtb	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	785b      	ldrb	r3, [r3, #1]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	b25b      	sxtb	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b25b      	sxtb	r3, r3
 8001254:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	461a      	mov	r2, r3
 800125a:	21f5      	movs	r1, #245	@ 0xf5
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff7d 	bl	800115c <write_register8>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <bmp280_init+0xc6>
		return false;
 8001268:	2300      	movs	r3, #0
 800126a:	e022      	b.n	80012b2 <bmp280_init+0x10c>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <bmp280_init+0xd4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	78db      	ldrb	r3, [r3, #3]
 800127e:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001280:	b25a      	sxtb	r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	789b      	ldrb	r3, [r3, #2]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	b25b      	sxtb	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b25a      	sxtb	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b25b      	sxtb	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001298:	73bb      	strb	r3, [r7, #14]



	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	461a      	mov	r2, r3
 800129e:	21f4      	movs	r1, #244	@ 0xf4
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff5b 	bl	800115c <write_register8>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <bmp280_init+0x10a>
		return false;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e000      	b.n	80012b2 <bmp280_init+0x10c>
	}

	return true;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80012ba:	b480      	push	{r7}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	10da      	asrs	r2, r3, #3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80012d8:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80012dc:	12db      	asrs	r3, r3, #11
 80012de:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	111b      	asrs	r3, r3, #4
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	8812      	ldrh	r2, [r2, #0]
 80012e8:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	1112      	asrs	r2, r2, #4
 80012ee:	68f9      	ldr	r1, [r7, #12]
 80012f0:	8809      	ldrh	r1, [r1, #0]
 80012f2:	1a52      	subs	r2, r2, r1
 80012f4:	fb02 f303 	mul.w	r3, r2, r3
 80012f8:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001300:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001304:	139b      	asrs	r3, r3, #14
 8001306:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	441a      	add	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	3380      	adds	r3, #128	@ 0x80
 800131e:	121b      	asrs	r3, r3, #8
}
 8001320:	4618      	mov	r0, r3
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800132c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001330:	b0cc      	sub	sp, #304	@ 0x130
 8001332:	af00      	add	r7, sp, #0
 8001334:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001338:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 800133c:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001344:	17da      	asrs	r2, r3, #31
 8001346:	461c      	mov	r4, r3
 8001348:	4615      	mov	r5, r2
 800134a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800134e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001352:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001356:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800135a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800135e:	fb03 f102 	mul.w	r1, r3, r2
 8001362:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001366:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800136a:	fb02 f303 	mul.w	r3, r2, r3
 800136e:	18ca      	adds	r2, r1, r3
 8001370:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001374:	fba3 8903 	umull	r8, r9, r3, r3
 8001378:	eb02 0309 	add.w	r3, r2, r9
 800137c:	4699      	mov	r9, r3
 800137e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001382:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001386:	b21b      	sxth	r3, r3
 8001388:	17da      	asrs	r2, r3, #31
 800138a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800138e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001392:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001396:	4603      	mov	r3, r0
 8001398:	fb03 f209 	mul.w	r2, r3, r9
 800139c:	460b      	mov	r3, r1
 800139e:	fb08 f303 	mul.w	r3, r8, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	4602      	mov	r2, r0
 80013a6:	fba8 1202 	umull	r1, r2, r8, r2
 80013aa:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80013ae:	460a      	mov	r2, r1
 80013b0:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80013b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80013b8:	4413      	add	r3, r2
 80013ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80013be:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80013c2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80013c6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80013ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	17da      	asrs	r2, r3, #31
 80013d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80013da:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80013de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013e2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80013e6:	462a      	mov	r2, r5
 80013e8:	fb02 f203 	mul.w	r2, r2, r3
 80013ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013f0:	4621      	mov	r1, r4
 80013f2:	fb01 f303 	mul.w	r3, r1, r3
 80013f6:	441a      	add	r2, r3
 80013f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013fc:	4621      	mov	r1, r4
 80013fe:	fba3 1301 	umull	r1, r3, r3, r1
 8001402:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001406:	460b      	mov	r3, r1
 8001408:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800140c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001410:	18d3      	adds	r3, r2, r3
 8001412:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001416:	f04f 0000 	mov.w	r0, #0
 800141a:	f04f 0100 	mov.w	r1, #0
 800141e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001422:	462b      	mov	r3, r5
 8001424:	0459      	lsls	r1, r3, #17
 8001426:	4623      	mov	r3, r4
 8001428:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800142c:	4623      	mov	r3, r4
 800142e:	0458      	lsls	r0, r3, #17
 8001430:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001434:	1814      	adds	r4, r2, r0
 8001436:	643c      	str	r4, [r7, #64]	@ 0x40
 8001438:	414b      	adcs	r3, r1
 800143a:	647b      	str	r3, [r7, #68]	@ 0x44
 800143c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001440:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001448:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800144c:	b21b      	sxth	r3, r3
 800144e:	17da      	asrs	r2, r3, #31
 8001450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001454:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001458:	f04f 0000 	mov.w	r0, #0
 800145c:	f04f 0100 	mov.w	r1, #0
 8001460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001464:	00d9      	lsls	r1, r3, #3
 8001466:	2000      	movs	r0, #0
 8001468:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800146c:	1814      	adds	r4, r2, r0
 800146e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001470:	414b      	adcs	r3, r1
 8001472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001474:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001478:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800147c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001480:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001484:	fb03 f102 	mul.w	r1, r3, r2
 8001488:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800148c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	18ca      	adds	r2, r1, r3
 8001496:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800149a:	fba3 1303 	umull	r1, r3, r3, r3
 800149e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80014a2:	460b      	mov	r3, r1
 80014a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80014a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80014ac:	18d3      	adds	r3, r2, r3
 80014ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80014b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	17da      	asrs	r2, r3, #31
 80014be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80014c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80014c6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80014ca:	462b      	mov	r3, r5
 80014cc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80014d0:	4642      	mov	r2, r8
 80014d2:	fb02 f203 	mul.w	r2, r2, r3
 80014d6:	464b      	mov	r3, r9
 80014d8:	4621      	mov	r1, r4
 80014da:	fb01 f303 	mul.w	r3, r1, r3
 80014de:	4413      	add	r3, r2
 80014e0:	4622      	mov	r2, r4
 80014e2:	4641      	mov	r1, r8
 80014e4:	fba2 1201 	umull	r1, r2, r2, r1
 80014e8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80014ec:	460a      	mov	r2, r1
 80014ee:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80014f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80014f6:	4413      	add	r3, r2
 80014f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80014fc:	f04f 0000 	mov.w	r0, #0
 8001500:	f04f 0100 	mov.w	r1, #0
 8001504:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001508:	4623      	mov	r3, r4
 800150a:	0a18      	lsrs	r0, r3, #8
 800150c:	462b      	mov	r3, r5
 800150e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001512:	462b      	mov	r3, r5
 8001514:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800151a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800151e:	b21b      	sxth	r3, r3
 8001520:	17da      	asrs	r2, r3, #31
 8001522:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001526:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800152a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800152e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001532:	464a      	mov	r2, r9
 8001534:	fb02 f203 	mul.w	r2, r2, r3
 8001538:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800153c:	4644      	mov	r4, r8
 800153e:	fb04 f303 	mul.w	r3, r4, r3
 8001542:	441a      	add	r2, r3
 8001544:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001548:	4644      	mov	r4, r8
 800154a:	fba3 4304 	umull	r4, r3, r3, r4
 800154e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001552:	4623      	mov	r3, r4
 8001554:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001558:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800155c:	18d3      	adds	r3, r2, r3
 800155e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800156e:	464c      	mov	r4, r9
 8001570:	0323      	lsls	r3, r4, #12
 8001572:	4644      	mov	r4, r8
 8001574:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001578:	4644      	mov	r4, r8
 800157a:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800157c:	1884      	adds	r4, r0, r2
 800157e:	633c      	str	r4, [r7, #48]	@ 0x30
 8001580:	eb41 0303 	adc.w	r3, r1, r3
 8001584:	637b      	str	r3, [r7, #52]	@ 0x34
 8001586:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800158a:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800158e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001592:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001596:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800159a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800159e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015a2:	88db      	ldrh	r3, [r3, #6]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2200      	movs	r2, #0
 80015a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015b0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015b4:	462b      	mov	r3, r5
 80015b6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80015ba:	4642      	mov	r2, r8
 80015bc:	fb02 f203 	mul.w	r2, r2, r3
 80015c0:	464b      	mov	r3, r9
 80015c2:	4621      	mov	r1, r4
 80015c4:	fb01 f303 	mul.w	r3, r1, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	4622      	mov	r2, r4
 80015cc:	4641      	mov	r1, r8
 80015ce:	fba2 1201 	umull	r1, r2, r2, r1
 80015d2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80015d6:	460a      	mov	r2, r1
 80015d8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80015dc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80015e0:	4413      	add	r3, r2
 80015e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80015f2:	4629      	mov	r1, r5
 80015f4:	104a      	asrs	r2, r1, #1
 80015f6:	4629      	mov	r1, r5
 80015f8:	17cb      	asrs	r3, r1, #31
 80015fa:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 80015fe:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001602:	4313      	orrs	r3, r2
 8001604:	d101      	bne.n	800160a <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001606:	2300      	movs	r3, #0
 8001608:	e148      	b.n	800189c <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800160a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800160e:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001612:	17da      	asrs	r2, r3, #31
 8001614:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001618:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800161c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001620:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001624:	105b      	asrs	r3, r3, #1
 8001626:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800162a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800162e:	07db      	lsls	r3, r3, #31
 8001630:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001634:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001638:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800163c:	4621      	mov	r1, r4
 800163e:	1a89      	subs	r1, r1, r2
 8001640:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001642:	4629      	mov	r1, r5
 8001644:	eb61 0303 	sbc.w	r3, r1, r3
 8001648:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800164a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800164e:	4622      	mov	r2, r4
 8001650:	462b      	mov	r3, r5
 8001652:	1891      	adds	r1, r2, r2
 8001654:	6239      	str	r1, [r7, #32]
 8001656:	415b      	adcs	r3, r3
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
 800165a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800165e:	4621      	mov	r1, r4
 8001660:	1851      	adds	r1, r2, r1
 8001662:	61b9      	str	r1, [r7, #24]
 8001664:	4629      	mov	r1, r5
 8001666:	414b      	adcs	r3, r1
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001676:	4649      	mov	r1, r9
 8001678:	018b      	lsls	r3, r1, #6
 800167a:	4641      	mov	r1, r8
 800167c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001680:	4641      	mov	r1, r8
 8001682:	018a      	lsls	r2, r1, #6
 8001684:	4641      	mov	r1, r8
 8001686:	1889      	adds	r1, r1, r2
 8001688:	6139      	str	r1, [r7, #16]
 800168a:	4649      	mov	r1, r9
 800168c:	eb43 0101 	adc.w	r1, r3, r1
 8001690:	6179      	str	r1, [r7, #20]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800169e:	4649      	mov	r1, r9
 80016a0:	008b      	lsls	r3, r1, #2
 80016a2:	4641      	mov	r1, r8
 80016a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016a8:	4641      	mov	r1, r8
 80016aa:	008a      	lsls	r2, r1, #2
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	4603      	mov	r3, r0
 80016b2:	4622      	mov	r2, r4
 80016b4:	189b      	adds	r3, r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	460b      	mov	r3, r1
 80016ba:	462a      	mov	r2, r5
 80016bc:	eb42 0303 	adc.w	r3, r2, r3
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80016ce:	4649      	mov	r1, r9
 80016d0:	008b      	lsls	r3, r1, #2
 80016d2:	4641      	mov	r1, r8
 80016d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016d8:	4641      	mov	r1, r8
 80016da:	008a      	lsls	r2, r1, #2
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	4603      	mov	r3, r0
 80016e2:	4622      	mov	r2, r4
 80016e4:	189b      	adds	r3, r3, r2
 80016e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80016e8:	462b      	mov	r3, r5
 80016ea:	460a      	mov	r2, r1
 80016ec:	eb42 0303 	adc.w	r3, r2, r3
 80016f0:	677b      	str	r3, [r7, #116]	@ 0x74
 80016f2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80016f6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80016fa:	f7ff fa75 	bl	8000be8 <__aeabi_ldivmod>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800170a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800170e:	b21b      	sxth	r3, r3
 8001710:	17da      	asrs	r2, r3, #31
 8001712:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001714:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001716:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800171a:	f04f 0000 	mov.w	r0, #0
 800171e:	f04f 0100 	mov.w	r1, #0
 8001722:	0b50      	lsrs	r0, r2, #13
 8001724:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001728:	1359      	asrs	r1, r3, #13
 800172a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800172e:	462b      	mov	r3, r5
 8001730:	fb00 f203 	mul.w	r2, r0, r3
 8001734:	4623      	mov	r3, r4
 8001736:	fb03 f301 	mul.w	r3, r3, r1
 800173a:	4413      	add	r3, r2
 800173c:	4622      	mov	r2, r4
 800173e:	fba2 1200 	umull	r1, r2, r2, r0
 8001742:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001746:	460a      	mov	r2, r1
 8001748:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800174c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001750:	4413      	add	r3, r2
 8001752:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001756:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800175a:	f04f 0000 	mov.w	r0, #0
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	0b50      	lsrs	r0, r2, #13
 8001764:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001768:	1359      	asrs	r1, r3, #13
 800176a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800176e:	462b      	mov	r3, r5
 8001770:	fb00 f203 	mul.w	r2, r0, r3
 8001774:	4623      	mov	r3, r4
 8001776:	fb03 f301 	mul.w	r3, r3, r1
 800177a:	4413      	add	r3, r2
 800177c:	4622      	mov	r2, r4
 800177e:	fba2 1200 	umull	r1, r2, r2, r0
 8001782:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001786:	460a      	mov	r2, r1
 8001788:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800178c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001790:	4413      	add	r3, r2
 8001792:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80017a2:	4621      	mov	r1, r4
 80017a4:	0e4a      	lsrs	r2, r1, #25
 80017a6:	4629      	mov	r1, r5
 80017a8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80017ac:	4629      	mov	r1, r5
 80017ae:	164b      	asrs	r3, r1, #25
 80017b0:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80017b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017b8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80017bc:	b21b      	sxth	r3, r3
 80017be:	17da      	asrs	r2, r3, #31
 80017c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80017c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80017c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80017c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017cc:	462a      	mov	r2, r5
 80017ce:	fb02 f203 	mul.w	r2, r2, r3
 80017d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80017d6:	4621      	mov	r1, r4
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80017e2:	4621      	mov	r1, r4
 80017e4:	fba2 1201 	umull	r1, r2, r2, r1
 80017e8:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80017ec:	460a      	mov	r2, r1
 80017ee:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80017f2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80017f6:	4413      	add	r3, r2
 80017f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001808:	4621      	mov	r1, r4
 800180a:	0cca      	lsrs	r2, r1, #19
 800180c:	4629      	mov	r1, r5
 800180e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001812:	4629      	mov	r1, r5
 8001814:	14cb      	asrs	r3, r1, #19
 8001816:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 800181a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800181e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001822:	1884      	adds	r4, r0, r2
 8001824:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001826:	eb41 0303 	adc.w	r3, r1, r3
 800182a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800182c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001830:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001834:	4621      	mov	r1, r4
 8001836:	1889      	adds	r1, r1, r2
 8001838:	6539      	str	r1, [r7, #80]	@ 0x50
 800183a:	4629      	mov	r1, r5
 800183c:	eb43 0101 	adc.w	r1, r3, r1
 8001840:	6579      	str	r1, [r7, #84]	@ 0x54
 8001842:	f04f 0000 	mov.w	r0, #0
 8001846:	f04f 0100 	mov.w	r1, #0
 800184a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800184e:	4623      	mov	r3, r4
 8001850:	0a18      	lsrs	r0, r3, #8
 8001852:	462b      	mov	r3, r5
 8001854:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001858:	462b      	mov	r3, r5
 800185a:	1219      	asrs	r1, r3, #8
 800185c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001860:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001864:	b21b      	sxth	r3, r3
 8001866:	17da      	asrs	r2, r3, #31
 8001868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800186a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001878:	464c      	mov	r4, r9
 800187a:	0123      	lsls	r3, r4, #4
 800187c:	4644      	mov	r4, r8
 800187e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001882:	4644      	mov	r4, r8
 8001884:	0122      	lsls	r2, r4, #4
 8001886:	1884      	adds	r4, r0, r2
 8001888:	603c      	str	r4, [r7, #0]
 800188a:	eb41 0303 	adc.w	r3, r1, r3
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001894:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001898:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 800189c:	4618      	mov	r0, r3
 800189e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80018a2:	46bd      	mov	sp, r7
 80018a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080018a8 <bmp280_read_fixed>:
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
	return v_x1_u32r >> 12;
}

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	@ 0x28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
	// Only the BME280 supports reading the humidity.


	// Need to read in one sequence to ensure they match.

	if (read_data(dev, 0xf7, data, 6)) {
 80018b4:	f107 0218 	add.w	r2, r7, #24
 80018b8:	2306      	movs	r3, #6
 80018ba:	21f7      	movs	r1, #247	@ 0xf7
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff fba3 	bl	8001008 <read_data>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <bmp280_read_fixed+0x24>
		return false;
 80018c8:	2300      	movs	r3, #0
 80018ca:	e027      	b.n	800191c <bmp280_read_fixed+0x74>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80018cc:	7e3b      	ldrb	r3, [r7, #24]
 80018ce:	031a      	lsls	r2, r3, #12
 80018d0:	7e7b      	ldrb	r3, [r7, #25]
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	4313      	orrs	r3, r2
 80018d6:	7eba      	ldrb	r2, [r7, #26]
 80018d8:	0912      	lsrs	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	4313      	orrs	r3, r2
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80018e0:	7efb      	ldrb	r3, [r7, #27]
 80018e2:	031a      	lsls	r2, r3, #12
 80018e4:	7f3b      	ldrb	r3, [r7, #28]
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4313      	orrs	r3, r2
 80018ea:	7f7a      	ldrb	r2, [r7, #29]
 80018ec:	0912      	lsrs	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	4313      	orrs	r3, r2
 80018f2:	623b      	str	r3, [r7, #32]

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	461a      	mov	r2, r3
 80018fa:	6a39      	ldr	r1, [r7, #32]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7ff fcdc 	bl	80012ba <compensate_temperature>
 8001902:	4602      	mov	r2, r0
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	461a      	mov	r2, r3
 800190c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff fd0c 	bl	800132c <compensate_pressure>
 8001914:	4602      	mov	r2, r0
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	601a      	str	r2, [r3, #0]



	return true;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	3728      	adds	r7, #40	@ 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;

	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure
 8001930:	f107 0210 	add.w	r2, r7, #16
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff ffb4 	bl	80018a8 <bmp280_read_fixed>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d019      	beq.n	800197a <bmp280_read_float+0x56>
			)) {
		*temperature = (float) fixed_temperature / 100;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001950:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001984 <bmp280_read_float+0x60>
 8001954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001968:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001988 <bmp280_read_float+0x64>
 800196c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	edc3 7a00 	vstr	s15, [r3]

		return true;
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <bmp280_read_float+0x58>
	}

	return false;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	42c80000 	.word	0x42c80000
 8001988:	43800000 	.word	0x43800000

0800198c <kalman_filter_init>:


#include "kalman_filter.h"


void kalman_filter_init(KalmanFilter* kf) {
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

    kf->q_angle = 0.001f;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a0f      	ldr	r2, [pc, #60]	@ (80019d4 <kalman_filter_init+0x48>)
 8001998:	601a      	str	r2, [r3, #0]
    kf->r_measure = 0.03f;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a0e      	ldr	r2, [pc, #56]	@ (80019d8 <kalman_filter_init+0x4c>)
 800199e:	605a      	str	r2, [r3, #4]
    kf->angle = 0.0f;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
    kf->p[0][0] = 0.0f;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
    kf->p[0][1] = 0.0f;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
    kf->p[1][0] = 0.0f;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
    kf->p[1][1] = 0.0f;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	3a83126f 	.word	0x3a83126f
 80019d8:	3cf5c28f 	.word	0x3cf5c28f

080019dc <kalman_filter_get_angle>:

float kalman_filter_get_angle(KalmanFilter* kf, float new_angle, float dt) {
 80019dc:	b480      	push	{r7}
 80019de:	b08b      	sub	sp, #44	@ 0x2c
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80019e8:	edc7 0a01 	vstr	s1, [r7, #4]
    // Step 1: Predict
    kf->angle += 0.0f; // No gyroscope rate, angle remains the same
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80019f2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001b8c <kalman_filter_get_angle+0x1b0>
 80019f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	edc3 7a02 	vstr	s15, [r3, #8]

    kf->p[0][0] += dt * (dt * kf->p[1][1] - kf->p[0][1] - kf->p[1][0] + kf->q_angle);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	edd3 6a06 	vldr	s13, [r3, #24]
 8001a0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a1a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->p[0][1] -= dt * kf->p[1][1];
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001a50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->p[1][0] -= dt * kf->p[1][1];
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	edd3 6a06 	vldr	s13, [r3, #24]
 8001a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->p[1][1] += 0.0f; // No process noise for bias
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a86:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001b8c <kalman_filter_get_angle+0x1b0>
 8001a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	edc3 7a06 	vstr	s15, [r3, #24]

    // Step 2: Update
    float s = kf->p[0][0] + kf->r_measure;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float k[2];
    k[0] = kf->p[0][0] / s;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	edd3 6a03 	vldr	s13, [r3, #12]
 8001aae:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab6:	edc7 7a04 	vstr	s15, [r7, #16]
    k[1] = kf->p[1][0] / s;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	edd3 6a05 	vldr	s13, [r3, #20]
 8001ac0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac8:	edc7 7a05 	vstr	s15, [r7, #20]

    float y = new_angle - kf->angle;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ad2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ada:	edc7 7a08 	vstr	s15, [r7, #32]
    kf->angle += k[0] * y;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ae4:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ae8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	edc3 7a02 	vstr	s15, [r3, #8]

    float p00_temp = kf->p[0][0];
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	61fb      	str	r3, [r7, #28]
    float p01_temp = kf->p[0][1];
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	61bb      	str	r3, [r7, #24]

    kf->p[0][0] -= k[0] * p00_temp;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b0c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b10:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	edc3 7a03 	vstr	s15, [r3, #12]
    kf->p[0][1] -= k[0] * p01_temp;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b28:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->p[1][0] -= k[1] * p00_temp;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b44:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b48:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->p[1][1] -= k[1] * p01_temp;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b60:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	edc3 7a06 	vstr	s15, [r3, #24]

    return kf->angle;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	ee07 3a90 	vmov	s15, r3
}
 8001b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b82:	372c      	adds	r7, #44	@ 0x2c
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	00000000 	.word	0x00000000

08001b90 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001b98:	22b0      	movs	r2, #176	@ 0xb0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f005 fdca 	bl	8007736 <memset>
    return 1;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	0000      	movs	r0, r0
	...

08001bb0 <CalculateAltidude>:




float CalculateAltidude(float pressure)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	ed87 0a01 	vstr	s0, [r7, #4]
	return 44330.0*(1.0 - pow((pressure/101325),0.1903)     )+65;
 8001bba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bbe:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001c40 <CalculateAltidude+0x90>
 8001bc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bc6:	ee16 0a90 	vmov	r0, s13
 8001bca:	f7fe fcb5 	bl	8000538 <__aeabi_f2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8001c30 <CalculateAltidude+0x80>
 8001bd6:	ec43 2b10 	vmov	d0, r2, r3
 8001bda:	f006 fbc7 	bl	800836c <pow>
 8001bde:	ec53 2b10 	vmov	r2, r3, d0
 8001be2:	f04f 0000 	mov.w	r0, #0
 8001be6:	4917      	ldr	r1, [pc, #92]	@ (8001c44 <CalculateAltidude+0x94>)
 8001be8:	f7fe fb46 	bl	8000278 <__aeabi_dsub>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	a310      	add	r3, pc, #64	@ (adr r3, 8001c38 <CalculateAltidude+0x88>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fcf5 	bl	80005e8 <__aeabi_dmul>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <CalculateAltidude+0x98>)
 8001c0c:	f7fe fb36 	bl	800027c <__adddf3>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe ff96 	bl	8000b48 <__aeabi_d2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	ee07 3a90 	vmov	s15, r3
}
 8001c22:	eeb0 0a67 	vmov.f32	s0, s15
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	f3af 8000 	nop.w
 8001c30:	1a36e2eb 	.word	0x1a36e2eb
 8001c34:	3fc85bc0 	.word	0x3fc85bc0
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	40e5a540 	.word	0x40e5a540
 8001c40:	47c5e680 	.word	0x47c5e680
 8001c44:	3ff00000 	.word	0x3ff00000
 8001c48:	40504000 	.word	0x40504000
 8001c4c:	00000000 	.word	0x00000000

08001c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	b08c      	sub	sp, #48	@ 0x30
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	float dt = 0;
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28


	KalmanFilter kf;
	kalman_filter_init(&kf);
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fe93 	bl	800198c <kalman_filter_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c66:	f001 fde1 	bl	800382c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c6a:	f000 f8db 	bl	8001e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c6e:	f000 fc1d 	bl	80024ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c72:	f000 f943 	bl	8001efc <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c76:	f000 f96f 	bl	8001f58 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001c7a:	f000 f99b 	bl	8001fb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c7e:	f000 fa29 	bl	80020d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c82:	f000 fabf 	bl	8002204 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001c86:	f000 fb55 	bl	8002334 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001c8a:	f000 fbe5 	bl	8002458 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  while(mpu6500_init(&hi2c1, MPU6500_I2C_ADDR));
 8001c8e:	bf00      	nop
 8001c90:	2168      	movs	r1, #104	@ 0x68
 8001c92:	4855      	ldr	r0, [pc, #340]	@ (8001de8 <main+0x198>)
 8001c94:	f000 fcc8 	bl	8002628 <mpu6500_init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f8      	bne.n	8001c90 <main+0x40>
    uint32_t previous_tick = HAL_GetTick();
 8001c9e:	f001 fe2b 	bl	80038f8 <HAL_GetTick>
 8001ca2:	62f8      	str	r0, [r7, #44]	@ 0x2c


    bmp280_init_default_params(&bmp280.params);
 8001ca4:	4851      	ldr	r0, [pc, #324]	@ (8001dec <main+0x19c>)
 8001ca6:	f7ff f967 	bl	8000f78 <bmp280_init_default_params>
      bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001caa:	4b51      	ldr	r3, [pc, #324]	@ (8001df0 <main+0x1a0>)
 8001cac:	2276      	movs	r2, #118	@ 0x76
 8001cae:	849a      	strh	r2, [r3, #36]	@ 0x24
      bmp280.i2c = &hi2c3;
 8001cb0:	4b4f      	ldr	r3, [pc, #316]	@ (8001df0 <main+0x1a0>)
 8001cb2:	4a50      	ldr	r2, [pc, #320]	@ (8001df4 <main+0x1a4>)
 8001cb4:	629a      	str	r2, [r3, #40]	@ 0x28

      	while (!bmp280_init(&bmp280, &bmp280.params))
 8001cb6:	e002      	b.n	8001cbe <main+0x6e>
      	{

      			HAL_Delay(100);
 8001cb8:	2064      	movs	r0, #100	@ 0x64
 8001cba:	f001 fe29 	bl	8003910 <HAL_Delay>
      	while (!bmp280_init(&bmp280, &bmp280.params))
 8001cbe:	494b      	ldr	r1, [pc, #300]	@ (8001dec <main+0x19c>)
 8001cc0:	484b      	ldr	r0, [pc, #300]	@ (8001df0 <main+0x1a0>)
 8001cc2:	f7ff fa70 	bl	80011a6 <bmp280_init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f083 0301 	eor.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f2      	bne.n	8001cb8 <main+0x68>
      	}



      	lwgps_init(&gps);
 8001cd2:	4849      	ldr	r0, [pc, #292]	@ (8001df8 <main+0x1a8>)
 8001cd4:	f7ff ff5c 	bl	8001b90 <lwgps_init>
      	    HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4948      	ldr	r1, [pc, #288]	@ (8001dfc <main+0x1ac>)
 8001cdc:	4848      	ldr	r0, [pc, #288]	@ (8001e00 <main+0x1b0>)
 8001cde:	f005 f93f 	bl	8006f60 <HAL_UART_Receive_IT>
   Receiver_Init();
 8001ce2:	f000 fd69 	bl	80027b8 <Receiver_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint32_t current_tick = HAL_GetTick();
 8001ce6:	f001 fe07 	bl	80038f8 <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	@ 0x24
	  	  dt = (current_tick -previous_tick) /1000.0f;
 8001cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cfa:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8001e04 <main+0x1b4>
 8001cfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d02:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	  	  previous_tick = current_tick;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  	mpu6500_read_accelerometer_data(&hi2c1, MPU6500_I2C_ADDR, &g_accel_data);
 8001d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e08 <main+0x1b8>)
 8001d0c:	2168      	movs	r1, #104	@ 0x68
 8001d0e:	4836      	ldr	r0, [pc, #216]	@ (8001de8 <main+0x198>)
 8001d10:	f000 fce4 	bl	80026dc <mpu6500_read_accelerometer_data>

	  		  g_accel_data = mpu6500_accelerometer_calibration(&error_offset, &g_accel_data);
 8001d14:	4c3c      	ldr	r4, [pc, #240]	@ (8001e08 <main+0x1b8>)
 8001d16:	463b      	mov	r3, r7
 8001d18:	4a3b      	ldr	r2, [pc, #236]	@ (8001e08 <main+0x1b8>)
 8001d1a:	493c      	ldr	r1, [pc, #240]	@ (8001e0c <main+0x1bc>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fd12 	bl	8002746 <mpu6500_accelerometer_calibration>
 8001d22:	4622      	mov	r2, r4
 8001d24:	463b      	mov	r3, r7
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	6010      	str	r0, [r2, #0]
 8001d2a:	889b      	ldrh	r3, [r3, #4]
 8001d2c:	8093      	strh	r3, [r2, #4]

	  		  roll_angle= atan2(g_accel_data.y,g_accel_data.z) *(180.0/M_PI);
 8001d2e:	4b36      	ldr	r3, [pc, #216]	@ (8001e08 <main+0x1b8>)
 8001d30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fbed 	bl	8000514 <__aeabi_i2d>
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	460d      	mov	r5, r1
 8001d3e:	4b32      	ldr	r3, [pc, #200]	@ (8001e08 <main+0x1b8>)
 8001d40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fbe5 	bl	8000514 <__aeabi_i2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	ec43 2b11 	vmov	d1, r2, r3
 8001d52:	ec45 4b10 	vmov	d0, r4, r5
 8001d56:	f006 fb07 	bl	8008368 <atan2>
 8001d5a:	ec51 0b10 	vmov	r0, r1, d0
 8001d5e:	a320      	add	r3, pc, #128	@ (adr r3, 8001de0 <main+0x190>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fc40 	bl	80005e8 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe feea 	bl	8000b48 <__aeabi_d2f>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4a26      	ldr	r2, [pc, #152]	@ (8001e10 <main+0x1c0>)
 8001d78:	6013      	str	r3, [r2, #0]

	  		  kalman_roll_angle = kalman_filter_get_angle(&kf, roll_angle, dt);
 8001d7a:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <main+0x1c0>)
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001d88:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fe25 	bl	80019dc <kalman_filter_get_angle>
 8001d92:	eef0 7a40 	vmov.f32	s15, s0
 8001d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d9a:	ee17 3a90 	vmov	r3, s15
 8001d9e:	b21a      	sxth	r2, r3
 8001da0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <main+0x1c4>)
 8001da2:	801a      	strh	r2, [r3, #0]
	  			  //HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
	  		  }



	  		while (!bmp280_read_float(&bmp280, &temperature, &pressure))
 8001da4:	bf00      	nop
 8001da6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e18 <main+0x1c8>)
 8001da8:	491c      	ldr	r1, [pc, #112]	@ (8001e1c <main+0x1cc>)
 8001daa:	4811      	ldr	r0, [pc, #68]	@ (8001df0 <main+0x1a0>)
 8001dac:	f7ff fdba 	bl	8001924 <bmp280_read_float>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f083 0301 	eor.w	r3, r3, #1
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f4      	bne.n	8001da6 <main+0x156>
	  			  {

	  			  }

	  			  altidude = CalculateAltidude(pressure);
 8001dbc:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <main+0x1c8>)
 8001dbe:	edd3 7a00 	vldr	s15, [r3]
 8001dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc6:	f7ff fef3 	bl	8001bb0 <CalculateAltidude>
 8001dca:	eef0 7a40 	vmov.f32	s15, s0
 8001dce:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <main+0x1d0>)
 8001dd0:	edc3 7a00 	vstr	s15, [r3]

	  		HAL_Delay(10);
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	f001 fd9b 	bl	8003910 <HAL_Delay>
  {
 8001dda:	e784      	b.n	8001ce6 <main+0x96>
 8001ddc:	f3af 8000 	nop.w
 8001de0:	1a63c1f8 	.word	0x1a63c1f8
 8001de4:	404ca5dc 	.word	0x404ca5dc
 8001de8:	200000e4 	.word	0x200000e4
 8001dec:	200000c0 	.word	0x200000c0
 8001df0:	20000094 	.word	0x20000094
 8001df4:	20000138 	.word	0x20000138
 8001df8:	200002f8 	.word	0x200002f8
 8001dfc:	200003a8 	.word	0x200003a8
 8001e00:	200002ac 	.word	0x200002ac
 8001e04:	447a0000 	.word	0x447a0000
 8001e08:	200000dc 	.word	0x200000dc
 8001e0c:	0800973c 	.word	0x0800973c
 8001e10:	200000d4 	.word	0x200000d4
 8001e14:	200000d8 	.word	0x200000d8
 8001e18:	200000c8 	.word	0x200000c8
 8001e1c:	200000cc 	.word	0x200000cc
 8001e20:	200000d0 	.word	0x200000d0

08001e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b094      	sub	sp, #80	@ 0x50
 8001e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2a:	f107 0320 	add.w	r3, r7, #32
 8001e2e:	2230      	movs	r2, #48	@ 0x30
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f005 fc7f 	bl	8007736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	4b29      	ldr	r3, [pc, #164]	@ (8001ef4 <SystemClock_Config+0xd0>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	4a28      	ldr	r2, [pc, #160]	@ (8001ef4 <SystemClock_Config+0xd0>)
 8001e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e58:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <SystemClock_Config+0xd0>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <SystemClock_Config+0xd4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a22      	ldr	r2, [pc, #136]	@ (8001ef8 <SystemClock_Config+0xd4>)
 8001e6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <SystemClock_Config+0xd4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001e80:	2309      	movs	r3, #9
 8001e82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e9c:	23a8      	movs	r3, #168	@ 0xa8
 8001e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea8:	f107 0320 	add.w	r3, r7, #32
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 f825 	bl	8004efc <HAL_RCC_OscConfig>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001eb8:	f000 fb4a 	bl	8002550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ec8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ecc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	2105      	movs	r1, #5
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 fa86 	bl	80053ec <HAL_RCC_ClockConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ee6:	f000 fb33 	bl	8002550 <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3750      	adds	r7, #80	@ 0x50
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000

08001efc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f02:	4a13      	ldr	r2, [pc, #76]	@ (8001f50 <MX_I2C1_Init+0x54>)
 8001f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f08:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <MX_I2C1_Init+0x58>)
 8001f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f38:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f3a:	f001 ffbb 	bl	8003eb4 <HAL_I2C_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f44:	f000 fb04 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200000e4 	.word	0x200000e4
 8001f50:	40005400 	.word	0x40005400
 8001f54:	00061a80 	.word	0x00061a80

08001f58 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <MX_I2C3_Init+0x50>)
 8001f5e:	4a13      	ldr	r2, [pc, #76]	@ (8001fac <MX_I2C3_Init+0x54>)
 8001f60:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001f62:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <MX_I2C3_Init+0x50>)
 8001f64:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <MX_I2C3_Init+0x58>)
 8001f66:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <MX_I2C3_Init+0x50>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <MX_I2C3_Init+0x50>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <MX_I2C3_Init+0x50>)
 8001f76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f7a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <MX_I2C3_Init+0x50>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <MX_I2C3_Init+0x50>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f88:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <MX_I2C3_Init+0x50>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <MX_I2C3_Init+0x50>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f94:	4804      	ldr	r0, [pc, #16]	@ (8001fa8 <MX_I2C3_Init+0x50>)
 8001f96:	f001 ff8d 	bl	8003eb4 <HAL_I2C_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001fa0:	f000 fad6 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000138 	.word	0x20000138
 8001fac:	40005c00 	.word	0x40005c00
 8001fb0:	00061a80 	.word	0x00061a80

08001fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	@ 0x28
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fba:	f107 0318 	add.w	r3, r7, #24
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fde:	4b3c      	ldr	r3, [pc, #240]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 8001fe0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fe4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001fe6:	4b3a      	ldr	r3, [pc, #232]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 8001fe8:	2253      	movs	r2, #83	@ 0x53
 8001fea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b38      	ldr	r3, [pc, #224]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF-1;
 8001ff2:	4b37      	ldr	r3, [pc, #220]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 8001ff4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001ff8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	4b35      	ldr	r3, [pc, #212]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002000:	4b33      	ldr	r3, [pc, #204]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002006:	4832      	ldr	r0, [pc, #200]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 8002008:	f003 fc10 	bl	800582c <HAL_TIM_Base_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002012:	f000 fa9d 	bl	8002550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002016:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800201a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800201c:	f107 0318 	add.w	r3, r7, #24
 8002020:	4619      	mov	r1, r3
 8002022:	482b      	ldr	r0, [pc, #172]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 8002024:	f004 f942 	bl	80062ac <HAL_TIM_ConfigClockSource>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800202e:	f000 fa8f 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002032:	4827      	ldr	r0, [pc, #156]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 8002034:	f003 fd6a 	bl	8005b0c <HAL_TIM_IC_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800203e:	f000 fa87 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800204a:	f107 0310 	add.w	r3, r7, #16
 800204e:	4619      	mov	r1, r3
 8002050:	481f      	ldr	r0, [pc, #124]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 8002052:	f004 fea5 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800205c:	f000 fa78 	bl	8002550 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002060:	2300      	movs	r3, #0
 8002062:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002064:	2301      	movs	r3, #1
 8002066:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002070:	463b      	mov	r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	4619      	mov	r1, r3
 8002076:	4816      	ldr	r0, [pc, #88]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 8002078:	f003 ffba 	bl	8005ff0 <HAL_TIM_IC_ConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002082:	f000 fa65 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002086:	463b      	mov	r3, r7
 8002088:	2204      	movs	r2, #4
 800208a:	4619      	mov	r1, r3
 800208c:	4810      	ldr	r0, [pc, #64]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 800208e:	f003 ffaf 	bl	8005ff0 <HAL_TIM_IC_ConfigChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002098:	f000 fa5a 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800209c:	463b      	mov	r3, r7
 800209e:	2208      	movs	r2, #8
 80020a0:	4619      	mov	r1, r3
 80020a2:	480b      	ldr	r0, [pc, #44]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 80020a4:	f003 ffa4 	bl	8005ff0 <HAL_TIM_IC_ConfigChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 80020ae:	f000 fa4f 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80020b2:	463b      	mov	r3, r7
 80020b4:	220c      	movs	r2, #12
 80020b6:	4619      	mov	r1, r3
 80020b8:	4805      	ldr	r0, [pc, #20]	@ (80020d0 <MX_TIM2_Init+0x11c>)
 80020ba:	f003 ff99 	bl	8005ff0 <HAL_TIM_IC_ConfigChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 80020c4:	f000 fa44 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	@ 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	2000018c 	.word	0x2000018c

080020d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08e      	sub	sp, #56	@ 0x38
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e8:	f107 0320 	add.w	r3, r7, #32
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002104:	4b3d      	ldr	r3, [pc, #244]	@ (80021fc <MX_TIM3_Init+0x128>)
 8002106:	4a3e      	ldr	r2, [pc, #248]	@ (8002200 <MX_TIM3_Init+0x12c>)
 8002108:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800210a:	4b3c      	ldr	r3, [pc, #240]	@ (80021fc <MX_TIM3_Init+0x128>)
 800210c:	2253      	movs	r2, #83	@ 0x53
 800210e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b3a      	ldr	r3, [pc, #232]	@ (80021fc <MX_TIM3_Init+0x128>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19700;
 8002116:	4b39      	ldr	r3, [pc, #228]	@ (80021fc <MX_TIM3_Init+0x128>)
 8002118:	f644 42f4 	movw	r2, #19700	@ 0x4cf4
 800211c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211e:	4b37      	ldr	r3, [pc, #220]	@ (80021fc <MX_TIM3_Init+0x128>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002124:	4b35      	ldr	r3, [pc, #212]	@ (80021fc <MX_TIM3_Init+0x128>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800212a:	4834      	ldr	r0, [pc, #208]	@ (80021fc <MX_TIM3_Init+0x128>)
 800212c:	f003 fb7e 	bl	800582c <HAL_TIM_Base_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002136:	f000 fa0b 	bl	8002550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800213e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002140:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002144:	4619      	mov	r1, r3
 8002146:	482d      	ldr	r0, [pc, #180]	@ (80021fc <MX_TIM3_Init+0x128>)
 8002148:	f004 f8b0 	bl	80062ac <HAL_TIM_ConfigClockSource>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002152:	f000 f9fd 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002156:	4829      	ldr	r0, [pc, #164]	@ (80021fc <MX_TIM3_Init+0x128>)
 8002158:	f003 fbb7 	bl	80058ca <HAL_TIM_PWM_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002162:	f000 f9f5 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800216e:	f107 0320 	add.w	r3, r7, #32
 8002172:	4619      	mov	r1, r3
 8002174:	4821      	ldr	r0, [pc, #132]	@ (80021fc <MX_TIM3_Init+0x128>)
 8002176:	f004 fe13 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002180:	f000 f9e6 	bl	8002550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002184:	2360      	movs	r3, #96	@ 0x60
 8002186:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	2200      	movs	r2, #0
 8002198:	4619      	mov	r1, r3
 800219a:	4818      	ldr	r0, [pc, #96]	@ (80021fc <MX_TIM3_Init+0x128>)
 800219c:	f003 ffc4 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80021a6:	f000 f9d3 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2204      	movs	r2, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	4812      	ldr	r0, [pc, #72]	@ (80021fc <MX_TIM3_Init+0x128>)
 80021b2:	f003 ffb9 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80021bc:	f000 f9c8 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	2208      	movs	r2, #8
 80021c4:	4619      	mov	r1, r3
 80021c6:	480d      	ldr	r0, [pc, #52]	@ (80021fc <MX_TIM3_Init+0x128>)
 80021c8:	f003 ffae 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80021d2:	f000 f9bd 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	220c      	movs	r2, #12
 80021da:	4619      	mov	r1, r3
 80021dc:	4807      	ldr	r0, [pc, #28]	@ (80021fc <MX_TIM3_Init+0x128>)
 80021de:	f003 ffa3 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80021e8:	f000 f9b2 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021ec:	4803      	ldr	r0, [pc, #12]	@ (80021fc <MX_TIM3_Init+0x128>)
 80021ee:	f001 f92f 	bl	8003450 <HAL_TIM_MspPostInit>

}
 80021f2:	bf00      	nop
 80021f4:	3738      	adds	r7, #56	@ 0x38
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200001d4 	.word	0x200001d4
 8002200:	40000400 	.word	0x40000400

08002204 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08e      	sub	sp, #56	@ 0x38
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002218:	f107 0320 	add.w	r3, r7, #32
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
 8002230:	615a      	str	r2, [r3, #20]
 8002232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002234:	4b3d      	ldr	r3, [pc, #244]	@ (800232c <MX_TIM4_Init+0x128>)
 8002236:	4a3e      	ldr	r2, [pc, #248]	@ (8002330 <MX_TIM4_Init+0x12c>)
 8002238:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800223a:	4b3c      	ldr	r3, [pc, #240]	@ (800232c <MX_TIM4_Init+0x128>)
 800223c:	2253      	movs	r2, #83	@ 0x53
 800223e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002240:	4b3a      	ldr	r3, [pc, #232]	@ (800232c <MX_TIM4_Init+0x128>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19700;
 8002246:	4b39      	ldr	r3, [pc, #228]	@ (800232c <MX_TIM4_Init+0x128>)
 8002248:	f644 42f4 	movw	r2, #19700	@ 0x4cf4
 800224c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224e:	4b37      	ldr	r3, [pc, #220]	@ (800232c <MX_TIM4_Init+0x128>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002254:	4b35      	ldr	r3, [pc, #212]	@ (800232c <MX_TIM4_Init+0x128>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800225a:	4834      	ldr	r0, [pc, #208]	@ (800232c <MX_TIM4_Init+0x128>)
 800225c:	f003 fae6 	bl	800582c <HAL_TIM_Base_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002266:	f000 f973 	bl	8002550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002270:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002274:	4619      	mov	r1, r3
 8002276:	482d      	ldr	r0, [pc, #180]	@ (800232c <MX_TIM4_Init+0x128>)
 8002278:	f004 f818 	bl	80062ac <HAL_TIM_ConfigClockSource>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002282:	f000 f965 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002286:	4829      	ldr	r0, [pc, #164]	@ (800232c <MX_TIM4_Init+0x128>)
 8002288:	f003 fb1f 	bl	80058ca <HAL_TIM_PWM_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002292:	f000 f95d 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800229e:	f107 0320 	add.w	r3, r7, #32
 80022a2:	4619      	mov	r1, r3
 80022a4:	4821      	ldr	r0, [pc, #132]	@ (800232c <MX_TIM4_Init+0x128>)
 80022a6:	f004 fd7b 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80022b0:	f000 f94e 	bl	8002550 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022b4:	2360      	movs	r3, #96	@ 0x60
 80022b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	2200      	movs	r2, #0
 80022c8:	4619      	mov	r1, r3
 80022ca:	4818      	ldr	r0, [pc, #96]	@ (800232c <MX_TIM4_Init+0x128>)
 80022cc:	f003 ff2c 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80022d6:	f000 f93b 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2204      	movs	r2, #4
 80022de:	4619      	mov	r1, r3
 80022e0:	4812      	ldr	r0, [pc, #72]	@ (800232c <MX_TIM4_Init+0x128>)
 80022e2:	f003 ff21 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80022ec:	f000 f930 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2208      	movs	r2, #8
 80022f4:	4619      	mov	r1, r3
 80022f6:	480d      	ldr	r0, [pc, #52]	@ (800232c <MX_TIM4_Init+0x128>)
 80022f8:	f003 ff16 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002302:	f000 f925 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	220c      	movs	r2, #12
 800230a:	4619      	mov	r1, r3
 800230c:	4807      	ldr	r0, [pc, #28]	@ (800232c <MX_TIM4_Init+0x128>)
 800230e:	f003 ff0b 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8002318:	f000 f91a 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800231c:	4803      	ldr	r0, [pc, #12]	@ (800232c <MX_TIM4_Init+0x128>)
 800231e:	f001 f897 	bl	8003450 <HAL_TIM_MspPostInit>

}
 8002322:	bf00      	nop
 8002324:	3738      	adds	r7, #56	@ 0x38
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2000021c 	.word	0x2000021c
 8002330:	40000800 	.word	0x40000800

08002334 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	@ 0x28
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800233a:	f107 0318 	add.w	r3, r7, #24
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002352:	463b      	mov	r3, r7
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800235e:	4b3c      	ldr	r3, [pc, #240]	@ (8002450 <MX_TIM5_Init+0x11c>)
 8002360:	4a3c      	ldr	r2, [pc, #240]	@ (8002454 <MX_TIM5_Init+0x120>)
 8002362:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002364:	4b3a      	ldr	r3, [pc, #232]	@ (8002450 <MX_TIM5_Init+0x11c>)
 8002366:	2253      	movs	r2, #83	@ 0x53
 8002368:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236a:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <MX_TIM5_Init+0x11c>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF-1;
 8002370:	4b37      	ldr	r3, [pc, #220]	@ (8002450 <MX_TIM5_Init+0x11c>)
 8002372:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002376:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002378:	4b35      	ldr	r3, [pc, #212]	@ (8002450 <MX_TIM5_Init+0x11c>)
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237e:	4b34      	ldr	r3, [pc, #208]	@ (8002450 <MX_TIM5_Init+0x11c>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002384:	4832      	ldr	r0, [pc, #200]	@ (8002450 <MX_TIM5_Init+0x11c>)
 8002386:	f003 fa51 	bl	800582c <HAL_TIM_Base_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8002390:	f000 f8de 	bl	8002550 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002394:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002398:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800239a:	f107 0318 	add.w	r3, r7, #24
 800239e:	4619      	mov	r1, r3
 80023a0:	482b      	ldr	r0, [pc, #172]	@ (8002450 <MX_TIM5_Init+0x11c>)
 80023a2:	f003 ff83 	bl	80062ac <HAL_TIM_ConfigClockSource>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80023ac:	f000 f8d0 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80023b0:	4827      	ldr	r0, [pc, #156]	@ (8002450 <MX_TIM5_Init+0x11c>)
 80023b2:	f003 fbab 	bl	8005b0c <HAL_TIM_IC_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80023bc:	f000 f8c8 	bl	8002550 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	4619      	mov	r1, r3
 80023ce:	4820      	ldr	r0, [pc, #128]	@ (8002450 <MX_TIM5_Init+0x11c>)
 80023d0:	f004 fce6 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 80023da:	f000 f8b9 	bl	8002550 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023de:	2300      	movs	r3, #0
 80023e0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023e2:	2301      	movs	r3, #1
 80023e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023ee:	463b      	mov	r3, r7
 80023f0:	2200      	movs	r2, #0
 80023f2:	4619      	mov	r1, r3
 80023f4:	4816      	ldr	r0, [pc, #88]	@ (8002450 <MX_TIM5_Init+0x11c>)
 80023f6:	f003 fdfb 	bl	8005ff0 <HAL_TIM_IC_ConfigChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8002400:	f000 f8a6 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002404:	463b      	mov	r3, r7
 8002406:	2204      	movs	r2, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4811      	ldr	r0, [pc, #68]	@ (8002450 <MX_TIM5_Init+0x11c>)
 800240c:	f003 fdf0 	bl	8005ff0 <HAL_TIM_IC_ConfigChannel>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM5_Init+0xe6>
  {
    Error_Handler();
 8002416:	f000 f89b 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800241a:	463b      	mov	r3, r7
 800241c:	2208      	movs	r2, #8
 800241e:	4619      	mov	r1, r3
 8002420:	480b      	ldr	r0, [pc, #44]	@ (8002450 <MX_TIM5_Init+0x11c>)
 8002422:	f003 fde5 	bl	8005ff0 <HAL_TIM_IC_ConfigChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM5_Init+0xfc>
  {
    Error_Handler();
 800242c:	f000 f890 	bl	8002550 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002430:	463b      	mov	r3, r7
 8002432:	220c      	movs	r2, #12
 8002434:	4619      	mov	r1, r3
 8002436:	4806      	ldr	r0, [pc, #24]	@ (8002450 <MX_TIM5_Init+0x11c>)
 8002438:	f003 fdda 	bl	8005ff0 <HAL_TIM_IC_ConfigChannel>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM5_Init+0x112>
  {
    Error_Handler();
 8002442:	f000 f885 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	@ 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000264 	.word	0x20000264
 8002454:	40000c00 	.word	0x40000c00

08002458 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800245c:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <MX_USART2_UART_Init+0x4c>)
 800245e:	4a12      	ldr	r2, [pc, #72]	@ (80024a8 <MX_USART2_UART_Init+0x50>)
 8002460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002462:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002464:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800246a:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <MX_USART2_UART_Init+0x4c>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002470:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800247c:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <MX_USART2_UART_Init+0x4c>)
 800247e:	220c      	movs	r2, #12
 8002480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002482:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002488:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <MX_USART2_UART_Init+0x4c>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800248e:	4805      	ldr	r0, [pc, #20]	@ (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002490:	f004 fd16 	bl	8006ec0 <HAL_UART_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800249a:	f000 f859 	bl	8002550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200002ac 	.word	0x200002ac
 80024a8:	40004400 	.word	0x40004400

080024ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	4b25      	ldr	r3, [pc, #148]	@ (800254c <MX_GPIO_Init+0xa0>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	4a24      	ldr	r2, [pc, #144]	@ (800254c <MX_GPIO_Init+0xa0>)
 80024bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c2:	4b22      	ldr	r3, [pc, #136]	@ (800254c <MX_GPIO_Init+0xa0>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	4b1e      	ldr	r3, [pc, #120]	@ (800254c <MX_GPIO_Init+0xa0>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	4a1d      	ldr	r2, [pc, #116]	@ (800254c <MX_GPIO_Init+0xa0>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024de:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <MX_GPIO_Init+0xa0>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b17      	ldr	r3, [pc, #92]	@ (800254c <MX_GPIO_Init+0xa0>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	4a16      	ldr	r2, [pc, #88]	@ (800254c <MX_GPIO_Init+0xa0>)
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fa:	4b14      	ldr	r3, [pc, #80]	@ (800254c <MX_GPIO_Init+0xa0>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	4b10      	ldr	r3, [pc, #64]	@ (800254c <MX_GPIO_Init+0xa0>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	4a0f      	ldr	r2, [pc, #60]	@ (800254c <MX_GPIO_Init+0xa0>)
 8002510:	f043 0308 	orr.w	r3, r3, #8
 8002514:	6313      	str	r3, [r2, #48]	@ 0x30
 8002516:	4b0d      	ldr	r3, [pc, #52]	@ (800254c <MX_GPIO_Init+0xa0>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	4b09      	ldr	r3, [pc, #36]	@ (800254c <MX_GPIO_Init+0xa0>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a08      	ldr	r2, [pc, #32]	@ (800254c <MX_GPIO_Init+0xa0>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <MX_GPIO_Init+0xa0>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800

08002550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002554:	b672      	cpsid	i
}
 8002556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <Error_Handler+0x8>

0800255c <mpu6500_read_byte>:
#define I2C_TIMEOUT 500UL



mpu6500_status_t mpu6500_read_byte(I2C_HandleTypeDef *hi2c,uint8_t reg_addr, uint8_t *data)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	@ 0x28
 8002560:	af04      	add	r7, sp, #16
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	460b      	mov	r3, r1
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = \
			HAL_I2C_Mem_Read(hi2c, MPU6500_I2C_ADDR<<1, reg_addr, 1, data, 1, I2C_TIMEOUT);
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	b29a      	uxth	r2, r3
 800256e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	2301      	movs	r3, #1
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2301      	movs	r3, #1
 800257e:	21d0      	movs	r1, #208	@ 0xd0
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f001 fed5 	bl	8004330 <HAL_I2C_Mem_Read>
 8002586:	4603      	mov	r3, r0
 8002588:	75fb      	strb	r3, [r7, #23]


	return (status == HAL_OK) ? MPU6500_OK : MPU6500_ERR;
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <mpu6500_read>:


mpu6500_status_t mpu6500_read(I2C_HandleTypeDef *hi2c,uint8_t reg_base_addr, uint8_t *buffer, uint32_t nbytes)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b08a      	sub	sp, #40	@ 0x28
 80025a2:	af04      	add	r7, sp, #16
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	460b      	mov	r3, r1
 80025ac:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = \
			HAL_I2C_Mem_Read(hi2c, MPU6500_I2C_ADDR<<1, reg_base_addr, 1, buffer, nbytes, HAL_MAX_DELAY);
 80025ae:	7afb      	ldrb	r3, [r7, #11]
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f04f 31ff 	mov.w	r1, #4294967295
 80025ba:	9102      	str	r1, [sp, #8]
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2301      	movs	r3, #1
 80025c4:	21d0      	movs	r1, #208	@ 0xd0
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f001 feb2 	bl	8004330 <HAL_I2C_Mem_Read>
 80025cc:	4603      	mov	r3, r0
 80025ce:	75fb      	strb	r3, [r7, #23]


	return (status == HAL_OK) ? MPU6500_OK : MPU6500_ERR;
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf14      	ite	ne
 80025d6:	2301      	movne	r3, #1
 80025d8:	2300      	moveq	r3, #0
 80025da:	b2db      	uxtb	r3, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <mpu6500_write_byte>:


mpu6500_status_t mpu6500_write_byte(I2C_HandleTypeDef *hi2c,uint8_t reg_addr, uint8_t data)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af04      	add	r7, sp, #16
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
 80025f0:	4613      	mov	r3, r2
 80025f2:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = \
			HAL_I2C_Mem_Write(hi2c, MPU6500_I2C_ADDR<<1, reg_addr, 1, &data, 1, I2C_TIMEOUT);
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80025fc:	9302      	str	r3, [sp, #8]
 80025fe:	2301      	movs	r3, #1
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	1cbb      	adds	r3, r7, #2
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2301      	movs	r3, #1
 8002608:	21d0      	movs	r1, #208	@ 0xd0
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f001 fd96 	bl	800413c <HAL_I2C_Mem_Write>
 8002610:	4603      	mov	r3, r0
 8002612:	73fb      	strb	r3, [r7, #15]


	return (status == HAL_OK) ? MPU6500_OK : MPU6500_ERR;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf14      	ite	ne
 800261a:	2301      	movne	r3, #1
 800261c:	2300      	moveq	r3, #0
 800261e:	b2db      	uxtb	r3, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <mpu6500_init>:


static uint8_t mpu6500_i2c_addr;

mpu6500_status_t mpu6500_init(I2C_HandleTypeDef *hi2c, uint8_t i2c_dev_addr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]

	mpu6500_i2c_addr = i2c_dev_addr;
 8002634:	4a26      	ldr	r2, [pc, #152]	@ (80026d0 <mpu6500_init+0xa8>)
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	7013      	strb	r3, [r2, #0]
	uint8_t read_byte = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	73bb      	strb	r3, [r7, #14]

	if(mpu6500_read_byte(hi2c, MPU6500_REG_WHOAMI, &read_byte) != MPU6500_OK)
 800263e:	f107 030e 	add.w	r3, r7, #14
 8002642:	461a      	mov	r2, r3
 8002644:	2175      	movs	r1, #117	@ 0x75
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ff88 	bl	800255c <mpu6500_read_byte>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <mpu6500_init+0x2e>
	{
		return MPU6500_ERR;
 8002652:	2301      	movs	r3, #1
 8002654:	e037      	b.n	80026c6 <mpu6500_init+0x9e>
	}


	if(read_byte == 0x68 || read_byte == 0x70)
 8002656:	7bbb      	ldrb	r3, [r7, #14]
 8002658:	2b68      	cmp	r3, #104	@ 0x68
 800265a:	d002      	beq.n	8002662 <mpu6500_init+0x3a>
 800265c:	7bbb      	ldrb	r3, [r7, #14]
 800265e:	2b70      	cmp	r3, #112	@ 0x70
 8002660:	d10f      	bne.n	8002682 <mpu6500_init+0x5a>
	{
		printf("Valid mpu6500 sensor found ");
 8002662:	481c      	ldr	r0, [pc, #112]	@ (80026d4 <mpu6500_init+0xac>)
 8002664:	f005 f812 	bl	800768c <iprintf>
	{
 8002668:	bf00      	nop
	else
	{
		printf("Valid mpu6500 sensor not found ");
		return MPU6500_ERR;
	}
	uint8_t data = 0x00;
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
	if(mpu6500_write_byte(hi2c, MPU6500_REG_PWMGMT_1, data ) !=  MPU6500_OK)
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	461a      	mov	r2, r3
 8002672:	216b      	movs	r1, #107	@ 0x6b
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff ffb5 	bl	80025e4 <mpu6500_write_byte>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <mpu6500_init+0x68>
 8002680:	e004      	b.n	800268c <mpu6500_init+0x64>
		printf("Valid mpu6500 sensor not found ");
 8002682:	4815      	ldr	r0, [pc, #84]	@ (80026d8 <mpu6500_init+0xb0>)
 8002684:	f005 f802 	bl	800768c <iprintf>
		return MPU6500_ERR;
 8002688:	2301      	movs	r3, #1
 800268a:	e01c      	b.n	80026c6 <mpu6500_init+0x9e>
	{
		return MPU6500_ERR;
 800268c:	2301      	movs	r3, #1
 800268e:	e01a      	b.n	80026c6 <mpu6500_init+0x9e>
	}

	data = 0x08;
 8002690:	2308      	movs	r3, #8
 8002692:	73fb      	strb	r3, [r7, #15]
	if(mpu6500_write_byte(hi2c, MPU6500_GYRO_CNFG_REG, data) != MPU6500_OK)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	461a      	mov	r2, r3
 8002698:	211b      	movs	r1, #27
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <mpu6500_write_byte>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <mpu6500_init+0x82>
	{
		return MPU6500_ERR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00d      	b.n	80026c6 <mpu6500_init+0x9e>
	}

	data = 0x10;
 80026aa:	2310      	movs	r3, #16
 80026ac:	73fb      	strb	r3, [r7, #15]
	if(mpu6500_write_byte(hi2c, MPU6500_ACC_CNFG_REG, data) != MPU6500_OK)
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	461a      	mov	r2, r3
 80026b2:	211c      	movs	r1, #28
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff95 	bl	80025e4 <mpu6500_write_byte>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <mpu6500_init+0x9c>
		{
			return MPU6500_ERR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <mpu6500_init+0x9e>
		}


		return MPU6500_OK;
 80026c4:	2300      	movs	r3, #0

}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200003a9 	.word	0x200003a9
 80026d4:	08009700 	.word	0x08009700
 80026d8:	0800971c 	.word	0x0800971c

080026dc <mpu6500_read_accelerometer_data>:



mpu6500_status_t  mpu6500_read_accelerometer_data(I2C_HandleTypeDef *hi2c, uint8_t i2c_dev_addr, mpu6500_accel_data_t *accel_data)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	460b      	mov	r3, r1
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	72fb      	strb	r3, [r7, #11]

	uint8_t raw_data[6];
	mpu6500_status_t status = mpu6500_read(hi2c, MPU6500_REG_ACCEL_START,raw_data, sizeof(raw_data));
 80026ea:	f107 0210 	add.w	r2, r7, #16
 80026ee:	2306      	movs	r3, #6
 80026f0:	213b      	movs	r1, #59	@ 0x3b
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7ff ff53 	bl	800259e <mpu6500_read>
 80026f8:	4603      	mov	r3, r0
 80026fa:	75fb      	strb	r3, [r7, #23]

	if(status != MPU6500_OK)
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <mpu6500_read_accelerometer_data+0x2a>
	{
		return status;
 8002702:	7dfb      	ldrb	r3, [r7, #23]
 8002704:	e01b      	b.n	800273e <mpu6500_read_accelerometer_data+0x62>
	}

	accel_data->x = (int16_t)(raw_data[0]<< 8 | raw_data[1]);
 8002706:	7c3b      	ldrb	r3, [r7, #16]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	b21a      	sxth	r2, r3
 800270c:	7c7b      	ldrb	r3, [r7, #17]
 800270e:	b21b      	sxth	r3, r3
 8002710:	4313      	orrs	r3, r2
 8002712:	b21a      	sxth	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	801a      	strh	r2, [r3, #0]
	accel_data->y = (int16_t)(raw_data[2]<< 8 | raw_data[3]);
 8002718:	7cbb      	ldrb	r3, [r7, #18]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	b21a      	sxth	r2, r3
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	b21b      	sxth	r3, r3
 8002722:	4313      	orrs	r3, r2
 8002724:	b21a      	sxth	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	805a      	strh	r2, [r3, #2]
	accel_data->z = (int16_t)(raw_data[4]<< 8 | raw_data[5]);
 800272a:	7d3b      	ldrb	r3, [r7, #20]
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	b21a      	sxth	r2, r3
 8002730:	7d7b      	ldrb	r3, [r7, #21]
 8002732:	b21b      	sxth	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b21a      	sxth	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	809a      	strh	r2, [r3, #4]



	return MPU6500_OK;
 800273c:	2300      	movs	r3, #0

}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <mpu6500_accelerometer_calibration>:




mpu6500_accel_data_t mpu6500_accelerometer_calibration(const mpu6500_accel_data_t *error_offset, mpu6500_accel_data_t *raw_data)
{
 8002746:	b480      	push	{r7}
 8002748:	b087      	sub	sp, #28
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
	mpu6500_accel_data_t accel_calibrated;
	accel_calibrated.x = raw_data->x - error_offset->x;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002758:	b29a      	uxth	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002760:	b29b      	uxth	r3, r3
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	b29b      	uxth	r3, r3
 8002766:	b21b      	sxth	r3, r3
 8002768:	823b      	strh	r3, [r7, #16]
	accel_calibrated.y = raw_data->y - error_offset->y;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002770:	b29a      	uxth	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002778:	b29b      	uxth	r3, r3
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	b29b      	uxth	r3, r3
 800277e:	b21b      	sxth	r3, r3
 8002780:	827b      	strh	r3, [r7, #18]
	accel_calibrated.z = raw_data->z - error_offset->z;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002788:	b29a      	uxth	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002790:	b29b      	uxth	r3, r3
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	b29b      	uxth	r3, r3
 8002796:	b21b      	sxth	r3, r3
 8002798:	82bb      	strh	r3, [r7, #20]

	return accel_calibrated;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	461a      	mov	r2, r3
 800279e:	f107 0310 	add.w	r3, r7, #16
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	6010      	str	r0, [r2, #0]
 80027a6:	889b      	ldrh	r3, [r3, #4]
 80027a8:	8093      	strh	r3, [r2, #4]
}
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <Receiver_Init>:
volatile uint32_t Frequency_CH3 = 0, Frequency_CH4 = 0;
volatile uint32_t Frequency_CH5 = 0, Frequency_CH6 = 0;
volatile uint32_t Frequency_CH7 = 0, Frequency_CH8 = 0;

void Receiver_Init()
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	/*------- PWM READ AREAD--------*/

	  // TIM2 and TIM5 Interrupt Start
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80027bc:	2100      	movs	r1, #0
 80027be:	4830      	ldr	r0, [pc, #192]	@ (8002880 <Receiver_Init+0xc8>)
 80027c0:	f003 f9fe 	bl	8005bc0 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80027c4:	2104      	movs	r1, #4
 80027c6:	482e      	ldr	r0, [pc, #184]	@ (8002880 <Receiver_Init+0xc8>)
 80027c8:	f003 f9fa 	bl	8005bc0 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80027cc:	2108      	movs	r1, #8
 80027ce:	482c      	ldr	r0, [pc, #176]	@ (8002880 <Receiver_Init+0xc8>)
 80027d0:	f003 f9f6 	bl	8005bc0 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 80027d4:	210c      	movs	r1, #12
 80027d6:	482a      	ldr	r0, [pc, #168]	@ (8002880 <Receiver_Init+0xc8>)
 80027d8:	f003 f9f2 	bl	8005bc0 <HAL_TIM_IC_Start_IT>

	  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80027dc:	2100      	movs	r1, #0
 80027de:	4829      	ldr	r0, [pc, #164]	@ (8002884 <Receiver_Init+0xcc>)
 80027e0:	f003 f9ee 	bl	8005bc0 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 80027e4:	2104      	movs	r1, #4
 80027e6:	4827      	ldr	r0, [pc, #156]	@ (8002884 <Receiver_Init+0xcc>)
 80027e8:	f003 f9ea 	bl	8005bc0 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3);
 80027ec:	2108      	movs	r1, #8
 80027ee:	4825      	ldr	r0, [pc, #148]	@ (8002884 <Receiver_Init+0xcc>)
 80027f0:	f003 f9e6 	bl	8005bc0 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4);
 80027f4:	210c      	movs	r1, #12
 80027f6:	4823      	ldr	r0, [pc, #140]	@ (8002884 <Receiver_Init+0xcc>)
 80027f8:	f003 f9e2 	bl	8005bc0 <HAL_TIM_IC_Start_IT>

	  /*----- PWM OUTPUT AREA----------*/

	  //TIM3 PWM START

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80027fc:	2100      	movs	r1, #0
 80027fe:	4822      	ldr	r0, [pc, #136]	@ (8002888 <Receiver_Init+0xd0>)
 8002800:	f003 f8bc 	bl	800597c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002804:	2104      	movs	r1, #4
 8002806:	4820      	ldr	r0, [pc, #128]	@ (8002888 <Receiver_Init+0xd0>)
 8002808:	f003 f8b8 	bl	800597c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800280c:	2108      	movs	r1, #8
 800280e:	481e      	ldr	r0, [pc, #120]	@ (8002888 <Receiver_Init+0xd0>)
 8002810:	f003 f8b4 	bl	800597c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002814:	210c      	movs	r1, #12
 8002816:	481c      	ldr	r0, [pc, #112]	@ (8002888 <Receiver_Init+0xd0>)
 8002818:	f003 f8b0 	bl	800597c <HAL_TIM_PWM_Start>

	  //TIM4 PWM START
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800281c:	2100      	movs	r1, #0
 800281e:	481b      	ldr	r0, [pc, #108]	@ (800288c <Receiver_Init+0xd4>)
 8002820:	f003 f8ac 	bl	800597c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002824:	2104      	movs	r1, #4
 8002826:	4819      	ldr	r0, [pc, #100]	@ (800288c <Receiver_Init+0xd4>)
 8002828:	f003 f8a8 	bl	800597c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800282c:	2108      	movs	r1, #8
 800282e:	4817      	ldr	r0, [pc, #92]	@ (800288c <Receiver_Init+0xd4>)
 8002830:	f003 f8a4 	bl	800597c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002834:	210c      	movs	r1, #12
 8002836:	4815      	ldr	r0, [pc, #84]	@ (800288c <Receiver_Init+0xd4>)
 8002838:	f003 f8a0 	bl	800597c <HAL_TIM_PWM_Start>


	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <Receiver_Init+0xd0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2200      	movs	r2, #0
 8002842:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <Receiver_Init+0xd0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 800284c:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <Receiver_Init+0xd0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2200      	movs	r2, #0
 8002852:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8002854:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <Receiver_Init+0xd0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2200      	movs	r2, #0
 800285a:	641a      	str	r2, [r3, #64]	@ 0x40


	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <Receiver_Init+0xd4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2200      	movs	r2, #0
 8002862:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <Receiver_Init+0xd4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2200      	movs	r2, #0
 800286a:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 800286c:	4b07      	ldr	r3, [pc, #28]	@ (800288c <Receiver_Init+0xd4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2200      	movs	r2, #0
 8002872:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <Receiver_Init+0xd4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2200      	movs	r2, #0
 800287a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800287c:	bf00      	nop
 800287e:	bd80      	pop	{r7, pc}
 8002880:	2000018c 	.word	0x2000018c
 8002884:	20000264 	.word	0x20000264
 8002888:	200001d4 	.word	0x200001d4
 800288c:	2000021c 	.word	0x2000021c

08002890 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

	if(htim ==&htim2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a83      	ldr	r2, [pc, #524]	@ (8002aa8 <HAL_TIM_IC_CaptureCallback+0x218>)
 800289c:	4293      	cmp	r3, r2
 800289e:	f040 81ad 	bne.w	8002bfc <HAL_TIM_IC_CaptureCallback+0x36c>
	{

	/* Channel 1 */
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7f1b      	ldrb	r3, [r3, #28]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d15e      	bne.n	8002968 <HAL_TIM_IC_CaptureCallback+0xd8>
	    {
	        if (Is_First_Captured_CH1 == 0)
 80028aa:	4b80      	ldr	r3, [pc, #512]	@ (8002aac <HAL_TIM_IC_CaptureCallback+0x21c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d11a      	bne.n	80028e8 <HAL_TIM_IC_CaptureCallback+0x58>
	        {
	            IC_Val1_CH1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80028b2:	2100      	movs	r1, #0
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f003 fdc1 	bl	800643c <HAL_TIM_ReadCapturedValue>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4a7c      	ldr	r2, [pc, #496]	@ (8002ab0 <HAL_TIM_IC_CaptureCallback+0x220>)
 80028be:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH1 = 1;
 80028c0:	4b7a      	ldr	r3, [pc, #488]	@ (8002aac <HAL_TIM_IC_CaptureCallback+0x21c>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6a1a      	ldr	r2, [r3, #32]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 020a 	bic.w	r2, r2, #10
 80028d4:	621a      	str	r2, [r3, #32]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6a1a      	ldr	r2, [r3, #32]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0202 	orr.w	r2, r2, #2
 80028e4:	621a      	str	r2, [r3, #32]
 80028e6:	e03f      	b.n	8002968 <HAL_TIM_IC_CaptureCallback+0xd8>
	        }
	        else
	        {
	            IC_Val2_CH1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80028e8:	2100      	movs	r1, #0
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f003 fda6 	bl	800643c <HAL_TIM_ReadCapturedValue>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4a70      	ldr	r2, [pc, #448]	@ (8002ab4 <HAL_TIM_IC_CaptureCallback+0x224>)
 80028f4:	6013      	str	r3, [r2, #0]
	            __HAL_TIM_SET_COUNTER(htim, 0);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2200      	movs	r2, #0
 80028fc:	625a      	str	r2, [r3, #36]	@ 0x24

	            if (IC_Val2_CH1 > IC_Val1_CH1)
 80028fe:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab4 <HAL_TIM_IC_CaptureCallback+0x224>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d907      	bls.n	800291a <HAL_TIM_IC_CaptureCallback+0x8a>
	            	{
	            		Difference_CH1 = IC_Val2_CH1 - IC_Val1_CH1;
 800290a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ab4 <HAL_TIM_IC_CaptureCallback+0x224>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b68      	ldr	r3, [pc, #416]	@ (8002ab0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	4a68      	ldr	r2, [pc, #416]	@ (8002ab8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e008      	b.n	800292c <HAL_TIM_IC_CaptureCallback+0x9c>
	                 }
	            else
	                {
	                            Difference_CH1 = (0xFFFF - IC_Val1_CH1) + IC_Val2_CH1 + 1;
 800291a:	4b66      	ldr	r3, [pc, #408]	@ (8002ab4 <HAL_TIM_IC_CaptureCallback+0x224>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4b64      	ldr	r3, [pc, #400]	@ (8002ab0 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002928:	4a63      	ldr	r2, [pc, #396]	@ (8002ab8 <HAL_TIM_IC_CaptureCallback+0x228>)
 800292a:	6013      	str	r3, [r2, #0]
	                }
	            Frequency_CH1 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH1);
 800292c:	f002 ff56 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8002930:	4603      	mov	r3, r0
 8002932:	005a      	lsls	r2, r3, #1
 8002934:	4b60      	ldr	r3, [pc, #384]	@ (8002ab8 <HAL_TIM_IC_CaptureCallback+0x228>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	212a      	movs	r1, #42	@ 0x2a
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4a5e      	ldr	r2, [pc, #376]	@ (8002abc <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002944:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH1 = 0;
 8002946:	4b59      	ldr	r3, [pc, #356]	@ (8002aac <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 020a 	bic.w	r2, r2, #10
 800295a:	621a      	str	r2, [r3, #32]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6a12      	ldr	r2, [r2, #32]
 8002966:	621a      	str	r2, [r3, #32]
	        }
	    }

	    /* Channel 2 */
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	7f1b      	ldrb	r3, [r3, #28]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d15e      	bne.n	8002a2e <HAL_TIM_IC_CaptureCallback+0x19e>
	    {
	        if (Is_First_Captured_CH2 == 0)
 8002970:	4b53      	ldr	r3, [pc, #332]	@ (8002ac0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d11a      	bne.n	80029ae <HAL_TIM_IC_CaptureCallback+0x11e>
	        {
	            IC_Val1_CH2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002978:	2104      	movs	r1, #4
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f003 fd5e 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002980:	4603      	mov	r3, r0
 8002982:	4a50      	ldr	r2, [pc, #320]	@ (8002ac4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8002984:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH2 = 1;
 8002986:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a1a      	ldr	r2, [r3, #32]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800299a:	621a      	str	r2, [r3, #32]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6a1a      	ldr	r2, [r3, #32]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0220 	orr.w	r2, r2, #32
 80029aa:	621a      	str	r2, [r3, #32]
 80029ac:	e03f      	b.n	8002a2e <HAL_TIM_IC_CaptureCallback+0x19e>
	        }
	        else
	        {
	            IC_Val2_CH2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80029ae:	2104      	movs	r1, #4
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f003 fd43 	bl	800643c <HAL_TIM_ReadCapturedValue>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4a43      	ldr	r2, [pc, #268]	@ (8002ac8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80029ba:	6013      	str	r3, [r2, #0]
	            __HAL_TIM_SET_COUNTER(htim, 0);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24

	            if (IC_Val2_CH2 > IC_Val1_CH2)
 80029c4:	4b40      	ldr	r3, [pc, #256]	@ (8002ac8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ac4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d907      	bls.n	80029e0 <HAL_TIM_IC_CaptureCallback+0x150>
	            	            	{
	            	            		Difference_CH2 = IC_Val2_CH2 - IC_Val1_CH2;
 80029d0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	4a3c      	ldr	r2, [pc, #240]	@ (8002acc <HAL_TIM_IC_CaptureCallback+0x23c>)
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e008      	b.n	80029f2 <HAL_TIM_IC_CaptureCallback+0x162>
	            	                 }
	            	            else
	            	                {
	            	                            Difference_CH2 = (0xFFFF - IC_Val1_CH2) + IC_Val2_CH2 + 1;
 80029e0:	4b39      	ldr	r3, [pc, #228]	@ (8002ac8 <HAL_TIM_IC_CaptureCallback+0x238>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b37      	ldr	r3, [pc, #220]	@ (8002ac4 <HAL_TIM_IC_CaptureCallback+0x234>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80029ee:	4a37      	ldr	r2, [pc, #220]	@ (8002acc <HAL_TIM_IC_CaptureCallback+0x23c>)
 80029f0:	6013      	str	r3, [r2, #0]
	            	                }
	            	            Frequency_CH2 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH2);
 80029f2:	f002 fef3 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 80029f6:	4603      	mov	r3, r0
 80029f8:	005a      	lsls	r2, r3, #1
 80029fa:	4b34      	ldr	r3, [pc, #208]	@ (8002acc <HAL_TIM_IC_CaptureCallback+0x23c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	212a      	movs	r1, #42	@ 0x2a
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	4a31      	ldr	r2, [pc, #196]	@ (8002ad0 <HAL_TIM_IC_CaptureCallback+0x240>)
 8002a0a:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH2 = 0;
 8002a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ac0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6a1a      	ldr	r2, [r3, #32]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a20:	621a      	str	r2, [r3, #32]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a12      	ldr	r2, [r2, #32]
 8002a2c:	621a      	str	r2, [r3, #32]
	        }
	    }

	    /* Channel 3 */
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7f1b      	ldrb	r3, [r3, #28]
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d17d      	bne.n	8002b32 <HAL_TIM_IC_CaptureCallback+0x2a2>
	    {
	        if (Is_First_Captured_CH3 == 0)
 8002a36:	4b27      	ldr	r3, [pc, #156]	@ (8002ad4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d11a      	bne.n	8002a74 <HAL_TIM_IC_CaptureCallback+0x1e4>
	        {
	            IC_Val1_CH3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002a3e:	2108      	movs	r1, #8
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f003 fcfb 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4a23      	ldr	r2, [pc, #140]	@ (8002ad8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8002a4a:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH3 = 1;
 8002a4c:	4b21      	ldr	r3, [pc, #132]	@ (8002ad4 <HAL_TIM_IC_CaptureCallback+0x244>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a1a      	ldr	r2, [r3, #32]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8002a60:	621a      	str	r2, [r3, #32]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6a1a      	ldr	r2, [r3, #32]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a70:	621a      	str	r2, [r3, #32]
 8002a72:	e05e      	b.n	8002b32 <HAL_TIM_IC_CaptureCallback+0x2a2>
	        }
	        else
	        {
	            IC_Val2_CH3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002a74:	2108      	movs	r1, #8
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f003 fce0 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4a17      	ldr	r2, [pc, #92]	@ (8002adc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8002a80:	6013      	str	r3, [r2, #0]
	            __HAL_TIM_SET_COUNTER(htim, 0);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24

	            if (IC_Val2_CH3 > IC_Val1_CH3)
 8002a8a:	4b14      	ldr	r3, [pc, #80]	@ (8002adc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d926      	bls.n	8002ae4 <HAL_TIM_IC_CaptureCallback+0x254>
	            	            	{
	            	            		Difference_CH3 = IC_Val2_CH3 - IC_Val1_CH3;
 8002a96:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <HAL_TIM_IC_CaptureCallback+0x24c>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	e027      	b.n	8002af6 <HAL_TIM_IC_CaptureCallback+0x266>
 8002aa6:	bf00      	nop
 8002aa8:	2000018c 	.word	0x2000018c
 8002aac:	2000040c 	.word	0x2000040c
 8002ab0:	200003ac 	.word	0x200003ac
 8002ab4:	200003b0 	.word	0x200003b0
 8002ab8:	200003ec 	.word	0x200003ec
 8002abc:	20000414 	.word	0x20000414
 8002ac0:	2000040d 	.word	0x2000040d
 8002ac4:	200003b4 	.word	0x200003b4
 8002ac8:	200003b8 	.word	0x200003b8
 8002acc:	200003f0 	.word	0x200003f0
 8002ad0:	20000418 	.word	0x20000418
 8002ad4:	2000040e 	.word	0x2000040e
 8002ad8:	200003bc 	.word	0x200003bc
 8002adc:	200003c0 	.word	0x200003c0
 8002ae0:	200003f4 	.word	0x200003f4
	            	                 }
	            	            else
	            	                {
	            	                            Difference_CH3 = (0xFFFF - IC_Val1_CH3) + IC_Val2_CH3 + 1;
 8002ae4:	4b98      	ldr	r3, [pc, #608]	@ (8002d48 <HAL_TIM_IC_CaptureCallback+0x4b8>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b98      	ldr	r3, [pc, #608]	@ (8002d4c <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002af2:	4a97      	ldr	r2, [pc, #604]	@ (8002d50 <HAL_TIM_IC_CaptureCallback+0x4c0>)
 8002af4:	6013      	str	r3, [r2, #0]
	            	                }
	            	            Frequency_CH3 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH3);
 8002af6:	f002 fe71 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8002afa:	4603      	mov	r3, r0
 8002afc:	005a      	lsls	r2, r3, #1
 8002afe:	4b94      	ldr	r3, [pc, #592]	@ (8002d50 <HAL_TIM_IC_CaptureCallback+0x4c0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	212a      	movs	r1, #42	@ 0x2a
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	4a91      	ldr	r2, [pc, #580]	@ (8002d54 <HAL_TIM_IC_CaptureCallback+0x4c4>)
 8002b0e:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH3 = 0;
 8002b10:	4b91      	ldr	r3, [pc, #580]	@ (8002d58 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a1a      	ldr	r2, [r3, #32]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8002b24:	621a      	str	r2, [r3, #32]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6a12      	ldr	r2, [r2, #32]
 8002b30:	621a      	str	r2, [r3, #32]
	        }
	    }

	    /* Channel 4 */
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7f1b      	ldrb	r3, [r3, #28]
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	f040 821b 	bne.w	8002f72 <HAL_TIM_IC_CaptureCallback+0x6e2>
	    {
	        if (Is_First_Captured_CH4 == 0)
 8002b3c:	4b87      	ldr	r3, [pc, #540]	@ (8002d5c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11a      	bne.n	8002b7a <HAL_TIM_IC_CaptureCallback+0x2ea>
	        {
	            IC_Val1_CH4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002b44:	210c      	movs	r1, #12
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f003 fc78 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4a84      	ldr	r2, [pc, #528]	@ (8002d60 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 8002b50:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH4 = 1;
 8002b52:	4b82      	ldr	r3, [pc, #520]	@ (8002d5c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8002b66:	621a      	str	r2, [r3, #32]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6a1a      	ldr	r2, [r3, #32]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b76:	621a      	str	r2, [r3, #32]
 8002b78:	e1fb      	b.n	8002f72 <HAL_TIM_IC_CaptureCallback+0x6e2>
	        }
	        else
	        {
	            IC_Val2_CH4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002b7a:	210c      	movs	r1, #12
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f003 fc5d 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002b82:	4603      	mov	r3, r0
 8002b84:	4a77      	ldr	r2, [pc, #476]	@ (8002d64 <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8002b86:	6013      	str	r3, [r2, #0]
	            __HAL_TIM_SET_COUNTER(htim, 0);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	625a      	str	r2, [r3, #36]	@ 0x24

	            if (IC_Val2_CH4 > IC_Val1_CH4)
 8002b90:	4b74      	ldr	r3, [pc, #464]	@ (8002d64 <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4b72      	ldr	r3, [pc, #456]	@ (8002d60 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d907      	bls.n	8002bac <HAL_TIM_IC_CaptureCallback+0x31c>
	            	            	{
	            	            		Difference_CH4 = IC_Val2_CH4 - IC_Val1_CH4;
 8002b9c:	4b71      	ldr	r3, [pc, #452]	@ (8002d64 <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8002d60 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	4a70      	ldr	r2, [pc, #448]	@ (8002d68 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e008      	b.n	8002bbe <HAL_TIM_IC_CaptureCallback+0x32e>
	            	                 }
	            	            else
	            	                {
	            	                            Difference_CH4 = (0xFFFF - IC_Val1_CH4) + IC_Val2_CH4 + 1;
 8002bac:	4b6d      	ldr	r3, [pc, #436]	@ (8002d64 <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b6b      	ldr	r3, [pc, #428]	@ (8002d60 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002bba:	4a6b      	ldr	r2, [pc, #428]	@ (8002d68 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8002bbc:	6013      	str	r3, [r2, #0]
	            	                }
	            	            Frequency_CH4 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH4);
 8002bbe:	f002 fe0d 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	005a      	lsls	r2, r3, #1
 8002bc6:	4b68      	ldr	r3, [pc, #416]	@ (8002d68 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	212a      	movs	r1, #42	@ 0x2a
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	4a65      	ldr	r2, [pc, #404]	@ (8002d6c <HAL_TIM_IC_CaptureCallback+0x4dc>)
 8002bd6:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH4 = 0;
 8002bd8:	4b60      	ldr	r3, [pc, #384]	@ (8002d5c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6a1a      	ldr	r2, [r3, #32]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8002bec:	621a      	str	r2, [r3, #32]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6a12      	ldr	r2, [r2, #32]
 8002bf8:	621a      	str	r2, [r3, #32]
 8002bfa:	e1ba      	b.n	8002f72 <HAL_TIM_IC_CaptureCallback+0x6e2>
	        }
	    }

}
	else if(htim ==&htim5)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a5c      	ldr	r2, [pc, #368]	@ (8002d70 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	f040 81b6 	bne.w	8002f72 <HAL_TIM_IC_CaptureCallback+0x6e2>
		{

		/* Channel 1 */
		    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7f1b      	ldrb	r3, [r3, #28]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d15e      	bne.n	8002ccc <HAL_TIM_IC_CaptureCallback+0x43c>
		    {
		        if (Is_First_Captured_CH5 == 0)
 8002c0e:	4b59      	ldr	r3, [pc, #356]	@ (8002d74 <HAL_TIM_IC_CaptureCallback+0x4e4>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11a      	bne.n	8002c4c <HAL_TIM_IC_CaptureCallback+0x3bc>
		        {
		            IC_Val1_CH5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002c16:	2100      	movs	r1, #0
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f003 fc0f 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4a55      	ldr	r2, [pc, #340]	@ (8002d78 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 8002c22:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH5 = 1;
 8002c24:	4b53      	ldr	r3, [pc, #332]	@ (8002d74 <HAL_TIM_IC_CaptureCallback+0x4e4>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6a1a      	ldr	r2, [r3, #32]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 020a 	bic.w	r2, r2, #10
 8002c38:	621a      	str	r2, [r3, #32]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a1a      	ldr	r2, [r3, #32]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0202 	orr.w	r2, r2, #2
 8002c48:	621a      	str	r2, [r3, #32]
 8002c4a:	e03f      	b.n	8002ccc <HAL_TIM_IC_CaptureCallback+0x43c>
		        }
		        else
		        {
		            IC_Val2_CH5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f003 fbf4 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4a49      	ldr	r2, [pc, #292]	@ (8002d7c <HAL_TIM_IC_CaptureCallback+0x4ec>)
 8002c58:	6013      	str	r3, [r2, #0]
		            __HAL_TIM_SET_COUNTER(htim, 0);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	625a      	str	r2, [r3, #36]	@ 0x24

		            if (IC_Val2_CH5 > IC_Val1_CH5)
 8002c62:	4b46      	ldr	r3, [pc, #280]	@ (8002d7c <HAL_TIM_IC_CaptureCallback+0x4ec>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b44      	ldr	r3, [pc, #272]	@ (8002d78 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d907      	bls.n	8002c7e <HAL_TIM_IC_CaptureCallback+0x3ee>
		            	{
		            		Difference_CH5 = IC_Val2_CH5 - IC_Val1_CH5;
 8002c6e:	4b43      	ldr	r3, [pc, #268]	@ (8002d7c <HAL_TIM_IC_CaptureCallback+0x4ec>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4b41      	ldr	r3, [pc, #260]	@ (8002d78 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	4a41      	ldr	r2, [pc, #260]	@ (8002d80 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	e008      	b.n	8002c90 <HAL_TIM_IC_CaptureCallback+0x400>
		                 }
		            else
		                {
		                            Difference_CH5 = (0xFFFF - IC_Val1_CH5) + IC_Val2_CH5 + 1;
 8002c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d7c <HAL_TIM_IC_CaptureCallback+0x4ec>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b3d      	ldr	r3, [pc, #244]	@ (8002d78 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002c8c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d80 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 8002c8e:	6013      	str	r3, [r2, #0]
		                }
		            Frequency_CH5 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH5);
 8002c90:	f002 fda4 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8002c94:	4603      	mov	r3, r0
 8002c96:	005a      	lsls	r2, r3, #1
 8002c98:	4b39      	ldr	r3, [pc, #228]	@ (8002d80 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	212a      	movs	r1, #42	@ 0x2a
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	4a37      	ldr	r2, [pc, #220]	@ (8002d84 <HAL_TIM_IC_CaptureCallback+0x4f4>)
 8002ca8:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH5 = 0;
 8002caa:	4b32      	ldr	r3, [pc, #200]	@ (8002d74 <HAL_TIM_IC_CaptureCallback+0x4e4>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 020a 	bic.w	r2, r2, #10
 8002cbe:	621a      	str	r2, [r3, #32]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6a12      	ldr	r2, [r2, #32]
 8002cca:	621a      	str	r2, [r3, #32]
		        }
		    }

		    /* Channel 2 */
		    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7f1b      	ldrb	r3, [r3, #28]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	f040 8088 	bne.w	8002de6 <HAL_TIM_IC_CaptureCallback+0x556>
		    {
		        if (Is_First_Captured_CH6 == 0)
 8002cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8002d88 <HAL_TIM_IC_CaptureCallback+0x4f8>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11a      	bne.n	8002d14 <HAL_TIM_IC_CaptureCallback+0x484>
		        {
		            IC_Val1_CH6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002cde:	2104      	movs	r1, #4
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f003 fbab 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a28      	ldr	r2, [pc, #160]	@ (8002d8c <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8002cea:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH6 = 1;
 8002cec:	4b26      	ldr	r3, [pc, #152]	@ (8002d88 <HAL_TIM_IC_CaptureCallback+0x4f8>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6a1a      	ldr	r2, [r3, #32]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d00:	621a      	str	r2, [r3, #32]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6a1a      	ldr	r2, [r3, #32]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0220 	orr.w	r2, r2, #32
 8002d10:	621a      	str	r2, [r3, #32]
 8002d12:	e068      	b.n	8002de6 <HAL_TIM_IC_CaptureCallback+0x556>
		        }
		        else
		        {
		            IC_Val2_CH6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002d14:	2104      	movs	r1, #4
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f003 fb90 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d90 <HAL_TIM_IC_CaptureCallback+0x500>)
 8002d20:	6013      	str	r3, [r2, #0]
		            __HAL_TIM_SET_COUNTER(htim, 0);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2200      	movs	r2, #0
 8002d28:	625a      	str	r2, [r3, #36]	@ 0x24

		            if (IC_Val2_CH6 > IC_Val1_CH6)
 8002d2a:	4b19      	ldr	r3, [pc, #100]	@ (8002d90 <HAL_TIM_IC_CaptureCallback+0x500>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d930      	bls.n	8002d98 <HAL_TIM_IC_CaptureCallback+0x508>
		            	            	{
		            	            		Difference_CH6 = IC_Val2_CH6 - IC_Val1_CH6;
 8002d36:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <HAL_TIM_IC_CaptureCallback+0x500>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4b14      	ldr	r3, [pc, #80]	@ (8002d8c <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	4a14      	ldr	r2, [pc, #80]	@ (8002d94 <HAL_TIM_IC_CaptureCallback+0x504>)
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	e031      	b.n	8002daa <HAL_TIM_IC_CaptureCallback+0x51a>
 8002d46:	bf00      	nop
 8002d48:	200003c0 	.word	0x200003c0
 8002d4c:	200003bc 	.word	0x200003bc
 8002d50:	200003f4 	.word	0x200003f4
 8002d54:	2000041c 	.word	0x2000041c
 8002d58:	2000040e 	.word	0x2000040e
 8002d5c:	2000040f 	.word	0x2000040f
 8002d60:	200003c4 	.word	0x200003c4
 8002d64:	200003c8 	.word	0x200003c8
 8002d68:	200003f8 	.word	0x200003f8
 8002d6c:	20000420 	.word	0x20000420
 8002d70:	20000264 	.word	0x20000264
 8002d74:	20000410 	.word	0x20000410
 8002d78:	200003cc 	.word	0x200003cc
 8002d7c:	200003d0 	.word	0x200003d0
 8002d80:	200003fc 	.word	0x200003fc
 8002d84:	20000424 	.word	0x20000424
 8002d88:	20000411 	.word	0x20000411
 8002d8c:	200003d4 	.word	0x200003d4
 8002d90:	200003d8 	.word	0x200003d8
 8002d94:	20000400 	.word	0x20000400
		            	                 }
		            	            else
		            	                {
		            	                            Difference_CH6 = (0xFFFF - IC_Val1_CH6) + IC_Val2_CH6 + 1;
 8002d98:	4b79      	ldr	r3, [pc, #484]	@ (8002f80 <HAL_TIM_IC_CaptureCallback+0x6f0>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b79      	ldr	r3, [pc, #484]	@ (8002f84 <HAL_TIM_IC_CaptureCallback+0x6f4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002da6:	4a78      	ldr	r2, [pc, #480]	@ (8002f88 <HAL_TIM_IC_CaptureCallback+0x6f8>)
 8002da8:	6013      	str	r3, [r2, #0]
		            	                }
		            	            Frequency_CH6 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH6);
 8002daa:	f002 fd17 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8002dae:	4603      	mov	r3, r0
 8002db0:	005a      	lsls	r2, r3, #1
 8002db2:	4b75      	ldr	r3, [pc, #468]	@ (8002f88 <HAL_TIM_IC_CaptureCallback+0x6f8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	212a      	movs	r1, #42	@ 0x2a
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	4a72      	ldr	r2, [pc, #456]	@ (8002f8c <HAL_TIM_IC_CaptureCallback+0x6fc>)
 8002dc2:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH6 = 0;
 8002dc4:	4b72      	ldr	r3, [pc, #456]	@ (8002f90 <HAL_TIM_IC_CaptureCallback+0x700>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002dd8:	621a      	str	r2, [r3, #32]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a12      	ldr	r2, [r2, #32]
 8002de4:	621a      	str	r2, [r3, #32]

		    }

		    /* Channel 3 */

		    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	7f1b      	ldrb	r3, [r3, #28]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d15e      	bne.n	8002eac <HAL_TIM_IC_CaptureCallback+0x61c>
		    {
		        if (Is_First_Captured_CH7 == 0)
 8002dee:	4b69      	ldr	r3, [pc, #420]	@ (8002f94 <HAL_TIM_IC_CaptureCallback+0x704>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d11a      	bne.n	8002e2c <HAL_TIM_IC_CaptureCallback+0x59c>
		        {
		            IC_Val1_CH7 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002df6:	2108      	movs	r1, #8
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f003 fb1f 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4a65      	ldr	r2, [pc, #404]	@ (8002f98 <HAL_TIM_IC_CaptureCallback+0x708>)
 8002e02:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH7 = 1;
 8002e04:	4b63      	ldr	r3, [pc, #396]	@ (8002f94 <HAL_TIM_IC_CaptureCallback+0x704>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6a1a      	ldr	r2, [r3, #32]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8002e18:	621a      	str	r2, [r3, #32]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6a1a      	ldr	r2, [r3, #32]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e28:	621a      	str	r2, [r3, #32]
 8002e2a:	e03f      	b.n	8002eac <HAL_TIM_IC_CaptureCallback+0x61c>
		        }
		        else
		        {
		            IC_Val2_CH7 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002e2c:	2108      	movs	r1, #8
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f003 fb04 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4a59      	ldr	r2, [pc, #356]	@ (8002f9c <HAL_TIM_IC_CaptureCallback+0x70c>)
 8002e38:	6013      	str	r3, [r2, #0]
		            __HAL_TIM_SET_COUNTER(htim, 0);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24

		            if (IC_Val2_CH7 > IC_Val1_CH7)
 8002e42:	4b56      	ldr	r3, [pc, #344]	@ (8002f9c <HAL_TIM_IC_CaptureCallback+0x70c>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b54      	ldr	r3, [pc, #336]	@ (8002f98 <HAL_TIM_IC_CaptureCallback+0x708>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d907      	bls.n	8002e5e <HAL_TIM_IC_CaptureCallback+0x5ce>
		            	            	{
		            	            		Difference_CH7 = IC_Val2_CH7 - IC_Val1_CH7;
 8002e4e:	4b53      	ldr	r3, [pc, #332]	@ (8002f9c <HAL_TIM_IC_CaptureCallback+0x70c>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b51      	ldr	r3, [pc, #324]	@ (8002f98 <HAL_TIM_IC_CaptureCallback+0x708>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	4a51      	ldr	r2, [pc, #324]	@ (8002fa0 <HAL_TIM_IC_CaptureCallback+0x710>)
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	e008      	b.n	8002e70 <HAL_TIM_IC_CaptureCallback+0x5e0>
		            	                 }
		            	            else
		            	                {
		            	                            Difference_CH7 = (0xFFFF - IC_Val1_CH7) + IC_Val2_CH7 + 1;
 8002e5e:	4b4f      	ldr	r3, [pc, #316]	@ (8002f9c <HAL_TIM_IC_CaptureCallback+0x70c>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b4d      	ldr	r3, [pc, #308]	@ (8002f98 <HAL_TIM_IC_CaptureCallback+0x708>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002e6c:	4a4c      	ldr	r2, [pc, #304]	@ (8002fa0 <HAL_TIM_IC_CaptureCallback+0x710>)
 8002e6e:	6013      	str	r3, [r2, #0]
		            	                }
		            	            Frequency_CH7 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH7);
 8002e70:	f002 fcb4 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8002e74:	4603      	mov	r3, r0
 8002e76:	005a      	lsls	r2, r3, #1
 8002e78:	4b49      	ldr	r3, [pc, #292]	@ (8002fa0 <HAL_TIM_IC_CaptureCallback+0x710>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	212a      	movs	r1, #42	@ 0x2a
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e86:	4a47      	ldr	r2, [pc, #284]	@ (8002fa4 <HAL_TIM_IC_CaptureCallback+0x714>)
 8002e88:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH7 = 0;
 8002e8a:	4b42      	ldr	r3, [pc, #264]	@ (8002f94 <HAL_TIM_IC_CaptureCallback+0x704>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8002e9e:	621a      	str	r2, [r3, #32]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a12      	ldr	r2, [r2, #32]
 8002eaa:	621a      	str	r2, [r3, #32]
		        }
		    }

		    /* Channel 4 */
		    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	7f1b      	ldrb	r3, [r3, #28]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d15e      	bne.n	8002f72 <HAL_TIM_IC_CaptureCallback+0x6e2>
		    {
		        if (Is_First_Captured_CH8 == 0)
 8002eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa8 <HAL_TIM_IC_CaptureCallback+0x718>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d11a      	bne.n	8002ef2 <HAL_TIM_IC_CaptureCallback+0x662>
		        {
		            IC_Val1_CH8 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002ebc:	210c      	movs	r1, #12
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f003 fabc 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4a39      	ldr	r2, [pc, #228]	@ (8002fac <HAL_TIM_IC_CaptureCallback+0x71c>)
 8002ec8:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH8 = 1;
 8002eca:	4b37      	ldr	r3, [pc, #220]	@ (8002fa8 <HAL_TIM_IC_CaptureCallback+0x718>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8002ede:	621a      	str	r2, [r3, #32]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6a1a      	ldr	r2, [r3, #32]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002eee:	621a      	str	r2, [r3, #32]
 8002ef0:	e03f      	b.n	8002f72 <HAL_TIM_IC_CaptureCallback+0x6e2>
		        }
		        else
		        {
		            IC_Val2_CH8 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002ef2:	210c      	movs	r1, #12
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f003 faa1 	bl	800643c <HAL_TIM_ReadCapturedValue>
 8002efa:	4603      	mov	r3, r0
 8002efc:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb0 <HAL_TIM_IC_CaptureCallback+0x720>)
 8002efe:	6013      	str	r3, [r2, #0]
		            __HAL_TIM_SET_COUNTER(htim, 0);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2200      	movs	r2, #0
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24

		            if (IC_Val2_CH8 > IC_Val1_CH8)
 8002f08:	4b29      	ldr	r3, [pc, #164]	@ (8002fb0 <HAL_TIM_IC_CaptureCallback+0x720>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b27      	ldr	r3, [pc, #156]	@ (8002fac <HAL_TIM_IC_CaptureCallback+0x71c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d907      	bls.n	8002f24 <HAL_TIM_IC_CaptureCallback+0x694>
		            	            	{
		            	            		Difference_CH8 = IC_Val2_CH8 - IC_Val1_CH8;
 8002f14:	4b26      	ldr	r3, [pc, #152]	@ (8002fb0 <HAL_TIM_IC_CaptureCallback+0x720>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b24      	ldr	r3, [pc, #144]	@ (8002fac <HAL_TIM_IC_CaptureCallback+0x71c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	4a25      	ldr	r2, [pc, #148]	@ (8002fb4 <HAL_TIM_IC_CaptureCallback+0x724>)
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e008      	b.n	8002f36 <HAL_TIM_IC_CaptureCallback+0x6a6>
		            	                 }
		            	            else
		            	                {
		            	                            Difference_CH8 = (0xFFFF - IC_Val1_CH8) + IC_Val2_CH8 + 1;
 8002f24:	4b22      	ldr	r3, [pc, #136]	@ (8002fb0 <HAL_TIM_IC_CaptureCallback+0x720>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b20      	ldr	r3, [pc, #128]	@ (8002fac <HAL_TIM_IC_CaptureCallback+0x71c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002f32:	4a20      	ldr	r2, [pc, #128]	@ (8002fb4 <HAL_TIM_IC_CaptureCallback+0x724>)
 8002f34:	6013      	str	r3, [r2, #0]
		            	                }
		            	            Frequency_CH8 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH8);
 8002f36:	f002 fc51 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	005a      	lsls	r2, r3, #1
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <HAL_TIM_IC_CaptureCallback+0x724>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	212a      	movs	r1, #42	@ 0x2a
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb8 <HAL_TIM_IC_CaptureCallback+0x728>)
 8002f4e:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH8 = 0;
 8002f50:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <HAL_TIM_IC_CaptureCallback+0x718>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6a1a      	ldr	r2, [r3, #32]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8002f64:	621a      	str	r2, [r3, #32]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6a12      	ldr	r2, [r2, #32]
 8002f70:	621a      	str	r2, [r3, #32]





	Update_PwmValues();
 8002f72:	f000 f823 	bl	8002fbc <Update_PwmValues>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200003d8 	.word	0x200003d8
 8002f84:	200003d4 	.word	0x200003d4
 8002f88:	20000400 	.word	0x20000400
 8002f8c:	20000428 	.word	0x20000428
 8002f90:	20000411 	.word	0x20000411
 8002f94:	20000412 	.word	0x20000412
 8002f98:	200003dc 	.word	0x200003dc
 8002f9c:	200003e0 	.word	0x200003e0
 8002fa0:	20000404 	.word	0x20000404
 8002fa4:	2000042c 	.word	0x2000042c
 8002fa8:	20000413 	.word	0x20000413
 8002fac:	200003e4 	.word	0x200003e4
 8002fb0:	200003e8 	.word	0x200003e8
 8002fb4:	20000408 	.word	0x20000408
 8002fb8:	20000430 	.word	0x20000430

08002fbc <Update_PwmValues>:




void Update_PwmValues(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0

if(Difference_CH1<600 || Difference_CH1>2000)
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80030ec <Update_PwmValues+0x130>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002fc8:	d304      	bcc.n	8002fd4 <Update_PwmValues+0x18>
 8002fca:	4b48      	ldr	r3, [pc, #288]	@ (80030ec <Update_PwmValues+0x130>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002fd2:	d902      	bls.n	8002fda <Update_PwmValues+0x1e>
	Difference_CH1 =0;
 8002fd4:	4b45      	ldr	r3, [pc, #276]	@ (80030ec <Update_PwmValues+0x130>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
if(Difference_CH2<600 || Difference_CH2>2000)
 8002fda:	4b45      	ldr	r3, [pc, #276]	@ (80030f0 <Update_PwmValues+0x134>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002fe2:	d304      	bcc.n	8002fee <Update_PwmValues+0x32>
 8002fe4:	4b42      	ldr	r3, [pc, #264]	@ (80030f0 <Update_PwmValues+0x134>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002fec:	d902      	bls.n	8002ff4 <Update_PwmValues+0x38>
	Difference_CH2 =0;
 8002fee:	4b40      	ldr	r3, [pc, #256]	@ (80030f0 <Update_PwmValues+0x134>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
if(Difference_CH3<600 || Difference_CH3>2000)
 8002ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80030f4 <Update_PwmValues+0x138>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002ffc:	d304      	bcc.n	8003008 <Update_PwmValues+0x4c>
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80030f4 <Update_PwmValues+0x138>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003006:	d902      	bls.n	800300e <Update_PwmValues+0x52>
	Difference_CH3 =0;
 8003008:	4b3a      	ldr	r3, [pc, #232]	@ (80030f4 <Update_PwmValues+0x138>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
if(Difference_CH4<600 || Difference_CH4>2000)
 800300e:	4b3a      	ldr	r3, [pc, #232]	@ (80030f8 <Update_PwmValues+0x13c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8003016:	d304      	bcc.n	8003022 <Update_PwmValues+0x66>
 8003018:	4b37      	ldr	r3, [pc, #220]	@ (80030f8 <Update_PwmValues+0x13c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003020:	d902      	bls.n	8003028 <Update_PwmValues+0x6c>
	Difference_CH4 =0;
 8003022:	4b35      	ldr	r3, [pc, #212]	@ (80030f8 <Update_PwmValues+0x13c>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
if(Difference_CH5<600 || Difference_CH5>2000)
 8003028:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <Update_PwmValues+0x140>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8003030:	d304      	bcc.n	800303c <Update_PwmValues+0x80>
 8003032:	4b32      	ldr	r3, [pc, #200]	@ (80030fc <Update_PwmValues+0x140>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800303a:	d902      	bls.n	8003042 <Update_PwmValues+0x86>
	Difference_CH5 =0;
 800303c:	4b2f      	ldr	r3, [pc, #188]	@ (80030fc <Update_PwmValues+0x140>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
if(Difference_CH6<600 || Difference_CH6>2000)
 8003042:	4b2f      	ldr	r3, [pc, #188]	@ (8003100 <Update_PwmValues+0x144>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800304a:	d304      	bcc.n	8003056 <Update_PwmValues+0x9a>
 800304c:	4b2c      	ldr	r3, [pc, #176]	@ (8003100 <Update_PwmValues+0x144>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003054:	d902      	bls.n	800305c <Update_PwmValues+0xa0>
	Difference_CH6 =0;
 8003056:	4b2a      	ldr	r3, [pc, #168]	@ (8003100 <Update_PwmValues+0x144>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
if(Difference_CH7<600 || Difference_CH7>2000)
 800305c:	4b29      	ldr	r3, [pc, #164]	@ (8003104 <Update_PwmValues+0x148>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8003064:	d304      	bcc.n	8003070 <Update_PwmValues+0xb4>
 8003066:	4b27      	ldr	r3, [pc, #156]	@ (8003104 <Update_PwmValues+0x148>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800306e:	d902      	bls.n	8003076 <Update_PwmValues+0xba>
	Difference_CH7 =0;
 8003070:	4b24      	ldr	r3, [pc, #144]	@ (8003104 <Update_PwmValues+0x148>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
if(Difference_CH8<600 || Difference_CH8>2000)
 8003076:	4b24      	ldr	r3, [pc, #144]	@ (8003108 <Update_PwmValues+0x14c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800307e:	d304      	bcc.n	800308a <Update_PwmValues+0xce>
 8003080:	4b21      	ldr	r3, [pc, #132]	@ (8003108 <Update_PwmValues+0x14c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003088:	d902      	bls.n	8003090 <Update_PwmValues+0xd4>
	Difference_CH8 =0;
 800308a:	4b1f      	ldr	r3, [pc, #124]	@ (8003108 <Update_PwmValues+0x14c>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

	      __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,Difference_CH1);
 8003090:	4b1e      	ldr	r3, [pc, #120]	@ (800310c <Update_PwmValues+0x150>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a15      	ldr	r2, [pc, #84]	@ (80030ec <Update_PwmValues+0x130>)
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,Difference_CH2);
 800309a:	4b1c      	ldr	r3, [pc, #112]	@ (800310c <Update_PwmValues+0x150>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a14      	ldr	r2, [pc, #80]	@ (80030f0 <Update_PwmValues+0x134>)
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,Difference_CH3);
 80030a4:	4b19      	ldr	r3, [pc, #100]	@ (800310c <Update_PwmValues+0x150>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a12      	ldr	r2, [pc, #72]	@ (80030f4 <Update_PwmValues+0x138>)
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	63da      	str	r2, [r3, #60]	@ 0x3c
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,Difference_CH4);
 80030ae:	4b17      	ldr	r3, [pc, #92]	@ (800310c <Update_PwmValues+0x150>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a11      	ldr	r2, [pc, #68]	@ (80030f8 <Update_PwmValues+0x13c>)
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	641a      	str	r2, [r3, #64]	@ 0x40



		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Difference_CH5);
 80030b8:	4b15      	ldr	r3, [pc, #84]	@ (8003110 <Update_PwmValues+0x154>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a0f      	ldr	r2, [pc, #60]	@ (80030fc <Update_PwmValues+0x140>)
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,Difference_CH6);
 80030c2:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <Update_PwmValues+0x154>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003100 <Update_PwmValues+0x144>)
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,Difference_CH7);
 80030cc:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <Update_PwmValues+0x154>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003104 <Update_PwmValues+0x148>)
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	63da      	str	r2, [r3, #60]	@ 0x3c
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,Difference_CH8);
 80030d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003110 <Update_PwmValues+0x154>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a0b      	ldr	r2, [pc, #44]	@ (8003108 <Update_PwmValues+0x14c>)
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	641a      	str	r2, [r3, #64]	@ 0x40



}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	200003ec 	.word	0x200003ec
 80030f0:	200003f0 	.word	0x200003f0
 80030f4:	200003f4 	.word	0x200003f4
 80030f8:	200003f8 	.word	0x200003f8
 80030fc:	200003fc 	.word	0x200003fc
 8003100:	20000400 	.word	0x20000400
 8003104:	20000404 	.word	0x20000404
 8003108:	20000408 	.word	0x20000408
 800310c:	200001d4 	.word	0x200001d4
 8003110:	2000021c 	.word	0x2000021c

08003114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <HAL_MspInit+0x4c>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	4a0f      	ldr	r2, [pc, #60]	@ (8003160 <HAL_MspInit+0x4c>)
 8003124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003128:	6453      	str	r3, [r2, #68]	@ 0x44
 800312a:	4b0d      	ldr	r3, [pc, #52]	@ (8003160 <HAL_MspInit+0x4c>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <HAL_MspInit+0x4c>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	4a08      	ldr	r2, [pc, #32]	@ (8003160 <HAL_MspInit+0x4c>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003144:	6413      	str	r3, [r2, #64]	@ 0x40
 8003146:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <HAL_MspInit+0x4c>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003152:	2007      	movs	r0, #7
 8003154:	f000 fcd0 	bl	8003af8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40023800 	.word	0x40023800

08003164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08c      	sub	sp, #48	@ 0x30
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 031c 	add.w	r3, r7, #28
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a42      	ldr	r2, [pc, #264]	@ (800328c <HAL_I2C_MspInit+0x128>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d12c      	bne.n	80031e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	4b41      	ldr	r3, [pc, #260]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	4a40      	ldr	r2, [pc, #256]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	6313      	str	r3, [r2, #48]	@ 0x30
 8003196:	4b3e      	ldr	r3, [pc, #248]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031a2:	23c0      	movs	r3, #192	@ 0xc0
 80031a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a6:	2312      	movs	r3, #18
 80031a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ae:	2303      	movs	r3, #3
 80031b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031b2:	2304      	movs	r3, #4
 80031b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b6:	f107 031c 	add.w	r3, r7, #28
 80031ba:	4619      	mov	r1, r3
 80031bc:	4835      	ldr	r0, [pc, #212]	@ (8003294 <HAL_I2C_MspInit+0x130>)
 80031be:	f000 fcdd 	bl	8003b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	4b32      	ldr	r3, [pc, #200]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	4a31      	ldr	r2, [pc, #196]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 80031cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80031de:	e050      	b.n	8003282 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003298 <HAL_I2C_MspInit+0x134>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d14b      	bne.n	8003282 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	4a27      	ldr	r2, [pc, #156]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 80031f4:	f043 0304 	orr.w	r3, r3, #4
 80031f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031fa:	4b25      	ldr	r3, [pc, #148]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	4b21      	ldr	r3, [pc, #132]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	4a20      	ldr	r2, [pc, #128]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6313      	str	r3, [r2, #48]	@ 0x30
 8003216:	4b1e      	ldr	r3, [pc, #120]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003222:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003228:	2312      	movs	r3, #18
 800322a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003230:	2303      	movs	r3, #3
 8003232:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003234:	2304      	movs	r3, #4
 8003236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003238:	f107 031c 	add.w	r3, r7, #28
 800323c:	4619      	mov	r1, r3
 800323e:	4817      	ldr	r0, [pc, #92]	@ (800329c <HAL_I2C_MspInit+0x138>)
 8003240:	f000 fc9c 	bl	8003b7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003244:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800324a:	2312      	movs	r3, #18
 800324c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003252:	2303      	movs	r3, #3
 8003254:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003256:	2304      	movs	r3, #4
 8003258:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325a:	f107 031c 	add.w	r3, r7, #28
 800325e:	4619      	mov	r1, r3
 8003260:	480f      	ldr	r0, [pc, #60]	@ (80032a0 <HAL_I2C_MspInit+0x13c>)
 8003262:	f000 fc8b 	bl	8003b7c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	4a08      	ldr	r2, [pc, #32]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 8003270:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003274:	6413      	str	r3, [r2, #64]	@ 0x40
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_I2C_MspInit+0x12c>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
}
 8003282:	bf00      	nop
 8003284:	3730      	adds	r7, #48	@ 0x30
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40005400 	.word	0x40005400
 8003290:	40023800 	.word	0x40023800
 8003294:	40020400 	.word	0x40020400
 8003298:	40005c00 	.word	0x40005c00
 800329c:	40020800 	.word	0x40020800
 80032a0:	40020000 	.word	0x40020000

080032a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08e      	sub	sp, #56	@ 0x38
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c4:	d153      	bne.n	800336e <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]
 80032ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d6:	4b58      	ldr	r3, [pc, #352]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	623b      	str	r3, [r7, #32]
 80032e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	4b54      	ldr	r3, [pc, #336]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	4a53      	ldr	r2, [pc, #332]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f2:	4b51      	ldr	r3, [pc, #324]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	4b4d      	ldr	r3, [pc, #308]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	4a4c      	ldr	r2, [pc, #304]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	6313      	str	r3, [r2, #48]	@ 0x30
 800330e:	4b4a      	ldr	r3, [pc, #296]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	69bb      	ldr	r3, [r7, #24]
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800331a:	2320      	movs	r3, #32
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331e:	2302      	movs	r3, #2
 8003320:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003322:	2302      	movs	r3, #2
 8003324:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003326:	2300      	movs	r3, #0
 8003328:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800332a:	2301      	movs	r3, #1
 800332c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003332:	4619      	mov	r1, r3
 8003334:	4841      	ldr	r0, [pc, #260]	@ (800343c <HAL_TIM_Base_MspInit+0x198>)
 8003336:	f000 fc21 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 800333a:	f640 4308 	movw	r3, #3080	@ 0xc08
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
 8003342:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003344:	2302      	movs	r3, #2
 8003346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003348:	2300      	movs	r3, #0
 800334a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800334c:	2301      	movs	r3, #1
 800334e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003354:	4619      	mov	r1, r3
 8003356:	483a      	ldr	r0, [pc, #232]	@ (8003440 <HAL_TIM_Base_MspInit+0x19c>)
 8003358:	f000 fc10 	bl	8003b7c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800335c:	2200      	movs	r2, #0
 800335e:	2100      	movs	r1, #0
 8003360:	201c      	movs	r0, #28
 8003362:	f000 fbd4 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003366:	201c      	movs	r0, #28
 8003368:	f000 fbed 	bl	8003b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800336c:	e060      	b.n	8003430 <HAL_TIM_Base_MspInit+0x18c>
  else if(htim_base->Instance==TIM3)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a34      	ldr	r2, [pc, #208]	@ (8003444 <HAL_TIM_Base_MspInit+0x1a0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d10e      	bne.n	8003396 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	4b2e      	ldr	r3, [pc, #184]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	4a2d      	ldr	r2, [pc, #180]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 8003382:	f043 0302 	orr.w	r3, r3, #2
 8003386:	6413      	str	r3, [r2, #64]	@ 0x40
 8003388:	4b2b      	ldr	r3, [pc, #172]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	697b      	ldr	r3, [r7, #20]
}
 8003394:	e04c      	b.n	8003430 <HAL_TIM_Base_MspInit+0x18c>
  else if(htim_base->Instance==TIM4)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2b      	ldr	r2, [pc, #172]	@ (8003448 <HAL_TIM_Base_MspInit+0x1a4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d10e      	bne.n	80033be <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	4b24      	ldr	r3, [pc, #144]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	4a23      	ldr	r2, [pc, #140]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80033aa:	f043 0304 	orr.w	r3, r3, #4
 80033ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b0:	4b21      	ldr	r3, [pc, #132]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	693b      	ldr	r3, [r7, #16]
}
 80033bc:	e038      	b.n	8003430 <HAL_TIM_Base_MspInit+0x18c>
  else if(htim_base->Instance==TIM5)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a22      	ldr	r2, [pc, #136]	@ (800344c <HAL_TIM_Base_MspInit+0x1a8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d133      	bne.n	8003430 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	4a19      	ldr	r2, [pc, #100]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80033d2:	f043 0308 	orr.w	r3, r3, #8
 80033d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80033d8:	4b17      	ldr	r3, [pc, #92]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e4:	2300      	movs	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	4b13      	ldr	r3, [pc, #76]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ec:	4a12      	ldr	r2, [pc, #72]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f4:	4b10      	ldr	r3, [pc, #64]	@ (8003438 <HAL_TIM_Base_MspInit+0x194>)
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003400:	230f      	movs	r3, #15
 8003402:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003408:	2302      	movs	r3, #2
 800340a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340c:	2300      	movs	r3, #0
 800340e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003410:	2302      	movs	r3, #2
 8003412:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003418:	4619      	mov	r1, r3
 800341a:	4808      	ldr	r0, [pc, #32]	@ (800343c <HAL_TIM_Base_MspInit+0x198>)
 800341c:	f000 fbae 	bl	8003b7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003420:	2200      	movs	r2, #0
 8003422:	2100      	movs	r1, #0
 8003424:	2032      	movs	r0, #50	@ 0x32
 8003426:	f000 fb72 	bl	8003b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800342a:	2032      	movs	r0, #50	@ 0x32
 800342c:	f000 fb8b 	bl	8003b46 <HAL_NVIC_EnableIRQ>
}
 8003430:	bf00      	nop
 8003432:	3738      	adds	r7, #56	@ 0x38
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40023800 	.word	0x40023800
 800343c:	40020000 	.word	0x40020000
 8003440:	40020400 	.word	0x40020400
 8003444:	40000400 	.word	0x40000400
 8003448:	40000800 	.word	0x40000800
 800344c:	40000c00 	.word	0x40000c00

08003450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	@ 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a33      	ldr	r2, [pc, #204]	@ (800353c <HAL_TIM_MspPostInit+0xec>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d13c      	bne.n	80034ec <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	4b32      	ldr	r3, [pc, #200]	@ (8003540 <HAL_TIM_MspPostInit+0xf0>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	4a31      	ldr	r2, [pc, #196]	@ (8003540 <HAL_TIM_MspPostInit+0xf0>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6313      	str	r3, [r2, #48]	@ 0x30
 8003482:	4b2f      	ldr	r3, [pc, #188]	@ (8003540 <HAL_TIM_MspPostInit+0xf0>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b2b      	ldr	r3, [pc, #172]	@ (8003540 <HAL_TIM_MspPostInit+0xf0>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	4a2a      	ldr	r2, [pc, #168]	@ (8003540 <HAL_TIM_MspPostInit+0xf0>)
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	6313      	str	r3, [r2, #48]	@ 0x30
 800349e:	4b28      	ldr	r3, [pc, #160]	@ (8003540 <HAL_TIM_MspPostInit+0xf0>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034aa:	23c0      	movs	r3, #192	@ 0xc0
 80034ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ae:	2302      	movs	r3, #2
 80034b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b6:	2303      	movs	r3, #3
 80034b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034ba:	2302      	movs	r3, #2
 80034bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034be:	f107 0314 	add.w	r3, r7, #20
 80034c2:	4619      	mov	r1, r3
 80034c4:	481f      	ldr	r0, [pc, #124]	@ (8003544 <HAL_TIM_MspPostInit+0xf4>)
 80034c6:	f000 fb59 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034ca:	2303      	movs	r3, #3
 80034cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	2302      	movs	r3, #2
 80034d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d6:	2303      	movs	r3, #3
 80034d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034da:	2302      	movs	r3, #2
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034de:	f107 0314 	add.w	r3, r7, #20
 80034e2:	4619      	mov	r1, r3
 80034e4:	4818      	ldr	r0, [pc, #96]	@ (8003548 <HAL_TIM_MspPostInit+0xf8>)
 80034e6:	f000 fb49 	bl	8003b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80034ea:	e023      	b.n	8003534 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a16      	ldr	r2, [pc, #88]	@ (800354c <HAL_TIM_MspPostInit+0xfc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d11e      	bne.n	8003534 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	4b11      	ldr	r3, [pc, #68]	@ (8003540 <HAL_TIM_MspPostInit+0xf0>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	4a10      	ldr	r2, [pc, #64]	@ (8003540 <HAL_TIM_MspPostInit+0xf0>)
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	6313      	str	r3, [r2, #48]	@ 0x30
 8003506:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <HAL_TIM_MspPostInit+0xf0>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003512:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8003516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	2302      	movs	r3, #2
 800351a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003520:	2303      	movs	r3, #3
 8003522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003524:	2302      	movs	r3, #2
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	4619      	mov	r1, r3
 800352e:	4808      	ldr	r0, [pc, #32]	@ (8003550 <HAL_TIM_MspPostInit+0x100>)
 8003530:	f000 fb24 	bl	8003b7c <HAL_GPIO_Init>
}
 8003534:	bf00      	nop
 8003536:	3728      	adds	r7, #40	@ 0x28
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40000400 	.word	0x40000400
 8003540:	40023800 	.word	0x40023800
 8003544:	40020000 	.word	0x40020000
 8003548:	40020400 	.word	0x40020400
 800354c:	40000800 	.word	0x40000800
 8003550:	40020c00 	.word	0x40020c00

08003554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	@ 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	@ (80035d8 <HAL_UART_MspInit+0x84>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d12b      	bne.n	80035ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <HAL_UART_MspInit+0x88>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	4a17      	ldr	r2, [pc, #92]	@ (80035dc <HAL_UART_MspInit+0x88>)
 8003580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003584:	6413      	str	r3, [r2, #64]	@ 0x40
 8003586:	4b15      	ldr	r3, [pc, #84]	@ (80035dc <HAL_UART_MspInit+0x88>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <HAL_UART_MspInit+0x88>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	4a10      	ldr	r2, [pc, #64]	@ (80035dc <HAL_UART_MspInit+0x88>)
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a2:	4b0e      	ldr	r3, [pc, #56]	@ (80035dc <HAL_UART_MspInit+0x88>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035ae:	2360      	movs	r3, #96	@ 0x60
 80035b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b2:	2302      	movs	r3, #2
 80035b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ba:	2303      	movs	r3, #3
 80035bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035be:	2307      	movs	r3, #7
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035c2:	f107 0314 	add.w	r3, r7, #20
 80035c6:	4619      	mov	r1, r3
 80035c8:	4805      	ldr	r0, [pc, #20]	@ (80035e0 <HAL_UART_MspInit+0x8c>)
 80035ca:	f000 fad7 	bl	8003b7c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80035ce:	bf00      	nop
 80035d0:	3728      	adds	r7, #40	@ 0x28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40004400 	.word	0x40004400
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40020c00 	.word	0x40020c00

080035e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <NMI_Handler+0x4>

080035ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <HardFault_Handler+0x4>

080035f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f8:	bf00      	nop
 80035fa:	e7fd      	b.n	80035f8 <MemManage_Handler+0x4>

080035fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003600:	bf00      	nop
 8003602:	e7fd      	b.n	8003600 <BusFault_Handler+0x4>

08003604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003608:	bf00      	nop
 800360a:	e7fd      	b.n	8003608 <UsageFault_Handler+0x4>

0800360c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800362c:	bf00      	nop
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800363a:	f000 f949 	bl	80038d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003648:	4802      	ldr	r0, [pc, #8]	@ (8003654 <TIM2_IRQHandler+0x10>)
 800364a:	f002 fbe1 	bl	8005e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	2000018c 	.word	0x2000018c

08003658 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800365c:	4802      	ldr	r0, [pc, #8]	@ (8003668 <TIM5_IRQHandler+0x10>)
 800365e:	f002 fbd7 	bl	8005e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000264 	.word	0x20000264

0800366c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e00a      	b.n	8003694 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800367e:	f3af 8000 	nop.w
 8003682:	4601      	mov	r1, r0
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	60ba      	str	r2, [r7, #8]
 800368a:	b2ca      	uxtb	r2, r1
 800368c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	3301      	adds	r3, #1
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	429a      	cmp	r2, r3
 800369a:	dbf0      	blt.n	800367e <_read+0x12>
  }

  return len;
 800369c:	687b      	ldr	r3, [r7, #4]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e009      	b.n	80036cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	60ba      	str	r2, [r7, #8]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	3301      	adds	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	dbf1      	blt.n	80036b8 <_write+0x12>
  }
  return len;
 80036d4:	687b      	ldr	r3, [r7, #4]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <_close>:

int _close(int file)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003706:	605a      	str	r2, [r3, #4]
  return 0;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <_isatty>:

int _isatty(int file)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800371e:	2301      	movs	r3, #1
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003750:	4a14      	ldr	r2, [pc, #80]	@ (80037a4 <_sbrk+0x5c>)
 8003752:	4b15      	ldr	r3, [pc, #84]	@ (80037a8 <_sbrk+0x60>)
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800375c:	4b13      	ldr	r3, [pc, #76]	@ (80037ac <_sbrk+0x64>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003764:	4b11      	ldr	r3, [pc, #68]	@ (80037ac <_sbrk+0x64>)
 8003766:	4a12      	ldr	r2, [pc, #72]	@ (80037b0 <_sbrk+0x68>)
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800376a:	4b10      	ldr	r3, [pc, #64]	@ (80037ac <_sbrk+0x64>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	429a      	cmp	r2, r3
 8003776:	d207      	bcs.n	8003788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003778:	f004 f82c 	bl	80077d4 <__errno>
 800377c:	4603      	mov	r3, r0
 800377e:	220c      	movs	r2, #12
 8003780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295
 8003786:	e009      	b.n	800379c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003788:	4b08      	ldr	r3, [pc, #32]	@ (80037ac <_sbrk+0x64>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800378e:	4b07      	ldr	r3, [pc, #28]	@ (80037ac <_sbrk+0x64>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	4a05      	ldr	r2, [pc, #20]	@ (80037ac <_sbrk+0x64>)
 8003798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800379a:	68fb      	ldr	r3, [r7, #12]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20020000 	.word	0x20020000
 80037a8:	00000400 	.word	0x00000400
 80037ac:	20000434 	.word	0x20000434
 80037b0:	20000588 	.word	0x20000588

080037b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037b8:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <SystemInit+0x20>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037be:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <SystemInit+0x20>)
 80037c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003810 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80037dc:	f7ff ffea 	bl	80037b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037e0:	480c      	ldr	r0, [pc, #48]	@ (8003814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037e2:	490d      	ldr	r1, [pc, #52]	@ (8003818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037e4:	4a0d      	ldr	r2, [pc, #52]	@ (800381c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037e8:	e002      	b.n	80037f0 <LoopCopyDataInit>

080037ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ee:	3304      	adds	r3, #4

080037f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037f4:	d3f9      	bcc.n	80037ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037fc:	e001      	b.n	8003802 <LoopFillZerobss>

080037fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003800:	3204      	adds	r2, #4

08003802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003804:	d3fb      	bcc.n	80037fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003806:	f003 ffeb 	bl	80077e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800380a:	f7fe fa21 	bl	8001c50 <main>
  bx  lr    
 800380e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003810:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003818:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800381c:	08009840 	.word	0x08009840
  ldr r2, =_sbss
 8003820:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003824:	20000588 	.word	0x20000588

08003828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003828:	e7fe      	b.n	8003828 <ADC_IRQHandler>
	...

0800382c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003830:	4b0e      	ldr	r3, [pc, #56]	@ (800386c <HAL_Init+0x40>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a0d      	ldr	r2, [pc, #52]	@ (800386c <HAL_Init+0x40>)
 8003836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800383a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800383c:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <HAL_Init+0x40>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a0a      	ldr	r2, [pc, #40]	@ (800386c <HAL_Init+0x40>)
 8003842:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003848:	4b08      	ldr	r3, [pc, #32]	@ (800386c <HAL_Init+0x40>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a07      	ldr	r2, [pc, #28]	@ (800386c <HAL_Init+0x40>)
 800384e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003854:	2003      	movs	r0, #3
 8003856:	f000 f94f 	bl	8003af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800385a:	2000      	movs	r0, #0
 800385c:	f000 f808 	bl	8003870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003860:	f7ff fc58 	bl	8003114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023c00 	.word	0x40023c00

08003870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003878:	4b12      	ldr	r3, [pc, #72]	@ (80038c4 <HAL_InitTick+0x54>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4b12      	ldr	r3, [pc, #72]	@ (80038c8 <HAL_InitTick+0x58>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	4619      	mov	r1, r3
 8003882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003886:	fbb3 f3f1 	udiv	r3, r3, r1
 800388a:	fbb2 f3f3 	udiv	r3, r2, r3
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f967 	bl	8003b62 <HAL_SYSTICK_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e00e      	b.n	80038bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b0f      	cmp	r3, #15
 80038a2:	d80a      	bhi.n	80038ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038a4:	2200      	movs	r2, #0
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ac:	f000 f92f 	bl	8003b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038b0:	4a06      	ldr	r2, [pc, #24]	@ (80038cc <HAL_InitTick+0x5c>)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e000      	b.n	80038bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20000000 	.word	0x20000000
 80038c8:	20000008 	.word	0x20000008
 80038cc:	20000004 	.word	0x20000004

080038d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038d4:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <HAL_IncTick+0x20>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <HAL_IncTick+0x24>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4413      	add	r3, r2
 80038e0:	4a04      	ldr	r2, [pc, #16]	@ (80038f4 <HAL_IncTick+0x24>)
 80038e2:	6013      	str	r3, [r2, #0]
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000008 	.word	0x20000008
 80038f4:	20000438 	.word	0x20000438

080038f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return uwTick;
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <HAL_GetTick+0x14>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000438 	.word	0x20000438

08003910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003918:	f7ff ffee 	bl	80038f8 <HAL_GetTick>
 800391c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d005      	beq.n	8003936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800392a:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <HAL_Delay+0x44>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003936:	bf00      	nop
 8003938:	f7ff ffde 	bl	80038f8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	429a      	cmp	r2, r3
 8003946:	d8f7      	bhi.n	8003938 <HAL_Delay+0x28>
  {
  }
}
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000008 	.word	0x20000008

08003958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003968:	4b0c      	ldr	r3, [pc, #48]	@ (800399c <__NVIC_SetPriorityGrouping+0x44>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398a:	4a04      	ldr	r2, [pc, #16]	@ (800399c <__NVIC_SetPriorityGrouping+0x44>)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	60d3      	str	r3, [r2, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a4:	4b04      	ldr	r3, [pc, #16]	@ (80039b8 <__NVIC_GetPriorityGrouping+0x18>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	f003 0307 	and.w	r3, r3, #7
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	db0b      	blt.n	80039e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	f003 021f 	and.w	r2, r3, #31
 80039d4:	4907      	ldr	r1, [pc, #28]	@ (80039f4 <__NVIC_EnableIRQ+0x38>)
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2001      	movs	r0, #1
 80039de:	fa00 f202 	lsl.w	r2, r0, r2
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e000e100 	.word	0xe000e100

080039f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	db0a      	blt.n	8003a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	490c      	ldr	r1, [pc, #48]	@ (8003a44 <__NVIC_SetPriority+0x4c>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	0112      	lsls	r2, r2, #4
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a20:	e00a      	b.n	8003a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4908      	ldr	r1, [pc, #32]	@ (8003a48 <__NVIC_SetPriority+0x50>)
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	3b04      	subs	r3, #4
 8003a30:	0112      	lsls	r2, r2, #4
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	440b      	add	r3, r1
 8003a36:	761a      	strb	r2, [r3, #24]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000e100 	.word	0xe000e100
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	@ 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f1c3 0307 	rsb	r3, r3, #7
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	bf28      	it	cs
 8003a6a:	2304      	movcs	r3, #4
 8003a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3304      	adds	r3, #4
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d902      	bls.n	8003a7c <NVIC_EncodePriority+0x30>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3b03      	subs	r3, #3
 8003a7a:	e000      	b.n	8003a7e <NVIC_EncodePriority+0x32>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	f04f 32ff 	mov.w	r2, #4294967295
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	401a      	ands	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a94:	f04f 31ff 	mov.w	r1, #4294967295
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	43d9      	mvns	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa4:	4313      	orrs	r3, r2
         );
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3724      	adds	r7, #36	@ 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac4:	d301      	bcc.n	8003aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00f      	b.n	8003aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aca:	4a0a      	ldr	r2, [pc, #40]	@ (8003af4 <SysTick_Config+0x40>)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad2:	210f      	movs	r1, #15
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	f7ff ff8e 	bl	80039f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003adc:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <SysTick_Config+0x40>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae2:	4b04      	ldr	r3, [pc, #16]	@ (8003af4 <SysTick_Config+0x40>)
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	e000e010 	.word	0xe000e010

08003af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff29 	bl	8003958 <__NVIC_SetPriorityGrouping>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4603      	mov	r3, r0
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b20:	f7ff ff3e 	bl	80039a0 <__NVIC_GetPriorityGrouping>
 8003b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	6978      	ldr	r0, [r7, #20]
 8003b2c:	f7ff ff8e 	bl	8003a4c <NVIC_EncodePriority>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff5d 	bl	80039f8 <__NVIC_SetPriority>
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff31 	bl	80039bc <__NVIC_EnableIRQ>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff ffa2 	bl	8003ab4 <SysTick_Config>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b089      	sub	sp, #36	@ 0x24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	e16b      	b.n	8003e70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b98:	2201      	movs	r2, #1
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	f040 815a 	bne.w	8003e6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d005      	beq.n	8003bce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d130      	bne.n	8003c30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	2203      	movs	r2, #3
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c04:	2201      	movs	r2, #1
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	091b      	lsrs	r3, r3, #4
 8003c1a:	f003 0201 	and.w	r2, r3, #1
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d017      	beq.n	8003c6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	2203      	movs	r2, #3
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d123      	bne.n	8003cc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	08da      	lsrs	r2, r3, #3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3208      	adds	r2, #8
 8003c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	220f      	movs	r2, #15
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	08da      	lsrs	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3208      	adds	r2, #8
 8003cba:	69b9      	ldr	r1, [r7, #24]
 8003cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	2203      	movs	r2, #3
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f003 0203 	and.w	r2, r3, #3
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80b4 	beq.w	8003e6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	4b60      	ldr	r3, [pc, #384]	@ (8003e88 <HAL_GPIO_Init+0x30c>)
 8003d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0a:	4a5f      	ldr	r2, [pc, #380]	@ (8003e88 <HAL_GPIO_Init+0x30c>)
 8003d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d12:	4b5d      	ldr	r3, [pc, #372]	@ (8003e88 <HAL_GPIO_Init+0x30c>)
 8003d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d1e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e8c <HAL_GPIO_Init+0x310>)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	089b      	lsrs	r3, r3, #2
 8003d24:	3302      	adds	r3, #2
 8003d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	220f      	movs	r2, #15
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a52      	ldr	r2, [pc, #328]	@ (8003e90 <HAL_GPIO_Init+0x314>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d02b      	beq.n	8003da2 <HAL_GPIO_Init+0x226>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a51      	ldr	r2, [pc, #324]	@ (8003e94 <HAL_GPIO_Init+0x318>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d025      	beq.n	8003d9e <HAL_GPIO_Init+0x222>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a50      	ldr	r2, [pc, #320]	@ (8003e98 <HAL_GPIO_Init+0x31c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01f      	beq.n	8003d9a <HAL_GPIO_Init+0x21e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a4f      	ldr	r2, [pc, #316]	@ (8003e9c <HAL_GPIO_Init+0x320>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d019      	beq.n	8003d96 <HAL_GPIO_Init+0x21a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a4e      	ldr	r2, [pc, #312]	@ (8003ea0 <HAL_GPIO_Init+0x324>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d013      	beq.n	8003d92 <HAL_GPIO_Init+0x216>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a4d      	ldr	r2, [pc, #308]	@ (8003ea4 <HAL_GPIO_Init+0x328>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00d      	beq.n	8003d8e <HAL_GPIO_Init+0x212>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a4c      	ldr	r2, [pc, #304]	@ (8003ea8 <HAL_GPIO_Init+0x32c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <HAL_GPIO_Init+0x20e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a4b      	ldr	r2, [pc, #300]	@ (8003eac <HAL_GPIO_Init+0x330>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d101      	bne.n	8003d86 <HAL_GPIO_Init+0x20a>
 8003d82:	2307      	movs	r3, #7
 8003d84:	e00e      	b.n	8003da4 <HAL_GPIO_Init+0x228>
 8003d86:	2308      	movs	r3, #8
 8003d88:	e00c      	b.n	8003da4 <HAL_GPIO_Init+0x228>
 8003d8a:	2306      	movs	r3, #6
 8003d8c:	e00a      	b.n	8003da4 <HAL_GPIO_Init+0x228>
 8003d8e:	2305      	movs	r3, #5
 8003d90:	e008      	b.n	8003da4 <HAL_GPIO_Init+0x228>
 8003d92:	2304      	movs	r3, #4
 8003d94:	e006      	b.n	8003da4 <HAL_GPIO_Init+0x228>
 8003d96:	2303      	movs	r3, #3
 8003d98:	e004      	b.n	8003da4 <HAL_GPIO_Init+0x228>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e002      	b.n	8003da4 <HAL_GPIO_Init+0x228>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_GPIO_Init+0x228>
 8003da2:	2300      	movs	r3, #0
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	f002 0203 	and.w	r2, r2, #3
 8003daa:	0092      	lsls	r2, r2, #2
 8003dac:	4093      	lsls	r3, r2
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003db4:	4935      	ldr	r1, [pc, #212]	@ (8003e8c <HAL_GPIO_Init+0x310>)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	089b      	lsrs	r3, r3, #2
 8003dba:	3302      	adds	r3, #2
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb0 <HAL_GPIO_Init+0x334>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003de6:	4a32      	ldr	r2, [pc, #200]	@ (8003eb0 <HAL_GPIO_Init+0x334>)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dec:	4b30      	ldr	r3, [pc, #192]	@ (8003eb0 <HAL_GPIO_Init+0x334>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e10:	4a27      	ldr	r2, [pc, #156]	@ (8003eb0 <HAL_GPIO_Init+0x334>)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e16:	4b26      	ldr	r3, [pc, #152]	@ (8003eb0 <HAL_GPIO_Init+0x334>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4013      	ands	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb0 <HAL_GPIO_Init+0x334>)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e40:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <HAL_GPIO_Init+0x334>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e64:	4a12      	ldr	r2, [pc, #72]	@ (8003eb0 <HAL_GPIO_Init+0x334>)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b0f      	cmp	r3, #15
 8003e74:	f67f ae90 	bls.w	8003b98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	3724      	adds	r7, #36	@ 0x24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40013800 	.word	0x40013800
 8003e90:	40020000 	.word	0x40020000
 8003e94:	40020400 	.word	0x40020400
 8003e98:	40020800 	.word	0x40020800
 8003e9c:	40020c00 	.word	0x40020c00
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40021400 	.word	0x40021400
 8003ea8:	40021800 	.word	0x40021800
 8003eac:	40021c00 	.word	0x40021c00
 8003eb0:	40013c00 	.word	0x40013c00

08003eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e12b      	b.n	800411e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff f942 	bl	8003164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	@ 0x24
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f18:	f001 fc60 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 8003f1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4a81      	ldr	r2, [pc, #516]	@ (8004128 <HAL_I2C_Init+0x274>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d807      	bhi.n	8003f38 <HAL_I2C_Init+0x84>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a80      	ldr	r2, [pc, #512]	@ (800412c <HAL_I2C_Init+0x278>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	bf94      	ite	ls
 8003f30:	2301      	movls	r3, #1
 8003f32:	2300      	movhi	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e006      	b.n	8003f46 <HAL_I2C_Init+0x92>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4a7d      	ldr	r2, [pc, #500]	@ (8004130 <HAL_I2C_Init+0x27c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	bf94      	ite	ls
 8003f40:	2301      	movls	r3, #1
 8003f42:	2300      	movhi	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0e7      	b.n	800411e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a78      	ldr	r2, [pc, #480]	@ (8004134 <HAL_I2C_Init+0x280>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	0c9b      	lsrs	r3, r3, #18
 8003f58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a6a      	ldr	r2, [pc, #424]	@ (8004128 <HAL_I2C_Init+0x274>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d802      	bhi.n	8003f88 <HAL_I2C_Init+0xd4>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3301      	adds	r3, #1
 8003f86:	e009      	b.n	8003f9c <HAL_I2C_Init+0xe8>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f8e:	fb02 f303 	mul.w	r3, r2, r3
 8003f92:	4a69      	ldr	r2, [pc, #420]	@ (8004138 <HAL_I2C_Init+0x284>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003fae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	495c      	ldr	r1, [pc, #368]	@ (8004128 <HAL_I2C_Init+0x274>)
 8003fb8:	428b      	cmp	r3, r1
 8003fba:	d819      	bhi.n	8003ff0 <HAL_I2C_Init+0x13c>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1e59      	subs	r1, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fca:	1c59      	adds	r1, r3, #1
 8003fcc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003fd0:	400b      	ands	r3, r1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_I2C_Init+0x138>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1e59      	subs	r1, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fea:	e051      	b.n	8004090 <HAL_I2C_Init+0x1dc>
 8003fec:	2304      	movs	r3, #4
 8003fee:	e04f      	b.n	8004090 <HAL_I2C_Init+0x1dc>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d111      	bne.n	800401c <HAL_I2C_Init+0x168>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1e58      	subs	r0, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6859      	ldr	r1, [r3, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	440b      	add	r3, r1
 8004006:	fbb0 f3f3 	udiv	r3, r0, r3
 800400a:	3301      	adds	r3, #1
 800400c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e012      	b.n	8004042 <HAL_I2C_Init+0x18e>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1e58      	subs	r0, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6859      	ldr	r1, [r3, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	0099      	lsls	r1, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004032:	3301      	adds	r3, #1
 8004034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_I2C_Init+0x196>
 8004046:	2301      	movs	r3, #1
 8004048:	e022      	b.n	8004090 <HAL_I2C_Init+0x1dc>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10e      	bne.n	8004070 <HAL_I2C_Init+0x1bc>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1e58      	subs	r0, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6859      	ldr	r1, [r3, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	440b      	add	r3, r1
 8004060:	fbb0 f3f3 	udiv	r3, r0, r3
 8004064:	3301      	adds	r3, #1
 8004066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800406e:	e00f      	b.n	8004090 <HAL_I2C_Init+0x1dc>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	1e58      	subs	r0, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	0099      	lsls	r1, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	fbb0 f3f3 	udiv	r3, r0, r3
 8004086:	3301      	adds	r3, #1
 8004088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	6809      	ldr	r1, [r1, #0]
 8004094:	4313      	orrs	r3, r2
 8004096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80040be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6911      	ldr	r1, [r2, #16]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68d2      	ldr	r2, [r2, #12]
 80040ca:	4311      	orrs	r1, r2
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	000186a0 	.word	0x000186a0
 800412c:	001e847f 	.word	0x001e847f
 8004130:	003d08ff 	.word	0x003d08ff
 8004134:	431bde83 	.word	0x431bde83
 8004138:	10624dd3 	.word	0x10624dd3

0800413c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	4608      	mov	r0, r1
 8004146:	4611      	mov	r1, r2
 8004148:	461a      	mov	r2, r3
 800414a:	4603      	mov	r3, r0
 800414c:	817b      	strh	r3, [r7, #10]
 800414e:	460b      	mov	r3, r1
 8004150:	813b      	strh	r3, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004156:	f7ff fbcf 	bl	80038f8 <HAL_GetTick>
 800415a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b20      	cmp	r3, #32
 8004166:	f040 80d9 	bne.w	800431c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	2319      	movs	r3, #25
 8004170:	2201      	movs	r2, #1
 8004172:	496d      	ldr	r1, [pc, #436]	@ (8004328 <HAL_I2C_Mem_Write+0x1ec>)
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fc8b 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
 8004182:	e0cc      	b.n	800431e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_I2C_Mem_Write+0x56>
 800418e:	2302      	movs	r3, #2
 8004190:	e0c5      	b.n	800431e <HAL_I2C_Mem_Write+0x1e2>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d007      	beq.n	80041b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2221      	movs	r2, #33	@ 0x21
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2240      	movs	r2, #64	@ 0x40
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a3a      	ldr	r2, [r7, #32]
 80041e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4a4d      	ldr	r2, [pc, #308]	@ (800432c <HAL_I2C_Mem_Write+0x1f0>)
 80041f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041fa:	88f8      	ldrh	r0, [r7, #6]
 80041fc:	893a      	ldrh	r2, [r7, #8]
 80041fe:	8979      	ldrh	r1, [r7, #10]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	9301      	str	r3, [sp, #4]
 8004204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	4603      	mov	r3, r0
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fac2 	bl	8004794 <I2C_RequestMemoryWrite>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d052      	beq.n	80042bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e081      	b.n	800431e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fd50 	bl	8004cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00d      	beq.n	8004246 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	2b04      	cmp	r3, #4
 8004230:	d107      	bne.n	8004242 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004240:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e06b      	b.n	800431e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	781a      	ldrb	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b04      	cmp	r3, #4
 8004282:	d11b      	bne.n	80042bc <HAL_I2C_Mem_Write+0x180>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004288:	2b00      	cmp	r3, #0
 800428a:	d017      	beq.n	80042bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	781a      	ldrb	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1aa      	bne.n	800421a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fd43 	bl	8004d54 <I2C_WaitOnBTFFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00d      	beq.n	80042f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d107      	bne.n	80042ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e016      	b.n	800431e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e000      	b.n	800431e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	00100002 	.word	0x00100002
 800432c:	ffff0000 	.word	0xffff0000

08004330 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08c      	sub	sp, #48	@ 0x30
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	461a      	mov	r2, r3
 800433e:	4603      	mov	r3, r0
 8004340:	817b      	strh	r3, [r7, #10]
 8004342:	460b      	mov	r3, r1
 8004344:	813b      	strh	r3, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800434a:	f7ff fad5 	bl	80038f8 <HAL_GetTick>
 800434e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b20      	cmp	r3, #32
 800435a:	f040 8214 	bne.w	8004786 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	2319      	movs	r3, #25
 8004364:	2201      	movs	r2, #1
 8004366:	497b      	ldr	r1, [pc, #492]	@ (8004554 <HAL_I2C_Mem_Read+0x224>)
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fb91 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
 8004376:	e207      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_I2C_Mem_Read+0x56>
 8004382:	2302      	movs	r3, #2
 8004384:	e200      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d007      	beq.n	80043ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2222      	movs	r2, #34	@ 0x22
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2240      	movs	r2, #64	@ 0x40
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80043dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004558 <HAL_I2C_Mem_Read+0x228>)
 80043ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043ee:	88f8      	ldrh	r0, [r7, #6]
 80043f0:	893a      	ldrh	r2, [r7, #8]
 80043f2:	8979      	ldrh	r1, [r7, #10]
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	4603      	mov	r3, r0
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fa5e 	bl	80048c0 <I2C_RequestMemoryRead>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e1bc      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004412:	2b00      	cmp	r3, #0
 8004414:	d113      	bne.n	800443e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004416:	2300      	movs	r3, #0
 8004418:	623b      	str	r3, [r7, #32]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	623b      	str	r3, [r7, #32]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	623b      	str	r3, [r7, #32]
 800442a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e190      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004442:	2b01      	cmp	r3, #1
 8004444:	d11b      	bne.n	800447e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004454:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e170      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004482:	2b02      	cmp	r3, #2
 8004484:	d11b      	bne.n	80044be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004494:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	e150      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044d4:	e144      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044da:	2b03      	cmp	r3, #3
 80044dc:	f200 80f1 	bhi.w	80046c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d123      	bne.n	8004530 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fc79 	bl	8004de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e145      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800452e:	e117      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004534:	2b02      	cmp	r3, #2
 8004536:	d14e      	bne.n	80045d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453e:	2200      	movs	r2, #0
 8004540:	4906      	ldr	r1, [pc, #24]	@ (800455c <HAL_I2C_Mem_Read+0x22c>)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 faa4 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e11a      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
 8004552:	bf00      	nop
 8004554:	00100002 	.word	0x00100002
 8004558:	ffff0000 	.word	0xffff0000
 800455c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045d4:	e0c4      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045dc:	2200      	movs	r2, #0
 80045de:	496c      	ldr	r1, [pc, #432]	@ (8004790 <HAL_I2C_Mem_Read+0x460>)
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fa55 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0cb      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004638:	2200      	movs	r2, #0
 800463a:	4955      	ldr	r1, [pc, #340]	@ (8004790 <HAL_I2C_Mem_Read+0x460>)
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fa27 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e09d      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046c0:	e04e      	b.n	8004760 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fb8c 	bl	8004de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e058      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b04      	cmp	r3, #4
 8004714:	d124      	bne.n	8004760 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471a:	2b03      	cmp	r3, #3
 800471c:	d107      	bne.n	800472e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f aeb6 	bne.w	80044d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	e000      	b.n	8004788 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004786:	2302      	movs	r3, #2
  }
}
 8004788:	4618      	mov	r0, r3
 800478a:	3728      	adds	r7, #40	@ 0x28
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	00010004 	.word	0x00010004

08004794 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af02      	add	r7, sp, #8
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	4608      	mov	r0, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	461a      	mov	r2, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	817b      	strh	r3, [r7, #10]
 80047a6:	460b      	mov	r3, r1
 80047a8:	813b      	strh	r3, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f960 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00d      	beq.n	80047f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e4:	d103      	bne.n	80047ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e05f      	b.n	80048b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047f2:	897b      	ldrh	r3, [r7, #10]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004800:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	6a3a      	ldr	r2, [r7, #32]
 8004806:	492d      	ldr	r1, [pc, #180]	@ (80048bc <I2C_RequestMemoryWrite+0x128>)
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f9bb 	bl	8004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e04c      	b.n	80048b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800482e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004830:	6a39      	ldr	r1, [r7, #32]
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fa46 	bl	8004cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00d      	beq.n	800485a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	2b04      	cmp	r3, #4
 8004844:	d107      	bne.n	8004856 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004854:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e02b      	b.n	80048b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d105      	bne.n	800486c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004860:	893b      	ldrh	r3, [r7, #8]
 8004862:	b2da      	uxtb	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	611a      	str	r2, [r3, #16]
 800486a:	e021      	b.n	80048b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800486c:	893b      	ldrh	r3, [r7, #8]
 800486e:	0a1b      	lsrs	r3, r3, #8
 8004870:	b29b      	uxth	r3, r3
 8004872:	b2da      	uxtb	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800487a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800487c:	6a39      	ldr	r1, [r7, #32]
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fa20 	bl	8004cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00d      	beq.n	80048a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	2b04      	cmp	r3, #4
 8004890:	d107      	bne.n	80048a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e005      	b.n	80048b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048a6:	893b      	ldrh	r3, [r7, #8]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	00010002 	.word	0x00010002

080048c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	461a      	mov	r2, r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	817b      	strh	r3, [r7, #10]
 80048d2:	460b      	mov	r3, r1
 80048d4:	813b      	strh	r3, [r7, #8]
 80048d6:	4613      	mov	r3, r2
 80048d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	2200      	movs	r2, #0
 8004902:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f8c2 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00d      	beq.n	800492e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004920:	d103      	bne.n	800492a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004928:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e0aa      	b.n	8004a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800492e:	897b      	ldrh	r3, [r7, #10]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800493c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	6a3a      	ldr	r2, [r7, #32]
 8004942:	4952      	ldr	r1, [pc, #328]	@ (8004a8c <I2C_RequestMemoryRead+0x1cc>)
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f91d 	bl	8004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e097      	b.n	8004a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800496a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800496c:	6a39      	ldr	r1, [r7, #32]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f9a8 	bl	8004cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	2b04      	cmp	r3, #4
 8004980:	d107      	bne.n	8004992 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004990:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e076      	b.n	8004a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d105      	bne.n	80049a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800499c:	893b      	ldrh	r3, [r7, #8]
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	611a      	str	r2, [r3, #16]
 80049a6:	e021      	b.n	80049ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049a8:	893b      	ldrh	r3, [r7, #8]
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b8:	6a39      	ldr	r1, [r7, #32]
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 f982 	bl	8004cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00d      	beq.n	80049e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d107      	bne.n	80049de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e050      	b.n	8004a84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049e2:	893b      	ldrh	r3, [r7, #8]
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ee:	6a39      	ldr	r1, [r7, #32]
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f967 	bl	8004cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00d      	beq.n	8004a18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d107      	bne.n	8004a14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e035      	b.n	8004a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f82b 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a4e:	d103      	bne.n	8004a58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e013      	b.n	8004a84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a5c:	897b      	ldrh	r3, [r7, #10]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	6a3a      	ldr	r2, [r7, #32]
 8004a70:	4906      	ldr	r1, [pc, #24]	@ (8004a8c <I2C_RequestMemoryRead+0x1cc>)
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f886 	bl	8004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	00010002 	.word	0x00010002

08004a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa0:	e048      	b.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d044      	beq.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fe ff25 	bl	80038f8 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d139      	bne.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	0c1b      	lsrs	r3, r3, #16
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10d      	bne.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	43da      	mvns	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf0c      	ite	eq
 8004adc:	2301      	moveq	r3, #1
 8004ade:	2300      	movne	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	e00c      	b.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	43da      	mvns	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4013      	ands	r3, r2
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d116      	bne.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	f043 0220 	orr.w	r2, r3, #32
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e023      	b.n	8004b7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d10d      	bne.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	43da      	mvns	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	e00c      	b.n	8004b74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	43da      	mvns	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4013      	ands	r3, r2
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d093      	beq.n	8004aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b92:	e071      	b.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba2:	d123      	bne.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd8:	f043 0204 	orr.w	r2, r3, #4
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e067      	b.n	8004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d041      	beq.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf4:	f7fe fe80 	bl	80038f8 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d302      	bcc.n	8004c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d136      	bne.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d10c      	bne.n	8004c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	43da      	mvns	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bf14      	ite	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	2300      	moveq	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e00b      	b.n	8004c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	43da      	mvns	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d016      	beq.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	f043 0220 	orr.w	r2, r3, #32
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e021      	b.n	8004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	0c1b      	lsrs	r3, r3, #16
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d10c      	bne.n	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	43da      	mvns	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	e00b      	b.n	8004cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf14      	ite	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	2300      	moveq	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f47f af6d 	bne.w	8004b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cd0:	e034      	b.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f8e3 	bl	8004e9e <I2C_IsAcknowledgeFailed>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e034      	b.n	8004d4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d028      	beq.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cea:	f7fe fe05 	bl	80038f8 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d11d      	bne.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0a:	2b80      	cmp	r3, #128	@ 0x80
 8004d0c:	d016      	beq.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	f043 0220 	orr.w	r2, r3, #32
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e007      	b.n	8004d4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d46:	2b80      	cmp	r3, #128	@ 0x80
 8004d48:	d1c3      	bne.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d60:	e034      	b.n	8004dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f89b 	bl	8004e9e <I2C_IsAcknowledgeFailed>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e034      	b.n	8004ddc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d028      	beq.n	8004dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fe fdbd 	bl	80038f8 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d11d      	bne.n	8004dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d016      	beq.n	8004dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	f043 0220 	orr.w	r2, r3, #32
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e007      	b.n	8004ddc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d1c3      	bne.n	8004d62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004df0:	e049      	b.n	8004e86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d119      	bne.n	8004e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0210 	mvn.w	r2, #16
 8004e08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e030      	b.n	8004e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e34:	f7fe fd60 	bl	80038f8 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d302      	bcc.n	8004e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11d      	bne.n	8004e86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e54:	2b40      	cmp	r3, #64	@ 0x40
 8004e56:	d016      	beq.n	8004e86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e007      	b.n	8004e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e90:	2b40      	cmp	r3, #64	@ 0x40
 8004e92:	d1ae      	bne.n	8004df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb4:	d11b      	bne.n	8004eee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ebe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	f043 0204 	orr.w	r2, r3, #4
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e267      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d075      	beq.n	8005006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f1a:	4b88      	ldr	r3, [pc, #544]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d00c      	beq.n	8004f40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f26:	4b85      	ldr	r3, [pc, #532]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d112      	bne.n	8004f58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f32:	4b82      	ldr	r3, [pc, #520]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f3e:	d10b      	bne.n	8004f58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f40:	4b7e      	ldr	r3, [pc, #504]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d05b      	beq.n	8005004 <HAL_RCC_OscConfig+0x108>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d157      	bne.n	8005004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e242      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f60:	d106      	bne.n	8004f70 <HAL_RCC_OscConfig+0x74>
 8004f62:	4b76      	ldr	r3, [pc, #472]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a75      	ldr	r2, [pc, #468]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	e01d      	b.n	8004fac <HAL_RCC_OscConfig+0xb0>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCC_OscConfig+0x98>
 8004f7a:	4b70      	ldr	r3, [pc, #448]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a6f      	ldr	r2, [pc, #444]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	4b6d      	ldr	r3, [pc, #436]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a6c      	ldr	r2, [pc, #432]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	e00b      	b.n	8004fac <HAL_RCC_OscConfig+0xb0>
 8004f94:	4b69      	ldr	r3, [pc, #420]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a68      	ldr	r2, [pc, #416]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	4b66      	ldr	r3, [pc, #408]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a65      	ldr	r2, [pc, #404]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d013      	beq.n	8004fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb4:	f7fe fca0 	bl	80038f8 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fbc:	f7fe fc9c 	bl	80038f8 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	@ 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e207      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	4b5b      	ldr	r3, [pc, #364]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0xc0>
 8004fda:	e014      	b.n	8005006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fe fc8c 	bl	80038f8 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe4:	f7fe fc88 	bl	80038f8 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	@ 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e1f3      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff6:	4b51      	ldr	r3, [pc, #324]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0xe8>
 8005002:	e000      	b.n	8005006 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d063      	beq.n	80050da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005012:	4b4a      	ldr	r3, [pc, #296]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 030c 	and.w	r3, r3, #12
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00b      	beq.n	8005036 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800501e:	4b47      	ldr	r3, [pc, #284]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005026:	2b08      	cmp	r3, #8
 8005028:	d11c      	bne.n	8005064 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800502a:	4b44      	ldr	r3, [pc, #272]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d116      	bne.n	8005064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005036:	4b41      	ldr	r3, [pc, #260]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <HAL_RCC_OscConfig+0x152>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d001      	beq.n	800504e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e1c7      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504e:	4b3b      	ldr	r3, [pc, #236]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	4937      	ldr	r1, [pc, #220]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 800505e:	4313      	orrs	r3, r2
 8005060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005062:	e03a      	b.n	80050da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d020      	beq.n	80050ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800506c:	4b34      	ldr	r3, [pc, #208]	@ (8005140 <HAL_RCC_OscConfig+0x244>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005072:	f7fe fc41 	bl	80038f8 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800507a:	f7fe fc3d 	bl	80038f8 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e1a8      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508c:	4b2b      	ldr	r3, [pc, #172]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005098:	4b28      	ldr	r3, [pc, #160]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	4925      	ldr	r1, [pc, #148]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	600b      	str	r3, [r1, #0]
 80050ac:	e015      	b.n	80050da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ae:	4b24      	ldr	r3, [pc, #144]	@ (8005140 <HAL_RCC_OscConfig+0x244>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b4:	f7fe fc20 	bl	80038f8 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050bc:	f7fe fc1c 	bl	80038f8 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e187      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ce:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d036      	beq.n	8005154 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d016      	beq.n	800511c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ee:	4b15      	ldr	r3, [pc, #84]	@ (8005144 <HAL_RCC_OscConfig+0x248>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f4:	f7fe fc00 	bl	80038f8 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050fc:	f7fe fbfc 	bl	80038f8 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e167      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800510e:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <HAL_RCC_OscConfig+0x240>)
 8005110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0f0      	beq.n	80050fc <HAL_RCC_OscConfig+0x200>
 800511a:	e01b      	b.n	8005154 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800511c:	4b09      	ldr	r3, [pc, #36]	@ (8005144 <HAL_RCC_OscConfig+0x248>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005122:	f7fe fbe9 	bl	80038f8 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005128:	e00e      	b.n	8005148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800512a:	f7fe fbe5 	bl	80038f8 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d907      	bls.n	8005148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e150      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
 800513c:	40023800 	.word	0x40023800
 8005140:	42470000 	.word	0x42470000
 8005144:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005148:	4b88      	ldr	r3, [pc, #544]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 800514a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1ea      	bne.n	800512a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8097 	beq.w	8005290 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005162:	2300      	movs	r3, #0
 8005164:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005166:	4b81      	ldr	r3, [pc, #516]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10f      	bne.n	8005192 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005172:	2300      	movs	r3, #0
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	4b7d      	ldr	r3, [pc, #500]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	4a7c      	ldr	r2, [pc, #496]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 800517c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005180:	6413      	str	r3, [r2, #64]	@ 0x40
 8005182:	4b7a      	ldr	r3, [pc, #488]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800518a:	60bb      	str	r3, [r7, #8]
 800518c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800518e:	2301      	movs	r3, #1
 8005190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005192:	4b77      	ldr	r3, [pc, #476]	@ (8005370 <HAL_RCC_OscConfig+0x474>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519a:	2b00      	cmp	r3, #0
 800519c:	d118      	bne.n	80051d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800519e:	4b74      	ldr	r3, [pc, #464]	@ (8005370 <HAL_RCC_OscConfig+0x474>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a73      	ldr	r2, [pc, #460]	@ (8005370 <HAL_RCC_OscConfig+0x474>)
 80051a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051aa:	f7fe fba5 	bl	80038f8 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b2:	f7fe fba1 	bl	80038f8 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e10c      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005370 <HAL_RCC_OscConfig+0x474>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0f0      	beq.n	80051b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d106      	bne.n	80051e6 <HAL_RCC_OscConfig+0x2ea>
 80051d8:	4b64      	ldr	r3, [pc, #400]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 80051da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051dc:	4a63      	ldr	r2, [pc, #396]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051e4:	e01c      	b.n	8005220 <HAL_RCC_OscConfig+0x324>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d10c      	bne.n	8005208 <HAL_RCC_OscConfig+0x30c>
 80051ee:	4b5f      	ldr	r3, [pc, #380]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f2:	4a5e      	ldr	r2, [pc, #376]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 80051f4:	f043 0304 	orr.w	r3, r3, #4
 80051f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051fa:	4b5c      	ldr	r3, [pc, #368]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fe:	4a5b      	ldr	r2, [pc, #364]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	6713      	str	r3, [r2, #112]	@ 0x70
 8005206:	e00b      	b.n	8005220 <HAL_RCC_OscConfig+0x324>
 8005208:	4b58      	ldr	r3, [pc, #352]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 800520a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520c:	4a57      	ldr	r2, [pc, #348]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	6713      	str	r3, [r2, #112]	@ 0x70
 8005214:	4b55      	ldr	r3, [pc, #340]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 8005216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005218:	4a54      	ldr	r2, [pc, #336]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 800521a:	f023 0304 	bic.w	r3, r3, #4
 800521e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d015      	beq.n	8005254 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005228:	f7fe fb66 	bl	80038f8 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522e:	e00a      	b.n	8005246 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005230:	f7fe fb62 	bl	80038f8 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523e:	4293      	cmp	r3, r2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e0cb      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005246:	4b49      	ldr	r3, [pc, #292]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0ee      	beq.n	8005230 <HAL_RCC_OscConfig+0x334>
 8005252:	e014      	b.n	800527e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005254:	f7fe fb50 	bl	80038f8 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800525a:	e00a      	b.n	8005272 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525c:	f7fe fb4c 	bl	80038f8 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800526a:	4293      	cmp	r3, r2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e0b5      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005272:	4b3e      	ldr	r3, [pc, #248]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 8005274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1ee      	bne.n	800525c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800527e:	7dfb      	ldrb	r3, [r7, #23]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d105      	bne.n	8005290 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005284:	4b39      	ldr	r3, [pc, #228]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 8005286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005288:	4a38      	ldr	r2, [pc, #224]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 800528a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800528e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80a1 	beq.w	80053dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800529a:	4b34      	ldr	r3, [pc, #208]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d05c      	beq.n	8005360 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d141      	bne.n	8005332 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ae:	4b31      	ldr	r3, [pc, #196]	@ (8005374 <HAL_RCC_OscConfig+0x478>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b4:	f7fe fb20 	bl	80038f8 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052bc:	f7fe fb1c 	bl	80038f8 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e087      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ce:	4b27      	ldr	r3, [pc, #156]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e8:	019b      	lsls	r3, r3, #6
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f0:	085b      	lsrs	r3, r3, #1
 80052f2:	3b01      	subs	r3, #1
 80052f4:	041b      	lsls	r3, r3, #16
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fc:	061b      	lsls	r3, r3, #24
 80052fe:	491b      	ldr	r1, [pc, #108]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 8005300:	4313      	orrs	r3, r2
 8005302:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005304:	4b1b      	ldr	r3, [pc, #108]	@ (8005374 <HAL_RCC_OscConfig+0x478>)
 8005306:	2201      	movs	r2, #1
 8005308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530a:	f7fe faf5 	bl	80038f8 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005310:	e008      	b.n	8005324 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005312:	f7fe faf1 	bl	80038f8 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e05c      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005324:	4b11      	ldr	r3, [pc, #68]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0f0      	beq.n	8005312 <HAL_RCC_OscConfig+0x416>
 8005330:	e054      	b.n	80053dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005332:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <HAL_RCC_OscConfig+0x478>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005338:	f7fe fade 	bl	80038f8 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005340:	f7fe fada 	bl	80038f8 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e045      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005352:	4b06      	ldr	r3, [pc, #24]	@ (800536c <HAL_RCC_OscConfig+0x470>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x444>
 800535e:	e03d      	b.n	80053dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d107      	bne.n	8005378 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e038      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
 800536c:	40023800 	.word	0x40023800
 8005370:	40007000 	.word	0x40007000
 8005374:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005378:	4b1b      	ldr	r3, [pc, #108]	@ (80053e8 <HAL_RCC_OscConfig+0x4ec>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d028      	beq.n	80053d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005390:	429a      	cmp	r2, r3
 8005392:	d121      	bne.n	80053d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d11a      	bne.n	80053d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053a8:	4013      	ands	r3, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d111      	bne.n	80053d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053be:	085b      	lsrs	r3, r3, #1
 80053c0:	3b01      	subs	r3, #1
 80053c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d107      	bne.n	80053d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d001      	beq.n	80053dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40023800 	.word	0x40023800

080053ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0cc      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005400:	4b68      	ldr	r3, [pc, #416]	@ (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d90c      	bls.n	8005428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540e:	4b65      	ldr	r3, [pc, #404]	@ (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005416:	4b63      	ldr	r3, [pc, #396]	@ (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0b8      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d020      	beq.n	8005476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005440:	4b59      	ldr	r3, [pc, #356]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	4a58      	ldr	r2, [pc, #352]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005446:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800544a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005458:	4b53      	ldr	r3, [pc, #332]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	4a52      	ldr	r2, [pc, #328]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005464:	4b50      	ldr	r3, [pc, #320]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	494d      	ldr	r1, [pc, #308]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d044      	beq.n	800550c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d107      	bne.n	800549a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548a:	4b47      	ldr	r3, [pc, #284]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d119      	bne.n	80054ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e07f      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d003      	beq.n	80054aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d107      	bne.n	80054ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054aa:	4b3f      	ldr	r3, [pc, #252]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e06f      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ba:	4b3b      	ldr	r3, [pc, #236]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e067      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ca:	4b37      	ldr	r3, [pc, #220]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f023 0203 	bic.w	r2, r3, #3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4934      	ldr	r1, [pc, #208]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054dc:	f7fe fa0c 	bl	80038f8 <HAL_GetTick>
 80054e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e2:	e00a      	b.n	80054fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e4:	f7fe fa08 	bl	80038f8 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e04f      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fa:	4b2b      	ldr	r3, [pc, #172]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 020c 	and.w	r2, r3, #12
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	429a      	cmp	r2, r3
 800550a:	d1eb      	bne.n	80054e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800550c:	4b25      	ldr	r3, [pc, #148]	@ (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d20c      	bcs.n	8005534 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551a:	4b22      	ldr	r3, [pc, #136]	@ (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005522:	4b20      	ldr	r3, [pc, #128]	@ (80055a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e032      	b.n	800559a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005540:	4b19      	ldr	r3, [pc, #100]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4916      	ldr	r1, [pc, #88]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	4313      	orrs	r3, r2
 8005550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800555e:	4b12      	ldr	r3, [pc, #72]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	490e      	ldr	r1, [pc, #56]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	4313      	orrs	r3, r2
 8005570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005572:	f000 f821 	bl	80055b8 <HAL_RCC_GetSysClockFreq>
 8005576:	4602      	mov	r2, r0
 8005578:	4b0b      	ldr	r3, [pc, #44]	@ (80055a8 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	490a      	ldr	r1, [pc, #40]	@ (80055ac <HAL_RCC_ClockConfig+0x1c0>)
 8005584:	5ccb      	ldrb	r3, [r1, r3]
 8005586:	fa22 f303 	lsr.w	r3, r2, r3
 800558a:	4a09      	ldr	r2, [pc, #36]	@ (80055b0 <HAL_RCC_ClockConfig+0x1c4>)
 800558c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800558e:	4b09      	ldr	r3, [pc, #36]	@ (80055b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe f96c 	bl	8003870 <HAL_InitTick>

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40023c00 	.word	0x40023c00
 80055a8:	40023800 	.word	0x40023800
 80055ac:	08009744 	.word	0x08009744
 80055b0:	20000000 	.word	0x20000000
 80055b4:	20000004 	.word	0x20000004

080055b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055bc:	b094      	sub	sp, #80	@ 0x50
 80055be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055d0:	4b79      	ldr	r3, [pc, #484]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 030c 	and.w	r3, r3, #12
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d00d      	beq.n	80055f8 <HAL_RCC_GetSysClockFreq+0x40>
 80055dc:	2b08      	cmp	r3, #8
 80055de:	f200 80e1 	bhi.w	80057a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <HAL_RCC_GetSysClockFreq+0x34>
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d003      	beq.n	80055f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80055ea:	e0db      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055ec:	4b73      	ldr	r3, [pc, #460]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x204>)
 80055ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055f0:	e0db      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055f2:	4b73      	ldr	r3, [pc, #460]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80055f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055f6:	e0d8      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055f8:	4b6f      	ldr	r3, [pc, #444]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005600:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005602:	4b6d      	ldr	r3, [pc, #436]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d063      	beq.n	80056d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800560e:	4b6a      	ldr	r3, [pc, #424]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	099b      	lsrs	r3, r3, #6
 8005614:	2200      	movs	r2, #0
 8005616:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005618:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800561a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005620:	633b      	str	r3, [r7, #48]	@ 0x30
 8005622:	2300      	movs	r3, #0
 8005624:	637b      	str	r3, [r7, #52]	@ 0x34
 8005626:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800562a:	4622      	mov	r2, r4
 800562c:	462b      	mov	r3, r5
 800562e:	f04f 0000 	mov.w	r0, #0
 8005632:	f04f 0100 	mov.w	r1, #0
 8005636:	0159      	lsls	r1, r3, #5
 8005638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800563c:	0150      	lsls	r0, r2, #5
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4621      	mov	r1, r4
 8005644:	1a51      	subs	r1, r2, r1
 8005646:	6139      	str	r1, [r7, #16]
 8005648:	4629      	mov	r1, r5
 800564a:	eb63 0301 	sbc.w	r3, r3, r1
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800565c:	4659      	mov	r1, fp
 800565e:	018b      	lsls	r3, r1, #6
 8005660:	4651      	mov	r1, sl
 8005662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005666:	4651      	mov	r1, sl
 8005668:	018a      	lsls	r2, r1, #6
 800566a:	4651      	mov	r1, sl
 800566c:	ebb2 0801 	subs.w	r8, r2, r1
 8005670:	4659      	mov	r1, fp
 8005672:	eb63 0901 	sbc.w	r9, r3, r1
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800568a:	4690      	mov	r8, r2
 800568c:	4699      	mov	r9, r3
 800568e:	4623      	mov	r3, r4
 8005690:	eb18 0303 	adds.w	r3, r8, r3
 8005694:	60bb      	str	r3, [r7, #8]
 8005696:	462b      	mov	r3, r5
 8005698:	eb49 0303 	adc.w	r3, r9, r3
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056aa:	4629      	mov	r1, r5
 80056ac:	024b      	lsls	r3, r1, #9
 80056ae:	4621      	mov	r1, r4
 80056b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056b4:	4621      	mov	r1, r4
 80056b6:	024a      	lsls	r2, r1, #9
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056be:	2200      	movs	r2, #0
 80056c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056c8:	f7fb fade 	bl	8000c88 <__aeabi_uldivmod>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4613      	mov	r3, r2
 80056d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d4:	e058      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d6:	4b38      	ldr	r3, [pc, #224]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	099b      	lsrs	r3, r3, #6
 80056dc:	2200      	movs	r2, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	4611      	mov	r1, r2
 80056e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056e6:	623b      	str	r3, [r7, #32]
 80056e8:	2300      	movs	r3, #0
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80056ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056f0:	4642      	mov	r2, r8
 80056f2:	464b      	mov	r3, r9
 80056f4:	f04f 0000 	mov.w	r0, #0
 80056f8:	f04f 0100 	mov.w	r1, #0
 80056fc:	0159      	lsls	r1, r3, #5
 80056fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005702:	0150      	lsls	r0, r2, #5
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4641      	mov	r1, r8
 800570a:	ebb2 0a01 	subs.w	sl, r2, r1
 800570e:	4649      	mov	r1, r9
 8005710:	eb63 0b01 	sbc.w	fp, r3, r1
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005720:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005724:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005728:	ebb2 040a 	subs.w	r4, r2, sl
 800572c:	eb63 050b 	sbc.w	r5, r3, fp
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	00eb      	lsls	r3, r5, #3
 800573a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800573e:	00e2      	lsls	r2, r4, #3
 8005740:	4614      	mov	r4, r2
 8005742:	461d      	mov	r5, r3
 8005744:	4643      	mov	r3, r8
 8005746:	18e3      	adds	r3, r4, r3
 8005748:	603b      	str	r3, [r7, #0]
 800574a:	464b      	mov	r3, r9
 800574c:	eb45 0303 	adc.w	r3, r5, r3
 8005750:	607b      	str	r3, [r7, #4]
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800575e:	4629      	mov	r1, r5
 8005760:	028b      	lsls	r3, r1, #10
 8005762:	4621      	mov	r1, r4
 8005764:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005768:	4621      	mov	r1, r4
 800576a:	028a      	lsls	r2, r1, #10
 800576c:	4610      	mov	r0, r2
 800576e:	4619      	mov	r1, r3
 8005770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005772:	2200      	movs	r2, #0
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	61fa      	str	r2, [r7, #28]
 8005778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800577c:	f7fb fa84 	bl	8000c88 <__aeabi_uldivmod>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4613      	mov	r3, r2
 8005786:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005788:	4b0b      	ldr	r3, [pc, #44]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	0c1b      	lsrs	r3, r3, #16
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	3301      	adds	r3, #1
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005798:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800579a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057a2:	e002      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057a4:	4b05      	ldr	r3, [pc, #20]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x204>)
 80057a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3750      	adds	r7, #80	@ 0x50
 80057b0:	46bd      	mov	sp, r7
 80057b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057b6:	bf00      	nop
 80057b8:	40023800 	.word	0x40023800
 80057bc:	00f42400 	.word	0x00f42400
 80057c0:	007a1200 	.word	0x007a1200

080057c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c8:	4b03      	ldr	r3, [pc, #12]	@ (80057d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ca:	681b      	ldr	r3, [r3, #0]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000000 	.word	0x20000000

080057dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057e0:	f7ff fff0 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 80057e4:	4602      	mov	r2, r0
 80057e6:	4b05      	ldr	r3, [pc, #20]	@ (80057fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	0a9b      	lsrs	r3, r3, #10
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	4903      	ldr	r1, [pc, #12]	@ (8005800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f2:	5ccb      	ldrb	r3, [r1, r3]
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40023800 	.word	0x40023800
 8005800:	08009754 	.word	0x08009754

08005804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005808:	f7ff ffdc 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 800580c:	4602      	mov	r2, r0
 800580e:	4b05      	ldr	r3, [pc, #20]	@ (8005824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	0b5b      	lsrs	r3, r3, #13
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	4903      	ldr	r1, [pc, #12]	@ (8005828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800581a:	5ccb      	ldrb	r3, [r1, r3]
 800581c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005820:	4618      	mov	r0, r3
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40023800 	.word	0x40023800
 8005828:	08009754 	.word	0x08009754

0800582c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e041      	b.n	80058c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fd fd26 	bl	80032a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3304      	adds	r3, #4
 8005868:	4619      	mov	r1, r3
 800586a:	4610      	mov	r0, r2
 800586c:	f000 fe52 	bl	8006514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e041      	b.n	8005960 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f839 	bl	8005968 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2202      	movs	r2, #2
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3304      	adds	r3, #4
 8005906:	4619      	mov	r1, r3
 8005908:	4610      	mov	r0, r2
 800590a:	f000 fe03 	bl	8006514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <HAL_TIM_PWM_Start+0x24>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e022      	b.n	80059e6 <HAL_TIM_PWM_Start+0x6a>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d109      	bne.n	80059ba <HAL_TIM_PWM_Start+0x3e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	bf14      	ite	ne
 80059b2:	2301      	movne	r3, #1
 80059b4:	2300      	moveq	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	e015      	b.n	80059e6 <HAL_TIM_PWM_Start+0x6a>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d109      	bne.n	80059d4 <HAL_TIM_PWM_Start+0x58>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	e008      	b.n	80059e6 <HAL_TIM_PWM_Start+0x6a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e07c      	b.n	8005ae8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Start+0x82>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059fc:	e013      	b.n	8005a26 <HAL_TIM_PWM_Start+0xaa>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_PWM_Start+0x92>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a0c:	e00b      	b.n	8005a26 <HAL_TIM_PWM_Start+0xaa>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d104      	bne.n	8005a1e <HAL_TIM_PWM_Start+0xa2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a1c:	e003      	b.n	8005a26 <HAL_TIM_PWM_Start+0xaa>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 f990 	bl	8006d54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2d      	ldr	r2, [pc, #180]	@ (8005af0 <HAL_TIM_PWM_Start+0x174>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_TIM_PWM_Start+0xcc>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a2c      	ldr	r2, [pc, #176]	@ (8005af4 <HAL_TIM_PWM_Start+0x178>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d101      	bne.n	8005a4c <HAL_TIM_PWM_Start+0xd0>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <HAL_TIM_PWM_Start+0xd2>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a22      	ldr	r2, [pc, #136]	@ (8005af0 <HAL_TIM_PWM_Start+0x174>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d022      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a74:	d01d      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8005af8 <HAL_TIM_PWM_Start+0x17c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d018      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1d      	ldr	r2, [pc, #116]	@ (8005afc <HAL_TIM_PWM_Start+0x180>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8005b00 <HAL_TIM_PWM_Start+0x184>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a16      	ldr	r2, [pc, #88]	@ (8005af4 <HAL_TIM_PWM_Start+0x178>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a18      	ldr	r2, [pc, #96]	@ (8005b04 <HAL_TIM_PWM_Start+0x188>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x136>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a16      	ldr	r2, [pc, #88]	@ (8005b08 <HAL_TIM_PWM_Start+0x18c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d111      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b06      	cmp	r3, #6
 8005ac2:	d010      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad4:	e007      	b.n	8005ae6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0201 	orr.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40010000 	.word	0x40010000
 8005af4:	40010400 	.word	0x40010400
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40000c00 	.word	0x40000c00
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40001800 	.word	0x40001800

08005b0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e041      	b.n	8005ba2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f839 	bl	8005baa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3304      	adds	r3, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f000 fce2 	bl	8006514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d104      	bne.n	8005bde <HAL_TIM_IC_Start_IT+0x1e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	e013      	b.n	8005c06 <HAL_TIM_IC_Start_IT+0x46>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d104      	bne.n	8005bee <HAL_TIM_IC_Start_IT+0x2e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	e00b      	b.n	8005c06 <HAL_TIM_IC_Start_IT+0x46>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d104      	bne.n	8005bfe <HAL_TIM_IC_Start_IT+0x3e>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	e003      	b.n	8005c06 <HAL_TIM_IC_Start_IT+0x46>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <HAL_TIM_IC_Start_IT+0x58>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	e013      	b.n	8005c40 <HAL_TIM_IC_Start_IT+0x80>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d104      	bne.n	8005c28 <HAL_TIM_IC_Start_IT+0x68>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	e00b      	b.n	8005c40 <HAL_TIM_IC_Start_IT+0x80>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d104      	bne.n	8005c38 <HAL_TIM_IC_Start_IT+0x78>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	e003      	b.n	8005c40 <HAL_TIM_IC_Start_IT+0x80>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c42:	7bbb      	ldrb	r3, [r7, #14]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d102      	bne.n	8005c4e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c48:	7b7b      	ldrb	r3, [r7, #13]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d001      	beq.n	8005c52 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e0cc      	b.n	8005dec <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_IC_Start_IT+0xa2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c60:	e013      	b.n	8005c8a <HAL_TIM_IC_Start_IT+0xca>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d104      	bne.n	8005c72 <HAL_TIM_IC_Start_IT+0xb2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c70:	e00b      	b.n	8005c8a <HAL_TIM_IC_Start_IT+0xca>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d104      	bne.n	8005c82 <HAL_TIM_IC_Start_IT+0xc2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c80:	e003      	b.n	8005c8a <HAL_TIM_IC_Start_IT+0xca>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <HAL_TIM_IC_Start_IT+0xda>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c98:	e013      	b.n	8005cc2 <HAL_TIM_IC_Start_IT+0x102>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d104      	bne.n	8005caa <HAL_TIM_IC_Start_IT+0xea>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ca8:	e00b      	b.n	8005cc2 <HAL_TIM_IC_Start_IT+0x102>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d104      	bne.n	8005cba <HAL_TIM_IC_Start_IT+0xfa>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cb8:	e003      	b.n	8005cc2 <HAL_TIM_IC_Start_IT+0x102>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b0c      	cmp	r3, #12
 8005cc6:	d841      	bhi.n	8005d4c <HAL_TIM_IC_Start_IT+0x18c>
 8005cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd0 <HAL_TIM_IC_Start_IT+0x110>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005d05 	.word	0x08005d05
 8005cd4:	08005d4d 	.word	0x08005d4d
 8005cd8:	08005d4d 	.word	0x08005d4d
 8005cdc:	08005d4d 	.word	0x08005d4d
 8005ce0:	08005d17 	.word	0x08005d17
 8005ce4:	08005d4d 	.word	0x08005d4d
 8005ce8:	08005d4d 	.word	0x08005d4d
 8005cec:	08005d4d 	.word	0x08005d4d
 8005cf0:	08005d29 	.word	0x08005d29
 8005cf4:	08005d4d 	.word	0x08005d4d
 8005cf8:	08005d4d 	.word	0x08005d4d
 8005cfc:	08005d4d 	.word	0x08005d4d
 8005d00:	08005d3b 	.word	0x08005d3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0202 	orr.w	r2, r2, #2
 8005d12:	60da      	str	r2, [r3, #12]
      break;
 8005d14:	e01d      	b.n	8005d52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0204 	orr.w	r2, r2, #4
 8005d24:	60da      	str	r2, [r3, #12]
      break;
 8005d26:	e014      	b.n	8005d52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0208 	orr.w	r2, r2, #8
 8005d36:	60da      	str	r2, [r3, #12]
      break;
 8005d38:	e00b      	b.n	8005d52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 0210 	orr.w	r2, r2, #16
 8005d48:	60da      	str	r2, [r3, #12]
      break;
 8005d4a:	e002      	b.n	8005d52 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d50:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d148      	bne.n	8005dea <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fff7 	bl	8006d54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a22      	ldr	r2, [pc, #136]	@ (8005df4 <HAL_TIM_IC_Start_IT+0x234>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d022      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d78:	d01d      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005df8 <HAL_TIM_IC_Start_IT+0x238>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d018      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1c      	ldr	r2, [pc, #112]	@ (8005dfc <HAL_TIM_IC_Start_IT+0x23c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1b      	ldr	r2, [pc, #108]	@ (8005e00 <HAL_TIM_IC_Start_IT+0x240>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00e      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a19      	ldr	r2, [pc, #100]	@ (8005e04 <HAL_TIM_IC_Start_IT+0x244>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d009      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a18      	ldr	r2, [pc, #96]	@ (8005e08 <HAL_TIM_IC_Start_IT+0x248>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d004      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a16      	ldr	r2, [pc, #88]	@ (8005e0c <HAL_TIM_IC_Start_IT+0x24c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d111      	bne.n	8005dda <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b06      	cmp	r3, #6
 8005dc6:	d010      	beq.n	8005dea <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd8:	e007      	b.n	8005dea <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0201 	orr.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800
 8005e00:	40000c00 	.word	0x40000c00
 8005e04:	40010400 	.word	0x40010400
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40001800 	.word	0x40001800

08005e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d020      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01b      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0202 	mvn.w	r2, #2
 8005e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fc fd18 	bl	8002890 <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fb38 	bl	80064d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fb3f 	bl	80064ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d020      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01b      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0204 	mvn.w	r2, #4
 8005e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fc fcf2 	bl	8002890 <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fb12 	bl	80064d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fb19 	bl	80064ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d020      	beq.n	8005f0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0208 	mvn.w	r2, #8
 8005edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fc fccc 	bl	8002890 <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 faec 	bl	80064d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 faf3 	bl	80064ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d020      	beq.n	8005f58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0210 	mvn.w	r2, #16
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fc fca6 	bl	8002890 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fac6 	bl	80064d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 facd 	bl	80064ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00c      	beq.n	8005f7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0201 	mvn.w	r2, #1
 8005f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 faa4 	bl	80064c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00c      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d007      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 ff86 	bl	8006eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00c      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fa9e 	bl	8006500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00c      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0220 	mvn.w	r2, #32
 8005fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 ff58 	bl	8006e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_TIM_IC_ConfigChannel+0x1e>
 800600a:	2302      	movs	r3, #2
 800600c:	e088      	b.n	8006120 <HAL_TIM_IC_ConfigChannel+0x130>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d11b      	bne.n	8006054 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800602c:	f000 fcce 	bl	80069cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 020c 	bic.w	r2, r2, #12
 800603e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6999      	ldr	r1, [r3, #24]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	619a      	str	r2, [r3, #24]
 8006052:	e060      	b.n	8006116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b04      	cmp	r3, #4
 8006058:	d11c      	bne.n	8006094 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800606a:	f000 fd52 	bl	8006b12 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699a      	ldr	r2, [r3, #24]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800607c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6999      	ldr	r1, [r3, #24]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	021a      	lsls	r2, r3, #8
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	619a      	str	r2, [r3, #24]
 8006092:	e040      	b.n	8006116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b08      	cmp	r3, #8
 8006098:	d11b      	bne.n	80060d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80060aa:	f000 fd9f 	bl	8006bec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 020c 	bic.w	r2, r2, #12
 80060bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69d9      	ldr	r1, [r3, #28]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	61da      	str	r2, [r3, #28]
 80060d0:	e021      	b.n	8006116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b0c      	cmp	r3, #12
 80060d6:	d11c      	bne.n	8006112 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80060e8:	f000 fdbc 	bl	8006c64 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69da      	ldr	r2, [r3, #28]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80060fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69d9      	ldr	r1, [r3, #28]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	021a      	lsls	r2, r3, #8
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	61da      	str	r2, [r3, #28]
 8006110:	e001      	b.n	8006116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800611e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006142:	2302      	movs	r3, #2
 8006144:	e0ae      	b.n	80062a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b0c      	cmp	r3, #12
 8006152:	f200 809f 	bhi.w	8006294 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006156:	a201      	add	r2, pc, #4	@ (adr r2, 800615c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	08006191 	.word	0x08006191
 8006160:	08006295 	.word	0x08006295
 8006164:	08006295 	.word	0x08006295
 8006168:	08006295 	.word	0x08006295
 800616c:	080061d1 	.word	0x080061d1
 8006170:	08006295 	.word	0x08006295
 8006174:	08006295 	.word	0x08006295
 8006178:	08006295 	.word	0x08006295
 800617c:	08006213 	.word	0x08006213
 8006180:	08006295 	.word	0x08006295
 8006184:	08006295 	.word	0x08006295
 8006188:	08006295 	.word	0x08006295
 800618c:	08006253 	.word	0x08006253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fa68 	bl	800666c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0208 	orr.w	r2, r2, #8
 80061aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0204 	bic.w	r2, r2, #4
 80061ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6999      	ldr	r1, [r3, #24]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	619a      	str	r2, [r3, #24]
      break;
 80061ce:	e064      	b.n	800629a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fab8 	bl	800674c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6999      	ldr	r1, [r3, #24]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	619a      	str	r2, [r3, #24]
      break;
 8006210:	e043      	b.n	800629a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fb0d 	bl	8006838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0208 	orr.w	r2, r2, #8
 800622c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0204 	bic.w	r2, r2, #4
 800623c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69d9      	ldr	r1, [r3, #28]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	61da      	str	r2, [r3, #28]
      break;
 8006250:	e023      	b.n	800629a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fb61 	bl	8006920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69da      	ldr	r2, [r3, #28]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800626c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800627c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69d9      	ldr	r1, [r3, #28]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	021a      	lsls	r2, r3, #8
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	61da      	str	r2, [r3, #28]
      break;
 8006292:	e002      	b.n	800629a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	75fb      	strb	r3, [r7, #23]
      break;
 8006298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_TIM_ConfigClockSource+0x1c>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e0b4      	b.n	8006432 <HAL_TIM_ConfigClockSource+0x186>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80062e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006300:	d03e      	beq.n	8006380 <HAL_TIM_ConfigClockSource+0xd4>
 8006302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006306:	f200 8087 	bhi.w	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 800630a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800630e:	f000 8086 	beq.w	800641e <HAL_TIM_ConfigClockSource+0x172>
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006316:	d87f      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006318:	2b70      	cmp	r3, #112	@ 0x70
 800631a:	d01a      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0xa6>
 800631c:	2b70      	cmp	r3, #112	@ 0x70
 800631e:	d87b      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006320:	2b60      	cmp	r3, #96	@ 0x60
 8006322:	d050      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x11a>
 8006324:	2b60      	cmp	r3, #96	@ 0x60
 8006326:	d877      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006328:	2b50      	cmp	r3, #80	@ 0x50
 800632a:	d03c      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0xfa>
 800632c:	2b50      	cmp	r3, #80	@ 0x50
 800632e:	d873      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006330:	2b40      	cmp	r3, #64	@ 0x40
 8006332:	d058      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x13a>
 8006334:	2b40      	cmp	r3, #64	@ 0x40
 8006336:	d86f      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006338:	2b30      	cmp	r3, #48	@ 0x30
 800633a:	d064      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x15a>
 800633c:	2b30      	cmp	r3, #48	@ 0x30
 800633e:	d86b      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006340:	2b20      	cmp	r3, #32
 8006342:	d060      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x15a>
 8006344:	2b20      	cmp	r3, #32
 8006346:	d867      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d05c      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x15a>
 800634c:	2b10      	cmp	r3, #16
 800634e:	d05a      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x15a>
 8006350:	e062      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006362:	f000 fcd7 	bl	8006d14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	609a      	str	r2, [r3, #8]
      break;
 800637e:	e04f      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006390:	f000 fcc0 	bl	8006d14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063a2:	609a      	str	r2, [r3, #8]
      break;
 80063a4:	e03c      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b2:	461a      	mov	r2, r3
 80063b4:	f000 fb7e 	bl	8006ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2150      	movs	r1, #80	@ 0x50
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fc8d 	bl	8006cde <TIM_ITRx_SetConfig>
      break;
 80063c4:	e02c      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063d2:	461a      	mov	r2, r3
 80063d4:	f000 fbda 	bl	8006b8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2160      	movs	r1, #96	@ 0x60
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fc7d 	bl	8006cde <TIM_ITRx_SetConfig>
      break;
 80063e4:	e01c      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f2:	461a      	mov	r2, r3
 80063f4:	f000 fb5e 	bl	8006ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2140      	movs	r1, #64	@ 0x40
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fc6d 	bl	8006cde <TIM_ITRx_SetConfig>
      break;
 8006404:	e00c      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f000 fc64 	bl	8006cde <TIM_ITRx_SetConfig>
      break;
 8006416:	e003      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	73fb      	strb	r3, [r7, #15]
      break;
 800641c:	e000      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800641e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006430:	7bfb      	ldrb	r3, [r7, #15]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b0c      	cmp	r3, #12
 800644e:	d831      	bhi.n	80064b4 <HAL_TIM_ReadCapturedValue+0x78>
 8006450:	a201      	add	r2, pc, #4	@ (adr r2, 8006458 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006456:	bf00      	nop
 8006458:	0800648d 	.word	0x0800648d
 800645c:	080064b5 	.word	0x080064b5
 8006460:	080064b5 	.word	0x080064b5
 8006464:	080064b5 	.word	0x080064b5
 8006468:	08006497 	.word	0x08006497
 800646c:	080064b5 	.word	0x080064b5
 8006470:	080064b5 	.word	0x080064b5
 8006474:	080064b5 	.word	0x080064b5
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064b5 	.word	0x080064b5
 8006480:	080064b5 	.word	0x080064b5
 8006484:	080064b5 	.word	0x080064b5
 8006488:	080064ab 	.word	0x080064ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006492:	60fb      	str	r3, [r7, #12]

      break;
 8006494:	e00f      	b.n	80064b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649c:	60fb      	str	r3, [r7, #12]

      break;
 800649e:	e00a      	b.n	80064b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a6:	60fb      	str	r3, [r7, #12]

      break;
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b0:	60fb      	str	r3, [r7, #12]

      break;
 80064b2:	e000      	b.n	80064b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80064b4:	bf00      	nop
  }

  return tmpreg;
 80064b6:	68fb      	ldr	r3, [r7, #12]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a46      	ldr	r2, [pc, #280]	@ (8006640 <TIM_Base_SetConfig+0x12c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d013      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006532:	d00f      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a43      	ldr	r2, [pc, #268]	@ (8006644 <TIM_Base_SetConfig+0x130>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00b      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a42      	ldr	r2, [pc, #264]	@ (8006648 <TIM_Base_SetConfig+0x134>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d007      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a41      	ldr	r2, [pc, #260]	@ (800664c <TIM_Base_SetConfig+0x138>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a40      	ldr	r2, [pc, #256]	@ (8006650 <TIM_Base_SetConfig+0x13c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d108      	bne.n	8006566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a35      	ldr	r2, [pc, #212]	@ (8006640 <TIM_Base_SetConfig+0x12c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d02b      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006574:	d027      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a32      	ldr	r2, [pc, #200]	@ (8006644 <TIM_Base_SetConfig+0x130>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d023      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a31      	ldr	r2, [pc, #196]	@ (8006648 <TIM_Base_SetConfig+0x134>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01f      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a30      	ldr	r2, [pc, #192]	@ (800664c <TIM_Base_SetConfig+0x138>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d01b      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2f      	ldr	r2, [pc, #188]	@ (8006650 <TIM_Base_SetConfig+0x13c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d017      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a2e      	ldr	r2, [pc, #184]	@ (8006654 <TIM_Base_SetConfig+0x140>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d013      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006658 <TIM_Base_SetConfig+0x144>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00f      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2c      	ldr	r2, [pc, #176]	@ (800665c <TIM_Base_SetConfig+0x148>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00b      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006660 <TIM_Base_SetConfig+0x14c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d007      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2a      	ldr	r2, [pc, #168]	@ (8006664 <TIM_Base_SetConfig+0x150>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d003      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a29      	ldr	r2, [pc, #164]	@ (8006668 <TIM_Base_SetConfig+0x154>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d108      	bne.n	80065d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a10      	ldr	r2, [pc, #64]	@ (8006640 <TIM_Base_SetConfig+0x12c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_Base_SetConfig+0xf8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a12      	ldr	r2, [pc, #72]	@ (8006650 <TIM_Base_SetConfig+0x13c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d103      	bne.n	8006614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b01      	cmp	r3, #1
 8006624:	d105      	bne.n	8006632 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f023 0201 	bic.w	r2, r3, #1
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	611a      	str	r2, [r3, #16]
  }
}
 8006632:	bf00      	nop
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40010000 	.word	0x40010000
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40000c00 	.word	0x40000c00
 8006650:	40010400 	.word	0x40010400
 8006654:	40014000 	.word	0x40014000
 8006658:	40014400 	.word	0x40014400
 800665c:	40014800 	.word	0x40014800
 8006660:	40001800 	.word	0x40001800
 8006664:	40001c00 	.word	0x40001c00
 8006668:	40002000 	.word	0x40002000

0800666c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f023 0201 	bic.w	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0303 	bic.w	r3, r3, #3
 80066a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f023 0302 	bic.w	r3, r3, #2
 80066b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a20      	ldr	r2, [pc, #128]	@ (8006744 <TIM_OC1_SetConfig+0xd8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_OC1_SetConfig+0x64>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006748 <TIM_OC1_SetConfig+0xdc>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10c      	bne.n	80066ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f023 0308 	bic.w	r3, r3, #8
 80066d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a15      	ldr	r2, [pc, #84]	@ (8006744 <TIM_OC1_SetConfig+0xd8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d003      	beq.n	80066fa <TIM_OC1_SetConfig+0x8e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a14      	ldr	r2, [pc, #80]	@ (8006748 <TIM_OC1_SetConfig+0xdc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d111      	bne.n	800671e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	621a      	str	r2, [r3, #32]
}
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	40010000 	.word	0x40010000
 8006748:	40010400 	.word	0x40010400

0800674c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	f023 0210 	bic.w	r2, r3, #16
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800677a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f023 0320 	bic.w	r3, r3, #32
 8006796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a22      	ldr	r2, [pc, #136]	@ (8006830 <TIM_OC2_SetConfig+0xe4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_OC2_SetConfig+0x68>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a21      	ldr	r2, [pc, #132]	@ (8006834 <TIM_OC2_SetConfig+0xe8>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d10d      	bne.n	80067d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a17      	ldr	r2, [pc, #92]	@ (8006830 <TIM_OC2_SetConfig+0xe4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_OC2_SetConfig+0x94>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a16      	ldr	r2, [pc, #88]	@ (8006834 <TIM_OC2_SetConfig+0xe8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d113      	bne.n	8006808 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	621a      	str	r2, [r3, #32]
}
 8006822:	bf00      	nop
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40010000 	.word	0x40010000
 8006834:	40010400 	.word	0x40010400

08006838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a21      	ldr	r2, [pc, #132]	@ (8006918 <TIM_OC3_SetConfig+0xe0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_OC3_SetConfig+0x66>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a20      	ldr	r2, [pc, #128]	@ (800691c <TIM_OC3_SetConfig+0xe4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d10d      	bne.n	80068ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a16      	ldr	r2, [pc, #88]	@ (8006918 <TIM_OC3_SetConfig+0xe0>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_OC3_SetConfig+0x92>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a15      	ldr	r2, [pc, #84]	@ (800691c <TIM_OC3_SetConfig+0xe4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d113      	bne.n	80068f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	011b      	lsls	r3, r3, #4
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	621a      	str	r2, [r3, #32]
}
 800690c:	bf00      	nop
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	40010000 	.word	0x40010000
 800691c:	40010400 	.word	0x40010400

08006920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800694e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800696a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	031b      	lsls	r3, r3, #12
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a12      	ldr	r2, [pc, #72]	@ (80069c4 <TIM_OC4_SetConfig+0xa4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d003      	beq.n	8006988 <TIM_OC4_SetConfig+0x68>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a11      	ldr	r2, [pc, #68]	@ (80069c8 <TIM_OC4_SetConfig+0xa8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d109      	bne.n	800699c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800698e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	019b      	lsls	r3, r3, #6
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40010400 	.word	0x40010400

080069cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	f023 0201 	bic.w	r2, r3, #1
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a28      	ldr	r2, [pc, #160]	@ (8006a98 <TIM_TI1_SetConfig+0xcc>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d01b      	beq.n	8006a32 <TIM_TI1_SetConfig+0x66>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a00:	d017      	beq.n	8006a32 <TIM_TI1_SetConfig+0x66>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4a25      	ldr	r2, [pc, #148]	@ (8006a9c <TIM_TI1_SetConfig+0xd0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d013      	beq.n	8006a32 <TIM_TI1_SetConfig+0x66>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4a24      	ldr	r2, [pc, #144]	@ (8006aa0 <TIM_TI1_SetConfig+0xd4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00f      	beq.n	8006a32 <TIM_TI1_SetConfig+0x66>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4a23      	ldr	r2, [pc, #140]	@ (8006aa4 <TIM_TI1_SetConfig+0xd8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00b      	beq.n	8006a32 <TIM_TI1_SetConfig+0x66>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4a22      	ldr	r2, [pc, #136]	@ (8006aa8 <TIM_TI1_SetConfig+0xdc>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d007      	beq.n	8006a32 <TIM_TI1_SetConfig+0x66>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4a21      	ldr	r2, [pc, #132]	@ (8006aac <TIM_TI1_SetConfig+0xe0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d003      	beq.n	8006a32 <TIM_TI1_SetConfig+0x66>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4a20      	ldr	r2, [pc, #128]	@ (8006ab0 <TIM_TI1_SetConfig+0xe4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d101      	bne.n	8006a36 <TIM_TI1_SetConfig+0x6a>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <TIM_TI1_SetConfig+0x6c>
 8006a36:	2300      	movs	r3, #0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d008      	beq.n	8006a4e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	e003      	b.n	8006a56 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f043 0301 	orr.w	r3, r3, #1
 8006a54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f023 030a 	bic.w	r3, r3, #10
 8006a70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f003 030a 	and.w	r3, r3, #10
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	621a      	str	r2, [r3, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	40010000 	.word	0x40010000
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40000800 	.word	0x40000800
 8006aa4:	40000c00 	.word	0x40000c00
 8006aa8:	40010400 	.word	0x40010400
 8006aac:	40014000 	.word	0x40014000
 8006ab0:	40001800 	.word	0x40001800

08006ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	f023 0201 	bic.w	r2, r3, #1
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f023 030a 	bic.w	r3, r3, #10
 8006af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	621a      	str	r2, [r3, #32]
}
 8006b06:	bf00      	nop
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b087      	sub	sp, #28
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	607a      	str	r2, [r7, #4]
 8006b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f023 0210 	bic.w	r2, r3, #16
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	021b      	lsls	r3, r3, #8
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	031b      	lsls	r3, r3, #12
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b64:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	011b      	lsls	r3, r3, #4
 8006b6a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	621a      	str	r2, [r3, #32]
}
 8006b80:	bf00      	nop
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f023 0210 	bic.w	r2, r3, #16
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	031b      	lsls	r3, r3, #12
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	621a      	str	r2, [r3, #32]
}
 8006be0:	bf00      	nop
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f023 0303 	bic.w	r3, r3, #3
 8006c18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	621a      	str	r2, [r3, #32]
}
 8006c58:	bf00      	nop
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c90:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ca2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	031b      	lsls	r3, r3, #12
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006cb6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	031b      	lsls	r3, r3, #12
 8006cbc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b085      	sub	sp, #20
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	f043 0307 	orr.w	r3, r3, #7
 8006d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	609a      	str	r2, [r3, #8]
}
 8006d08:	bf00      	nop
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	021a      	lsls	r2, r3, #8
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	431a      	orrs	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	609a      	str	r2, [r3, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	2201      	movs	r2, #1
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1a      	ldr	r2, [r3, #32]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	43db      	mvns	r3, r3
 8006d76:	401a      	ands	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a1a      	ldr	r2, [r3, #32]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	621a      	str	r2, [r3, #32]
}
 8006d92:	bf00      	nop
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e05a      	b.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a21      	ldr	r2, [pc, #132]	@ (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d022      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e04:	d01d      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d018      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1b      	ldr	r2, [pc, #108]	@ (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d013      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d00e      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a18      	ldr	r2, [pc, #96]	@ (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d009      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a17      	ldr	r2, [pc, #92]	@ (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d004      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a15      	ldr	r2, [pc, #84]	@ (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d10c      	bne.n	8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40010000 	.word	0x40010000
 8006e80:	40000400 	.word	0x40000400
 8006e84:	40000800 	.word	0x40000800
 8006e88:	40000c00 	.word	0x40000c00
 8006e8c:	40010400 	.word	0x40010400
 8006e90:	40014000 	.word	0x40014000
 8006e94:	40001800 	.word	0x40001800

08006e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e042      	b.n	8006f58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fc fb34 	bl	8003554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2224      	movs	r2, #36	@ 0x24
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f88b 	bl	8007020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	691a      	ldr	r2, [r3, #16]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	695a      	ldr	r2, [r3, #20]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	d112      	bne.n	8006fa0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <HAL_UART_Receive_IT+0x26>
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e00b      	b.n	8006fa2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f90:	88fb      	ldrh	r3, [r7, #6]
 8006f92:	461a      	mov	r2, r3
 8006f94:	68b9      	ldr	r1, [r7, #8]
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 f807 	bl	8006faa <UART_Start_Receive_IT>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	e000      	b.n	8006fa2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006fa0:	2302      	movs	r3, #2
  }
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	88fa      	ldrh	r2, [r7, #6]
 8006fc2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	88fa      	ldrh	r2, [r7, #6]
 8006fc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2222      	movs	r2, #34	@ 0x22
 8006fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695a      	ldr	r2, [r3, #20]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0220 	orr.w	r2, r2, #32
 800700e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
	...

08007020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007024:	b0c0      	sub	sp, #256	@ 0x100
 8007026:	af00      	add	r7, sp, #0
 8007028:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703c:	68d9      	ldr	r1, [r3, #12]
 800703e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	ea40 0301 	orr.w	r3, r0, r1
 8007048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800704a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	431a      	orrs	r2, r3
 8007058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	431a      	orrs	r2, r3
 8007060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800706c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007078:	f021 010c 	bic.w	r1, r1, #12
 800707c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007086:	430b      	orrs	r3, r1
 8007088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800708a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800709a:	6999      	ldr	r1, [r3, #24]
 800709c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	ea40 0301 	orr.w	r3, r0, r1
 80070a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4b8f      	ldr	r3, [pc, #572]	@ (80072ec <UART_SetConfig+0x2cc>)
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d005      	beq.n	80070c0 <UART_SetConfig+0xa0>
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b8d      	ldr	r3, [pc, #564]	@ (80072f0 <UART_SetConfig+0x2d0>)
 80070bc:	429a      	cmp	r2, r3
 80070be:	d104      	bne.n	80070ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070c0:	f7fe fba0 	bl	8005804 <HAL_RCC_GetPCLK2Freq>
 80070c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80070c8:	e003      	b.n	80070d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070ca:	f7fe fb87 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 80070ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070dc:	f040 810c 	bne.w	80072f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80070ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80070f2:	4622      	mov	r2, r4
 80070f4:	462b      	mov	r3, r5
 80070f6:	1891      	adds	r1, r2, r2
 80070f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80070fa:	415b      	adcs	r3, r3
 80070fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007102:	4621      	mov	r1, r4
 8007104:	eb12 0801 	adds.w	r8, r2, r1
 8007108:	4629      	mov	r1, r5
 800710a:	eb43 0901 	adc.w	r9, r3, r1
 800710e:	f04f 0200 	mov.w	r2, #0
 8007112:	f04f 0300 	mov.w	r3, #0
 8007116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800711a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800711e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007122:	4690      	mov	r8, r2
 8007124:	4699      	mov	r9, r3
 8007126:	4623      	mov	r3, r4
 8007128:	eb18 0303 	adds.w	r3, r8, r3
 800712c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007130:	462b      	mov	r3, r5
 8007132:	eb49 0303 	adc.w	r3, r9, r3
 8007136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800713a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007146:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800714a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800714e:	460b      	mov	r3, r1
 8007150:	18db      	adds	r3, r3, r3
 8007152:	653b      	str	r3, [r7, #80]	@ 0x50
 8007154:	4613      	mov	r3, r2
 8007156:	eb42 0303 	adc.w	r3, r2, r3
 800715a:	657b      	str	r3, [r7, #84]	@ 0x54
 800715c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007164:	f7f9 fd90 	bl	8000c88 <__aeabi_uldivmod>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4b61      	ldr	r3, [pc, #388]	@ (80072f4 <UART_SetConfig+0x2d4>)
 800716e:	fba3 2302 	umull	r2, r3, r3, r2
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	011c      	lsls	r4, r3, #4
 8007176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800717a:	2200      	movs	r2, #0
 800717c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007180:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007188:	4642      	mov	r2, r8
 800718a:	464b      	mov	r3, r9
 800718c:	1891      	adds	r1, r2, r2
 800718e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007190:	415b      	adcs	r3, r3
 8007192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007198:	4641      	mov	r1, r8
 800719a:	eb12 0a01 	adds.w	sl, r2, r1
 800719e:	4649      	mov	r1, r9
 80071a0:	eb43 0b01 	adc.w	fp, r3, r1
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f04f 0300 	mov.w	r3, #0
 80071ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071b8:	4692      	mov	sl, r2
 80071ba:	469b      	mov	fp, r3
 80071bc:	4643      	mov	r3, r8
 80071be:	eb1a 0303 	adds.w	r3, sl, r3
 80071c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071c6:	464b      	mov	r3, r9
 80071c8:	eb4b 0303 	adc.w	r3, fp, r3
 80071cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80071e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80071e4:	460b      	mov	r3, r1
 80071e6:	18db      	adds	r3, r3, r3
 80071e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ea:	4613      	mov	r3, r2
 80071ec:	eb42 0303 	adc.w	r3, r2, r3
 80071f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80071f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80071f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80071fa:	f7f9 fd45 	bl	8000c88 <__aeabi_uldivmod>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	4611      	mov	r1, r2
 8007204:	4b3b      	ldr	r3, [pc, #236]	@ (80072f4 <UART_SetConfig+0x2d4>)
 8007206:	fba3 2301 	umull	r2, r3, r3, r1
 800720a:	095b      	lsrs	r3, r3, #5
 800720c:	2264      	movs	r2, #100	@ 0x64
 800720e:	fb02 f303 	mul.w	r3, r2, r3
 8007212:	1acb      	subs	r3, r1, r3
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800721a:	4b36      	ldr	r3, [pc, #216]	@ (80072f4 <UART_SetConfig+0x2d4>)
 800721c:	fba3 2302 	umull	r2, r3, r3, r2
 8007220:	095b      	lsrs	r3, r3, #5
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007228:	441c      	add	r4, r3
 800722a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800722e:	2200      	movs	r2, #0
 8007230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007234:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800723c:	4642      	mov	r2, r8
 800723e:	464b      	mov	r3, r9
 8007240:	1891      	adds	r1, r2, r2
 8007242:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007244:	415b      	adcs	r3, r3
 8007246:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800724c:	4641      	mov	r1, r8
 800724e:	1851      	adds	r1, r2, r1
 8007250:	6339      	str	r1, [r7, #48]	@ 0x30
 8007252:	4649      	mov	r1, r9
 8007254:	414b      	adcs	r3, r1
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	f04f 0300 	mov.w	r3, #0
 8007260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007264:	4659      	mov	r1, fp
 8007266:	00cb      	lsls	r3, r1, #3
 8007268:	4651      	mov	r1, sl
 800726a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800726e:	4651      	mov	r1, sl
 8007270:	00ca      	lsls	r2, r1, #3
 8007272:	4610      	mov	r0, r2
 8007274:	4619      	mov	r1, r3
 8007276:	4603      	mov	r3, r0
 8007278:	4642      	mov	r2, r8
 800727a:	189b      	adds	r3, r3, r2
 800727c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007280:	464b      	mov	r3, r9
 8007282:	460a      	mov	r2, r1
 8007284:	eb42 0303 	adc.w	r3, r2, r3
 8007288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007298:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800729c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80072a0:	460b      	mov	r3, r1
 80072a2:	18db      	adds	r3, r3, r3
 80072a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072a6:	4613      	mov	r3, r2
 80072a8:	eb42 0303 	adc.w	r3, r2, r3
 80072ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80072b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80072b6:	f7f9 fce7 	bl	8000c88 <__aeabi_uldivmod>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4b0d      	ldr	r3, [pc, #52]	@ (80072f4 <UART_SetConfig+0x2d4>)
 80072c0:	fba3 1302 	umull	r1, r3, r3, r2
 80072c4:	095b      	lsrs	r3, r3, #5
 80072c6:	2164      	movs	r1, #100	@ 0x64
 80072c8:	fb01 f303 	mul.w	r3, r1, r3
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	3332      	adds	r3, #50	@ 0x32
 80072d2:	4a08      	ldr	r2, [pc, #32]	@ (80072f4 <UART_SetConfig+0x2d4>)
 80072d4:	fba2 2303 	umull	r2, r3, r2, r3
 80072d8:	095b      	lsrs	r3, r3, #5
 80072da:	f003 0207 	and.w	r2, r3, #7
 80072de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4422      	add	r2, r4
 80072e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072e8:	e106      	b.n	80074f8 <UART_SetConfig+0x4d8>
 80072ea:	bf00      	nop
 80072ec:	40011000 	.word	0x40011000
 80072f0:	40011400 	.word	0x40011400
 80072f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072fc:	2200      	movs	r2, #0
 80072fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007302:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800730a:	4642      	mov	r2, r8
 800730c:	464b      	mov	r3, r9
 800730e:	1891      	adds	r1, r2, r2
 8007310:	6239      	str	r1, [r7, #32]
 8007312:	415b      	adcs	r3, r3
 8007314:	627b      	str	r3, [r7, #36]	@ 0x24
 8007316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800731a:	4641      	mov	r1, r8
 800731c:	1854      	adds	r4, r2, r1
 800731e:	4649      	mov	r1, r9
 8007320:	eb43 0501 	adc.w	r5, r3, r1
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	00eb      	lsls	r3, r5, #3
 800732e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007332:	00e2      	lsls	r2, r4, #3
 8007334:	4614      	mov	r4, r2
 8007336:	461d      	mov	r5, r3
 8007338:	4643      	mov	r3, r8
 800733a:	18e3      	adds	r3, r4, r3
 800733c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007340:	464b      	mov	r3, r9
 8007342:	eb45 0303 	adc.w	r3, r5, r3
 8007346:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800734a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007356:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800735a:	f04f 0200 	mov.w	r2, #0
 800735e:	f04f 0300 	mov.w	r3, #0
 8007362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007366:	4629      	mov	r1, r5
 8007368:	008b      	lsls	r3, r1, #2
 800736a:	4621      	mov	r1, r4
 800736c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007370:	4621      	mov	r1, r4
 8007372:	008a      	lsls	r2, r1, #2
 8007374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007378:	f7f9 fc86 	bl	8000c88 <__aeabi_uldivmod>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4b60      	ldr	r3, [pc, #384]	@ (8007504 <UART_SetConfig+0x4e4>)
 8007382:	fba3 2302 	umull	r2, r3, r3, r2
 8007386:	095b      	lsrs	r3, r3, #5
 8007388:	011c      	lsls	r4, r3, #4
 800738a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800738e:	2200      	movs	r2, #0
 8007390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007394:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800739c:	4642      	mov	r2, r8
 800739e:	464b      	mov	r3, r9
 80073a0:	1891      	adds	r1, r2, r2
 80073a2:	61b9      	str	r1, [r7, #24]
 80073a4:	415b      	adcs	r3, r3
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073ac:	4641      	mov	r1, r8
 80073ae:	1851      	adds	r1, r2, r1
 80073b0:	6139      	str	r1, [r7, #16]
 80073b2:	4649      	mov	r1, r9
 80073b4:	414b      	adcs	r3, r1
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	f04f 0200 	mov.w	r2, #0
 80073bc:	f04f 0300 	mov.w	r3, #0
 80073c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073c4:	4659      	mov	r1, fp
 80073c6:	00cb      	lsls	r3, r1, #3
 80073c8:	4651      	mov	r1, sl
 80073ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ce:	4651      	mov	r1, sl
 80073d0:	00ca      	lsls	r2, r1, #3
 80073d2:	4610      	mov	r0, r2
 80073d4:	4619      	mov	r1, r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	4642      	mov	r2, r8
 80073da:	189b      	adds	r3, r3, r2
 80073dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073e0:	464b      	mov	r3, r9
 80073e2:	460a      	mov	r2, r1
 80073e4:	eb42 0303 	adc.w	r3, r2, r3
 80073e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80073f8:	f04f 0200 	mov.w	r2, #0
 80073fc:	f04f 0300 	mov.w	r3, #0
 8007400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007404:	4649      	mov	r1, r9
 8007406:	008b      	lsls	r3, r1, #2
 8007408:	4641      	mov	r1, r8
 800740a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800740e:	4641      	mov	r1, r8
 8007410:	008a      	lsls	r2, r1, #2
 8007412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007416:	f7f9 fc37 	bl	8000c88 <__aeabi_uldivmod>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4611      	mov	r1, r2
 8007420:	4b38      	ldr	r3, [pc, #224]	@ (8007504 <UART_SetConfig+0x4e4>)
 8007422:	fba3 2301 	umull	r2, r3, r3, r1
 8007426:	095b      	lsrs	r3, r3, #5
 8007428:	2264      	movs	r2, #100	@ 0x64
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	1acb      	subs	r3, r1, r3
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	3332      	adds	r3, #50	@ 0x32
 8007434:	4a33      	ldr	r2, [pc, #204]	@ (8007504 <UART_SetConfig+0x4e4>)
 8007436:	fba2 2303 	umull	r2, r3, r2, r3
 800743a:	095b      	lsrs	r3, r3, #5
 800743c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007440:	441c      	add	r4, r3
 8007442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007446:	2200      	movs	r2, #0
 8007448:	673b      	str	r3, [r7, #112]	@ 0x70
 800744a:	677a      	str	r2, [r7, #116]	@ 0x74
 800744c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007450:	4642      	mov	r2, r8
 8007452:	464b      	mov	r3, r9
 8007454:	1891      	adds	r1, r2, r2
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	415b      	adcs	r3, r3
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007460:	4641      	mov	r1, r8
 8007462:	1851      	adds	r1, r2, r1
 8007464:	6039      	str	r1, [r7, #0]
 8007466:	4649      	mov	r1, r9
 8007468:	414b      	adcs	r3, r1
 800746a:	607b      	str	r3, [r7, #4]
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007478:	4659      	mov	r1, fp
 800747a:	00cb      	lsls	r3, r1, #3
 800747c:	4651      	mov	r1, sl
 800747e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007482:	4651      	mov	r1, sl
 8007484:	00ca      	lsls	r2, r1, #3
 8007486:	4610      	mov	r0, r2
 8007488:	4619      	mov	r1, r3
 800748a:	4603      	mov	r3, r0
 800748c:	4642      	mov	r2, r8
 800748e:	189b      	adds	r3, r3, r2
 8007490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007492:	464b      	mov	r3, r9
 8007494:	460a      	mov	r2, r1
 8007496:	eb42 0303 	adc.w	r3, r2, r3
 800749a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800749c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80074a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	f04f 0300 	mov.w	r3, #0
 80074b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80074b4:	4649      	mov	r1, r9
 80074b6:	008b      	lsls	r3, r1, #2
 80074b8:	4641      	mov	r1, r8
 80074ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074be:	4641      	mov	r1, r8
 80074c0:	008a      	lsls	r2, r1, #2
 80074c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80074c6:	f7f9 fbdf 	bl	8000c88 <__aeabi_uldivmod>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007504 <UART_SetConfig+0x4e4>)
 80074d0:	fba3 1302 	umull	r1, r3, r3, r2
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	2164      	movs	r1, #100	@ 0x64
 80074d8:	fb01 f303 	mul.w	r3, r1, r3
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	3332      	adds	r3, #50	@ 0x32
 80074e2:	4a08      	ldr	r2, [pc, #32]	@ (8007504 <UART_SetConfig+0x4e4>)
 80074e4:	fba2 2303 	umull	r2, r3, r2, r3
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	f003 020f 	and.w	r2, r3, #15
 80074ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4422      	add	r2, r4
 80074f6:	609a      	str	r2, [r3, #8]
}
 80074f8:	bf00      	nop
 80074fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80074fe:	46bd      	mov	sp, r7
 8007500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007504:	51eb851f 	.word	0x51eb851f

08007508 <std>:
 8007508:	2300      	movs	r3, #0
 800750a:	b510      	push	{r4, lr}
 800750c:	4604      	mov	r4, r0
 800750e:	e9c0 3300 	strd	r3, r3, [r0]
 8007512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007516:	6083      	str	r3, [r0, #8]
 8007518:	8181      	strh	r1, [r0, #12]
 800751a:	6643      	str	r3, [r0, #100]	@ 0x64
 800751c:	81c2      	strh	r2, [r0, #14]
 800751e:	6183      	str	r3, [r0, #24]
 8007520:	4619      	mov	r1, r3
 8007522:	2208      	movs	r2, #8
 8007524:	305c      	adds	r0, #92	@ 0x5c
 8007526:	f000 f906 	bl	8007736 <memset>
 800752a:	4b0d      	ldr	r3, [pc, #52]	@ (8007560 <std+0x58>)
 800752c:	6263      	str	r3, [r4, #36]	@ 0x24
 800752e:	4b0d      	ldr	r3, [pc, #52]	@ (8007564 <std+0x5c>)
 8007530:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007532:	4b0d      	ldr	r3, [pc, #52]	@ (8007568 <std+0x60>)
 8007534:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007536:	4b0d      	ldr	r3, [pc, #52]	@ (800756c <std+0x64>)
 8007538:	6323      	str	r3, [r4, #48]	@ 0x30
 800753a:	4b0d      	ldr	r3, [pc, #52]	@ (8007570 <std+0x68>)
 800753c:	6224      	str	r4, [r4, #32]
 800753e:	429c      	cmp	r4, r3
 8007540:	d006      	beq.n	8007550 <std+0x48>
 8007542:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007546:	4294      	cmp	r4, r2
 8007548:	d002      	beq.n	8007550 <std+0x48>
 800754a:	33d0      	adds	r3, #208	@ 0xd0
 800754c:	429c      	cmp	r4, r3
 800754e:	d105      	bne.n	800755c <std+0x54>
 8007550:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007558:	f000 b966 	b.w	8007828 <__retarget_lock_init_recursive>
 800755c:	bd10      	pop	{r4, pc}
 800755e:	bf00      	nop
 8007560:	080076b1 	.word	0x080076b1
 8007564:	080076d3 	.word	0x080076d3
 8007568:	0800770b 	.word	0x0800770b
 800756c:	0800772f 	.word	0x0800772f
 8007570:	2000043c 	.word	0x2000043c

08007574 <stdio_exit_handler>:
 8007574:	4a02      	ldr	r2, [pc, #8]	@ (8007580 <stdio_exit_handler+0xc>)
 8007576:	4903      	ldr	r1, [pc, #12]	@ (8007584 <stdio_exit_handler+0x10>)
 8007578:	4803      	ldr	r0, [pc, #12]	@ (8007588 <stdio_exit_handler+0x14>)
 800757a:	f000 b869 	b.w	8007650 <_fwalk_sglue>
 800757e:	bf00      	nop
 8007580:	2000000c 	.word	0x2000000c
 8007584:	080080c9 	.word	0x080080c9
 8007588:	2000001c 	.word	0x2000001c

0800758c <cleanup_stdio>:
 800758c:	6841      	ldr	r1, [r0, #4]
 800758e:	4b0c      	ldr	r3, [pc, #48]	@ (80075c0 <cleanup_stdio+0x34>)
 8007590:	4299      	cmp	r1, r3
 8007592:	b510      	push	{r4, lr}
 8007594:	4604      	mov	r4, r0
 8007596:	d001      	beq.n	800759c <cleanup_stdio+0x10>
 8007598:	f000 fd96 	bl	80080c8 <_fflush_r>
 800759c:	68a1      	ldr	r1, [r4, #8]
 800759e:	4b09      	ldr	r3, [pc, #36]	@ (80075c4 <cleanup_stdio+0x38>)
 80075a0:	4299      	cmp	r1, r3
 80075a2:	d002      	beq.n	80075aa <cleanup_stdio+0x1e>
 80075a4:	4620      	mov	r0, r4
 80075a6:	f000 fd8f 	bl	80080c8 <_fflush_r>
 80075aa:	68e1      	ldr	r1, [r4, #12]
 80075ac:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <cleanup_stdio+0x3c>)
 80075ae:	4299      	cmp	r1, r3
 80075b0:	d004      	beq.n	80075bc <cleanup_stdio+0x30>
 80075b2:	4620      	mov	r0, r4
 80075b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b8:	f000 bd86 	b.w	80080c8 <_fflush_r>
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	bf00      	nop
 80075c0:	2000043c 	.word	0x2000043c
 80075c4:	200004a4 	.word	0x200004a4
 80075c8:	2000050c 	.word	0x2000050c

080075cc <global_stdio_init.part.0>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	4b0b      	ldr	r3, [pc, #44]	@ (80075fc <global_stdio_init.part.0+0x30>)
 80075d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007600 <global_stdio_init.part.0+0x34>)
 80075d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007604 <global_stdio_init.part.0+0x38>)
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	4620      	mov	r0, r4
 80075d8:	2200      	movs	r2, #0
 80075da:	2104      	movs	r1, #4
 80075dc:	f7ff ff94 	bl	8007508 <std>
 80075e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075e4:	2201      	movs	r2, #1
 80075e6:	2109      	movs	r1, #9
 80075e8:	f7ff ff8e 	bl	8007508 <std>
 80075ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075f0:	2202      	movs	r2, #2
 80075f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f6:	2112      	movs	r1, #18
 80075f8:	f7ff bf86 	b.w	8007508 <std>
 80075fc:	20000574 	.word	0x20000574
 8007600:	2000043c 	.word	0x2000043c
 8007604:	08007575 	.word	0x08007575

08007608 <__sfp_lock_acquire>:
 8007608:	4801      	ldr	r0, [pc, #4]	@ (8007610 <__sfp_lock_acquire+0x8>)
 800760a:	f000 b90e 	b.w	800782a <__retarget_lock_acquire_recursive>
 800760e:	bf00      	nop
 8007610:	2000057d 	.word	0x2000057d

08007614 <__sfp_lock_release>:
 8007614:	4801      	ldr	r0, [pc, #4]	@ (800761c <__sfp_lock_release+0x8>)
 8007616:	f000 b909 	b.w	800782c <__retarget_lock_release_recursive>
 800761a:	bf00      	nop
 800761c:	2000057d 	.word	0x2000057d

08007620 <__sinit>:
 8007620:	b510      	push	{r4, lr}
 8007622:	4604      	mov	r4, r0
 8007624:	f7ff fff0 	bl	8007608 <__sfp_lock_acquire>
 8007628:	6a23      	ldr	r3, [r4, #32]
 800762a:	b11b      	cbz	r3, 8007634 <__sinit+0x14>
 800762c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007630:	f7ff bff0 	b.w	8007614 <__sfp_lock_release>
 8007634:	4b04      	ldr	r3, [pc, #16]	@ (8007648 <__sinit+0x28>)
 8007636:	6223      	str	r3, [r4, #32]
 8007638:	4b04      	ldr	r3, [pc, #16]	@ (800764c <__sinit+0x2c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1f5      	bne.n	800762c <__sinit+0xc>
 8007640:	f7ff ffc4 	bl	80075cc <global_stdio_init.part.0>
 8007644:	e7f2      	b.n	800762c <__sinit+0xc>
 8007646:	bf00      	nop
 8007648:	0800758d 	.word	0x0800758d
 800764c:	20000574 	.word	0x20000574

08007650 <_fwalk_sglue>:
 8007650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007654:	4607      	mov	r7, r0
 8007656:	4688      	mov	r8, r1
 8007658:	4614      	mov	r4, r2
 800765a:	2600      	movs	r6, #0
 800765c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007660:	f1b9 0901 	subs.w	r9, r9, #1
 8007664:	d505      	bpl.n	8007672 <_fwalk_sglue+0x22>
 8007666:	6824      	ldr	r4, [r4, #0]
 8007668:	2c00      	cmp	r4, #0
 800766a:	d1f7      	bne.n	800765c <_fwalk_sglue+0xc>
 800766c:	4630      	mov	r0, r6
 800766e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007672:	89ab      	ldrh	r3, [r5, #12]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d907      	bls.n	8007688 <_fwalk_sglue+0x38>
 8007678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800767c:	3301      	adds	r3, #1
 800767e:	d003      	beq.n	8007688 <_fwalk_sglue+0x38>
 8007680:	4629      	mov	r1, r5
 8007682:	4638      	mov	r0, r7
 8007684:	47c0      	blx	r8
 8007686:	4306      	orrs	r6, r0
 8007688:	3568      	adds	r5, #104	@ 0x68
 800768a:	e7e9      	b.n	8007660 <_fwalk_sglue+0x10>

0800768c <iprintf>:
 800768c:	b40f      	push	{r0, r1, r2, r3}
 800768e:	b507      	push	{r0, r1, r2, lr}
 8007690:	4906      	ldr	r1, [pc, #24]	@ (80076ac <iprintf+0x20>)
 8007692:	ab04      	add	r3, sp, #16
 8007694:	6808      	ldr	r0, [r1, #0]
 8007696:	f853 2b04 	ldr.w	r2, [r3], #4
 800769a:	6881      	ldr	r1, [r0, #8]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	f000 f9e9 	bl	8007a74 <_vfiprintf_r>
 80076a2:	b003      	add	sp, #12
 80076a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a8:	b004      	add	sp, #16
 80076aa:	4770      	bx	lr
 80076ac:	20000018 	.word	0x20000018

080076b0 <__sread>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	460c      	mov	r4, r1
 80076b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b8:	f000 f868 	bl	800778c <_read_r>
 80076bc:	2800      	cmp	r0, #0
 80076be:	bfab      	itete	ge
 80076c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076c2:	89a3      	ldrhlt	r3, [r4, #12]
 80076c4:	181b      	addge	r3, r3, r0
 80076c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076ca:	bfac      	ite	ge
 80076cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076ce:	81a3      	strhlt	r3, [r4, #12]
 80076d0:	bd10      	pop	{r4, pc}

080076d2 <__swrite>:
 80076d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d6:	461f      	mov	r7, r3
 80076d8:	898b      	ldrh	r3, [r1, #12]
 80076da:	05db      	lsls	r3, r3, #23
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	4616      	mov	r6, r2
 80076e2:	d505      	bpl.n	80076f0 <__swrite+0x1e>
 80076e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e8:	2302      	movs	r3, #2
 80076ea:	2200      	movs	r2, #0
 80076ec:	f000 f83c 	bl	8007768 <_lseek_r>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076fa:	81a3      	strh	r3, [r4, #12]
 80076fc:	4632      	mov	r2, r6
 80076fe:	463b      	mov	r3, r7
 8007700:	4628      	mov	r0, r5
 8007702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007706:	f000 b853 	b.w	80077b0 <_write_r>

0800770a <__sseek>:
 800770a:	b510      	push	{r4, lr}
 800770c:	460c      	mov	r4, r1
 800770e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007712:	f000 f829 	bl	8007768 <_lseek_r>
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	bf15      	itete	ne
 800771c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800771e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007726:	81a3      	strheq	r3, [r4, #12]
 8007728:	bf18      	it	ne
 800772a:	81a3      	strhne	r3, [r4, #12]
 800772c:	bd10      	pop	{r4, pc}

0800772e <__sclose>:
 800772e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007732:	f000 b809 	b.w	8007748 <_close_r>

08007736 <memset>:
 8007736:	4402      	add	r2, r0
 8007738:	4603      	mov	r3, r0
 800773a:	4293      	cmp	r3, r2
 800773c:	d100      	bne.n	8007740 <memset+0xa>
 800773e:	4770      	bx	lr
 8007740:	f803 1b01 	strb.w	r1, [r3], #1
 8007744:	e7f9      	b.n	800773a <memset+0x4>
	...

08007748 <_close_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4d06      	ldr	r5, [pc, #24]	@ (8007764 <_close_r+0x1c>)
 800774c:	2300      	movs	r3, #0
 800774e:	4604      	mov	r4, r0
 8007750:	4608      	mov	r0, r1
 8007752:	602b      	str	r3, [r5, #0]
 8007754:	f7fb ffc3 	bl	80036de <_close>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	d102      	bne.n	8007762 <_close_r+0x1a>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	b103      	cbz	r3, 8007762 <_close_r+0x1a>
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	bd38      	pop	{r3, r4, r5, pc}
 8007764:	20000578 	.word	0x20000578

08007768 <_lseek_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4d07      	ldr	r5, [pc, #28]	@ (8007788 <_lseek_r+0x20>)
 800776c:	4604      	mov	r4, r0
 800776e:	4608      	mov	r0, r1
 8007770:	4611      	mov	r1, r2
 8007772:	2200      	movs	r2, #0
 8007774:	602a      	str	r2, [r5, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	f7fb ffd8 	bl	800372c <_lseek>
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	d102      	bne.n	8007786 <_lseek_r+0x1e>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	b103      	cbz	r3, 8007786 <_lseek_r+0x1e>
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	20000578 	.word	0x20000578

0800778c <_read_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4d07      	ldr	r5, [pc, #28]	@ (80077ac <_read_r+0x20>)
 8007790:	4604      	mov	r4, r0
 8007792:	4608      	mov	r0, r1
 8007794:	4611      	mov	r1, r2
 8007796:	2200      	movs	r2, #0
 8007798:	602a      	str	r2, [r5, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	f7fb ff66 	bl	800366c <_read>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d102      	bne.n	80077aa <_read_r+0x1e>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	b103      	cbz	r3, 80077aa <_read_r+0x1e>
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	bd38      	pop	{r3, r4, r5, pc}
 80077ac:	20000578 	.word	0x20000578

080077b0 <_write_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4d07      	ldr	r5, [pc, #28]	@ (80077d0 <_write_r+0x20>)
 80077b4:	4604      	mov	r4, r0
 80077b6:	4608      	mov	r0, r1
 80077b8:	4611      	mov	r1, r2
 80077ba:	2200      	movs	r2, #0
 80077bc:	602a      	str	r2, [r5, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	f7fb ff71 	bl	80036a6 <_write>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_write_r+0x1e>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_write_r+0x1e>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	20000578 	.word	0x20000578

080077d4 <__errno>:
 80077d4:	4b01      	ldr	r3, [pc, #4]	@ (80077dc <__errno+0x8>)
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	20000018 	.word	0x20000018

080077e0 <__libc_init_array>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4d0d      	ldr	r5, [pc, #52]	@ (8007818 <__libc_init_array+0x38>)
 80077e4:	4c0d      	ldr	r4, [pc, #52]	@ (800781c <__libc_init_array+0x3c>)
 80077e6:	1b64      	subs	r4, r4, r5
 80077e8:	10a4      	asrs	r4, r4, #2
 80077ea:	2600      	movs	r6, #0
 80077ec:	42a6      	cmp	r6, r4
 80077ee:	d109      	bne.n	8007804 <__libc_init_array+0x24>
 80077f0:	4d0b      	ldr	r5, [pc, #44]	@ (8007820 <__libc_init_array+0x40>)
 80077f2:	4c0c      	ldr	r4, [pc, #48]	@ (8007824 <__libc_init_array+0x44>)
 80077f4:	f001 ff78 	bl	80096e8 <_init>
 80077f8:	1b64      	subs	r4, r4, r5
 80077fa:	10a4      	asrs	r4, r4, #2
 80077fc:	2600      	movs	r6, #0
 80077fe:	42a6      	cmp	r6, r4
 8007800:	d105      	bne.n	800780e <__libc_init_array+0x2e>
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	f855 3b04 	ldr.w	r3, [r5], #4
 8007808:	4798      	blx	r3
 800780a:	3601      	adds	r6, #1
 800780c:	e7ee      	b.n	80077ec <__libc_init_array+0xc>
 800780e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007812:	4798      	blx	r3
 8007814:	3601      	adds	r6, #1
 8007816:	e7f2      	b.n	80077fe <__libc_init_array+0x1e>
 8007818:	08009838 	.word	0x08009838
 800781c:	08009838 	.word	0x08009838
 8007820:	08009838 	.word	0x08009838
 8007824:	0800983c 	.word	0x0800983c

08007828 <__retarget_lock_init_recursive>:
 8007828:	4770      	bx	lr

0800782a <__retarget_lock_acquire_recursive>:
 800782a:	4770      	bx	lr

0800782c <__retarget_lock_release_recursive>:
 800782c:	4770      	bx	lr
	...

08007830 <_free_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4605      	mov	r5, r0
 8007834:	2900      	cmp	r1, #0
 8007836:	d041      	beq.n	80078bc <_free_r+0x8c>
 8007838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800783c:	1f0c      	subs	r4, r1, #4
 800783e:	2b00      	cmp	r3, #0
 8007840:	bfb8      	it	lt
 8007842:	18e4      	addlt	r4, r4, r3
 8007844:	f000 f8e0 	bl	8007a08 <__malloc_lock>
 8007848:	4a1d      	ldr	r2, [pc, #116]	@ (80078c0 <_free_r+0x90>)
 800784a:	6813      	ldr	r3, [r2, #0]
 800784c:	b933      	cbnz	r3, 800785c <_free_r+0x2c>
 800784e:	6063      	str	r3, [r4, #4]
 8007850:	6014      	str	r4, [r2, #0]
 8007852:	4628      	mov	r0, r5
 8007854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007858:	f000 b8dc 	b.w	8007a14 <__malloc_unlock>
 800785c:	42a3      	cmp	r3, r4
 800785e:	d908      	bls.n	8007872 <_free_r+0x42>
 8007860:	6820      	ldr	r0, [r4, #0]
 8007862:	1821      	adds	r1, r4, r0
 8007864:	428b      	cmp	r3, r1
 8007866:	bf01      	itttt	eq
 8007868:	6819      	ldreq	r1, [r3, #0]
 800786a:	685b      	ldreq	r3, [r3, #4]
 800786c:	1809      	addeq	r1, r1, r0
 800786e:	6021      	streq	r1, [r4, #0]
 8007870:	e7ed      	b.n	800784e <_free_r+0x1e>
 8007872:	461a      	mov	r2, r3
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	b10b      	cbz	r3, 800787c <_free_r+0x4c>
 8007878:	42a3      	cmp	r3, r4
 800787a:	d9fa      	bls.n	8007872 <_free_r+0x42>
 800787c:	6811      	ldr	r1, [r2, #0]
 800787e:	1850      	adds	r0, r2, r1
 8007880:	42a0      	cmp	r0, r4
 8007882:	d10b      	bne.n	800789c <_free_r+0x6c>
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	4401      	add	r1, r0
 8007888:	1850      	adds	r0, r2, r1
 800788a:	4283      	cmp	r3, r0
 800788c:	6011      	str	r1, [r2, #0]
 800788e:	d1e0      	bne.n	8007852 <_free_r+0x22>
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	6053      	str	r3, [r2, #4]
 8007896:	4408      	add	r0, r1
 8007898:	6010      	str	r0, [r2, #0]
 800789a:	e7da      	b.n	8007852 <_free_r+0x22>
 800789c:	d902      	bls.n	80078a4 <_free_r+0x74>
 800789e:	230c      	movs	r3, #12
 80078a0:	602b      	str	r3, [r5, #0]
 80078a2:	e7d6      	b.n	8007852 <_free_r+0x22>
 80078a4:	6820      	ldr	r0, [r4, #0]
 80078a6:	1821      	adds	r1, r4, r0
 80078a8:	428b      	cmp	r3, r1
 80078aa:	bf04      	itt	eq
 80078ac:	6819      	ldreq	r1, [r3, #0]
 80078ae:	685b      	ldreq	r3, [r3, #4]
 80078b0:	6063      	str	r3, [r4, #4]
 80078b2:	bf04      	itt	eq
 80078b4:	1809      	addeq	r1, r1, r0
 80078b6:	6021      	streq	r1, [r4, #0]
 80078b8:	6054      	str	r4, [r2, #4]
 80078ba:	e7ca      	b.n	8007852 <_free_r+0x22>
 80078bc:	bd38      	pop	{r3, r4, r5, pc}
 80078be:	bf00      	nop
 80078c0:	20000584 	.word	0x20000584

080078c4 <sbrk_aligned>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007904 <sbrk_aligned+0x40>)
 80078c8:	460c      	mov	r4, r1
 80078ca:	6831      	ldr	r1, [r6, #0]
 80078cc:	4605      	mov	r5, r0
 80078ce:	b911      	cbnz	r1, 80078d6 <sbrk_aligned+0x12>
 80078d0:	f000 fcb6 	bl	8008240 <_sbrk_r>
 80078d4:	6030      	str	r0, [r6, #0]
 80078d6:	4621      	mov	r1, r4
 80078d8:	4628      	mov	r0, r5
 80078da:	f000 fcb1 	bl	8008240 <_sbrk_r>
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	d103      	bne.n	80078ea <sbrk_aligned+0x26>
 80078e2:	f04f 34ff 	mov.w	r4, #4294967295
 80078e6:	4620      	mov	r0, r4
 80078e8:	bd70      	pop	{r4, r5, r6, pc}
 80078ea:	1cc4      	adds	r4, r0, #3
 80078ec:	f024 0403 	bic.w	r4, r4, #3
 80078f0:	42a0      	cmp	r0, r4
 80078f2:	d0f8      	beq.n	80078e6 <sbrk_aligned+0x22>
 80078f4:	1a21      	subs	r1, r4, r0
 80078f6:	4628      	mov	r0, r5
 80078f8:	f000 fca2 	bl	8008240 <_sbrk_r>
 80078fc:	3001      	adds	r0, #1
 80078fe:	d1f2      	bne.n	80078e6 <sbrk_aligned+0x22>
 8007900:	e7ef      	b.n	80078e2 <sbrk_aligned+0x1e>
 8007902:	bf00      	nop
 8007904:	20000580 	.word	0x20000580

08007908 <_malloc_r>:
 8007908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800790c:	1ccd      	adds	r5, r1, #3
 800790e:	f025 0503 	bic.w	r5, r5, #3
 8007912:	3508      	adds	r5, #8
 8007914:	2d0c      	cmp	r5, #12
 8007916:	bf38      	it	cc
 8007918:	250c      	movcc	r5, #12
 800791a:	2d00      	cmp	r5, #0
 800791c:	4606      	mov	r6, r0
 800791e:	db01      	blt.n	8007924 <_malloc_r+0x1c>
 8007920:	42a9      	cmp	r1, r5
 8007922:	d904      	bls.n	800792e <_malloc_r+0x26>
 8007924:	230c      	movs	r3, #12
 8007926:	6033      	str	r3, [r6, #0]
 8007928:	2000      	movs	r0, #0
 800792a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800792e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a04 <_malloc_r+0xfc>
 8007932:	f000 f869 	bl	8007a08 <__malloc_lock>
 8007936:	f8d8 3000 	ldr.w	r3, [r8]
 800793a:	461c      	mov	r4, r3
 800793c:	bb44      	cbnz	r4, 8007990 <_malloc_r+0x88>
 800793e:	4629      	mov	r1, r5
 8007940:	4630      	mov	r0, r6
 8007942:	f7ff ffbf 	bl	80078c4 <sbrk_aligned>
 8007946:	1c43      	adds	r3, r0, #1
 8007948:	4604      	mov	r4, r0
 800794a:	d158      	bne.n	80079fe <_malloc_r+0xf6>
 800794c:	f8d8 4000 	ldr.w	r4, [r8]
 8007950:	4627      	mov	r7, r4
 8007952:	2f00      	cmp	r7, #0
 8007954:	d143      	bne.n	80079de <_malloc_r+0xd6>
 8007956:	2c00      	cmp	r4, #0
 8007958:	d04b      	beq.n	80079f2 <_malloc_r+0xea>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	4639      	mov	r1, r7
 800795e:	4630      	mov	r0, r6
 8007960:	eb04 0903 	add.w	r9, r4, r3
 8007964:	f000 fc6c 	bl	8008240 <_sbrk_r>
 8007968:	4581      	cmp	r9, r0
 800796a:	d142      	bne.n	80079f2 <_malloc_r+0xea>
 800796c:	6821      	ldr	r1, [r4, #0]
 800796e:	1a6d      	subs	r5, r5, r1
 8007970:	4629      	mov	r1, r5
 8007972:	4630      	mov	r0, r6
 8007974:	f7ff ffa6 	bl	80078c4 <sbrk_aligned>
 8007978:	3001      	adds	r0, #1
 800797a:	d03a      	beq.n	80079f2 <_malloc_r+0xea>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	442b      	add	r3, r5
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	f8d8 3000 	ldr.w	r3, [r8]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	bb62      	cbnz	r2, 80079e4 <_malloc_r+0xdc>
 800798a:	f8c8 7000 	str.w	r7, [r8]
 800798e:	e00f      	b.n	80079b0 <_malloc_r+0xa8>
 8007990:	6822      	ldr	r2, [r4, #0]
 8007992:	1b52      	subs	r2, r2, r5
 8007994:	d420      	bmi.n	80079d8 <_malloc_r+0xd0>
 8007996:	2a0b      	cmp	r2, #11
 8007998:	d917      	bls.n	80079ca <_malloc_r+0xc2>
 800799a:	1961      	adds	r1, r4, r5
 800799c:	42a3      	cmp	r3, r4
 800799e:	6025      	str	r5, [r4, #0]
 80079a0:	bf18      	it	ne
 80079a2:	6059      	strne	r1, [r3, #4]
 80079a4:	6863      	ldr	r3, [r4, #4]
 80079a6:	bf08      	it	eq
 80079a8:	f8c8 1000 	streq.w	r1, [r8]
 80079ac:	5162      	str	r2, [r4, r5]
 80079ae:	604b      	str	r3, [r1, #4]
 80079b0:	4630      	mov	r0, r6
 80079b2:	f000 f82f 	bl	8007a14 <__malloc_unlock>
 80079b6:	f104 000b 	add.w	r0, r4, #11
 80079ba:	1d23      	adds	r3, r4, #4
 80079bc:	f020 0007 	bic.w	r0, r0, #7
 80079c0:	1ac2      	subs	r2, r0, r3
 80079c2:	bf1c      	itt	ne
 80079c4:	1a1b      	subne	r3, r3, r0
 80079c6:	50a3      	strne	r3, [r4, r2]
 80079c8:	e7af      	b.n	800792a <_malloc_r+0x22>
 80079ca:	6862      	ldr	r2, [r4, #4]
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	bf0c      	ite	eq
 80079d0:	f8c8 2000 	streq.w	r2, [r8]
 80079d4:	605a      	strne	r2, [r3, #4]
 80079d6:	e7eb      	b.n	80079b0 <_malloc_r+0xa8>
 80079d8:	4623      	mov	r3, r4
 80079da:	6864      	ldr	r4, [r4, #4]
 80079dc:	e7ae      	b.n	800793c <_malloc_r+0x34>
 80079de:	463c      	mov	r4, r7
 80079e0:	687f      	ldr	r7, [r7, #4]
 80079e2:	e7b6      	b.n	8007952 <_malloc_r+0x4a>
 80079e4:	461a      	mov	r2, r3
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	d1fb      	bne.n	80079e4 <_malloc_r+0xdc>
 80079ec:	2300      	movs	r3, #0
 80079ee:	6053      	str	r3, [r2, #4]
 80079f0:	e7de      	b.n	80079b0 <_malloc_r+0xa8>
 80079f2:	230c      	movs	r3, #12
 80079f4:	6033      	str	r3, [r6, #0]
 80079f6:	4630      	mov	r0, r6
 80079f8:	f000 f80c 	bl	8007a14 <__malloc_unlock>
 80079fc:	e794      	b.n	8007928 <_malloc_r+0x20>
 80079fe:	6005      	str	r5, [r0, #0]
 8007a00:	e7d6      	b.n	80079b0 <_malloc_r+0xa8>
 8007a02:	bf00      	nop
 8007a04:	20000584 	.word	0x20000584

08007a08 <__malloc_lock>:
 8007a08:	4801      	ldr	r0, [pc, #4]	@ (8007a10 <__malloc_lock+0x8>)
 8007a0a:	f7ff bf0e 	b.w	800782a <__retarget_lock_acquire_recursive>
 8007a0e:	bf00      	nop
 8007a10:	2000057c 	.word	0x2000057c

08007a14 <__malloc_unlock>:
 8007a14:	4801      	ldr	r0, [pc, #4]	@ (8007a1c <__malloc_unlock+0x8>)
 8007a16:	f7ff bf09 	b.w	800782c <__retarget_lock_release_recursive>
 8007a1a:	bf00      	nop
 8007a1c:	2000057c 	.word	0x2000057c

08007a20 <__sfputc_r>:
 8007a20:	6893      	ldr	r3, [r2, #8]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	b410      	push	{r4}
 8007a28:	6093      	str	r3, [r2, #8]
 8007a2a:	da08      	bge.n	8007a3e <__sfputc_r+0x1e>
 8007a2c:	6994      	ldr	r4, [r2, #24]
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	db01      	blt.n	8007a36 <__sfputc_r+0x16>
 8007a32:	290a      	cmp	r1, #10
 8007a34:	d103      	bne.n	8007a3e <__sfputc_r+0x1e>
 8007a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a3a:	f000 bb6d 	b.w	8008118 <__swbuf_r>
 8007a3e:	6813      	ldr	r3, [r2, #0]
 8007a40:	1c58      	adds	r0, r3, #1
 8007a42:	6010      	str	r0, [r2, #0]
 8007a44:	7019      	strb	r1, [r3, #0]
 8007a46:	4608      	mov	r0, r1
 8007a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <__sfputs_r>:
 8007a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a50:	4606      	mov	r6, r0
 8007a52:	460f      	mov	r7, r1
 8007a54:	4614      	mov	r4, r2
 8007a56:	18d5      	adds	r5, r2, r3
 8007a58:	42ac      	cmp	r4, r5
 8007a5a:	d101      	bne.n	8007a60 <__sfputs_r+0x12>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e007      	b.n	8007a70 <__sfputs_r+0x22>
 8007a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a64:	463a      	mov	r2, r7
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff ffda 	bl	8007a20 <__sfputc_r>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d1f3      	bne.n	8007a58 <__sfputs_r+0xa>
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a74 <_vfiprintf_r>:
 8007a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	460d      	mov	r5, r1
 8007a7a:	b09d      	sub	sp, #116	@ 0x74
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	4698      	mov	r8, r3
 8007a80:	4606      	mov	r6, r0
 8007a82:	b118      	cbz	r0, 8007a8c <_vfiprintf_r+0x18>
 8007a84:	6a03      	ldr	r3, [r0, #32]
 8007a86:	b90b      	cbnz	r3, 8007a8c <_vfiprintf_r+0x18>
 8007a88:	f7ff fdca 	bl	8007620 <__sinit>
 8007a8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a8e:	07d9      	lsls	r1, r3, #31
 8007a90:	d405      	bmi.n	8007a9e <_vfiprintf_r+0x2a>
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	059a      	lsls	r2, r3, #22
 8007a96:	d402      	bmi.n	8007a9e <_vfiprintf_r+0x2a>
 8007a98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a9a:	f7ff fec6 	bl	800782a <__retarget_lock_acquire_recursive>
 8007a9e:	89ab      	ldrh	r3, [r5, #12]
 8007aa0:	071b      	lsls	r3, r3, #28
 8007aa2:	d501      	bpl.n	8007aa8 <_vfiprintf_r+0x34>
 8007aa4:	692b      	ldr	r3, [r5, #16]
 8007aa6:	b99b      	cbnz	r3, 8007ad0 <_vfiprintf_r+0x5c>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f000 fb72 	bl	8008194 <__swsetup_r>
 8007ab0:	b170      	cbz	r0, 8007ad0 <_vfiprintf_r+0x5c>
 8007ab2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ab4:	07dc      	lsls	r4, r3, #31
 8007ab6:	d504      	bpl.n	8007ac2 <_vfiprintf_r+0x4e>
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8007abc:	b01d      	add	sp, #116	@ 0x74
 8007abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac2:	89ab      	ldrh	r3, [r5, #12]
 8007ac4:	0598      	lsls	r0, r3, #22
 8007ac6:	d4f7      	bmi.n	8007ab8 <_vfiprintf_r+0x44>
 8007ac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007aca:	f7ff feaf 	bl	800782c <__retarget_lock_release_recursive>
 8007ace:	e7f3      	b.n	8007ab8 <_vfiprintf_r+0x44>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ad4:	2320      	movs	r3, #32
 8007ad6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ade:	2330      	movs	r3, #48	@ 0x30
 8007ae0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c90 <_vfiprintf_r+0x21c>
 8007ae4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ae8:	f04f 0901 	mov.w	r9, #1
 8007aec:	4623      	mov	r3, r4
 8007aee:	469a      	mov	sl, r3
 8007af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007af4:	b10a      	cbz	r2, 8007afa <_vfiprintf_r+0x86>
 8007af6:	2a25      	cmp	r2, #37	@ 0x25
 8007af8:	d1f9      	bne.n	8007aee <_vfiprintf_r+0x7a>
 8007afa:	ebba 0b04 	subs.w	fp, sl, r4
 8007afe:	d00b      	beq.n	8007b18 <_vfiprintf_r+0xa4>
 8007b00:	465b      	mov	r3, fp
 8007b02:	4622      	mov	r2, r4
 8007b04:	4629      	mov	r1, r5
 8007b06:	4630      	mov	r0, r6
 8007b08:	f7ff ffa1 	bl	8007a4e <__sfputs_r>
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	f000 80a7 	beq.w	8007c60 <_vfiprintf_r+0x1ec>
 8007b12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b14:	445a      	add	r2, fp
 8007b16:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b18:	f89a 3000 	ldrb.w	r3, [sl]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 809f 	beq.w	8007c60 <_vfiprintf_r+0x1ec>
 8007b22:	2300      	movs	r3, #0
 8007b24:	f04f 32ff 	mov.w	r2, #4294967295
 8007b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b2c:	f10a 0a01 	add.w	sl, sl, #1
 8007b30:	9304      	str	r3, [sp, #16]
 8007b32:	9307      	str	r3, [sp, #28]
 8007b34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b38:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b3a:	4654      	mov	r4, sl
 8007b3c:	2205      	movs	r2, #5
 8007b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b42:	4853      	ldr	r0, [pc, #332]	@ (8007c90 <_vfiprintf_r+0x21c>)
 8007b44:	f7f8 fb44 	bl	80001d0 <memchr>
 8007b48:	9a04      	ldr	r2, [sp, #16]
 8007b4a:	b9d8      	cbnz	r0, 8007b84 <_vfiprintf_r+0x110>
 8007b4c:	06d1      	lsls	r1, r2, #27
 8007b4e:	bf44      	itt	mi
 8007b50:	2320      	movmi	r3, #32
 8007b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b56:	0713      	lsls	r3, r2, #28
 8007b58:	bf44      	itt	mi
 8007b5a:	232b      	movmi	r3, #43	@ 0x2b
 8007b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b60:	f89a 3000 	ldrb.w	r3, [sl]
 8007b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b66:	d015      	beq.n	8007b94 <_vfiprintf_r+0x120>
 8007b68:	9a07      	ldr	r2, [sp, #28]
 8007b6a:	4654      	mov	r4, sl
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	f04f 0c0a 	mov.w	ip, #10
 8007b72:	4621      	mov	r1, r4
 8007b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b78:	3b30      	subs	r3, #48	@ 0x30
 8007b7a:	2b09      	cmp	r3, #9
 8007b7c:	d94b      	bls.n	8007c16 <_vfiprintf_r+0x1a2>
 8007b7e:	b1b0      	cbz	r0, 8007bae <_vfiprintf_r+0x13a>
 8007b80:	9207      	str	r2, [sp, #28]
 8007b82:	e014      	b.n	8007bae <_vfiprintf_r+0x13a>
 8007b84:	eba0 0308 	sub.w	r3, r0, r8
 8007b88:	fa09 f303 	lsl.w	r3, r9, r3
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	9304      	str	r3, [sp, #16]
 8007b90:	46a2      	mov	sl, r4
 8007b92:	e7d2      	b.n	8007b3a <_vfiprintf_r+0xc6>
 8007b94:	9b03      	ldr	r3, [sp, #12]
 8007b96:	1d19      	adds	r1, r3, #4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	9103      	str	r1, [sp, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	bfbb      	ittet	lt
 8007ba0:	425b      	neglt	r3, r3
 8007ba2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ba6:	9307      	strge	r3, [sp, #28]
 8007ba8:	9307      	strlt	r3, [sp, #28]
 8007baa:	bfb8      	it	lt
 8007bac:	9204      	strlt	r2, [sp, #16]
 8007bae:	7823      	ldrb	r3, [r4, #0]
 8007bb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bb2:	d10a      	bne.n	8007bca <_vfiprintf_r+0x156>
 8007bb4:	7863      	ldrb	r3, [r4, #1]
 8007bb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bb8:	d132      	bne.n	8007c20 <_vfiprintf_r+0x1ac>
 8007bba:	9b03      	ldr	r3, [sp, #12]
 8007bbc:	1d1a      	adds	r2, r3, #4
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	9203      	str	r2, [sp, #12]
 8007bc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bc6:	3402      	adds	r4, #2
 8007bc8:	9305      	str	r3, [sp, #20]
 8007bca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ca0 <_vfiprintf_r+0x22c>
 8007bce:	7821      	ldrb	r1, [r4, #0]
 8007bd0:	2203      	movs	r2, #3
 8007bd2:	4650      	mov	r0, sl
 8007bd4:	f7f8 fafc 	bl	80001d0 <memchr>
 8007bd8:	b138      	cbz	r0, 8007bea <_vfiprintf_r+0x176>
 8007bda:	9b04      	ldr	r3, [sp, #16]
 8007bdc:	eba0 000a 	sub.w	r0, r0, sl
 8007be0:	2240      	movs	r2, #64	@ 0x40
 8007be2:	4082      	lsls	r2, r0
 8007be4:	4313      	orrs	r3, r2
 8007be6:	3401      	adds	r4, #1
 8007be8:	9304      	str	r3, [sp, #16]
 8007bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bee:	4829      	ldr	r0, [pc, #164]	@ (8007c94 <_vfiprintf_r+0x220>)
 8007bf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bf4:	2206      	movs	r2, #6
 8007bf6:	f7f8 faeb 	bl	80001d0 <memchr>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d03f      	beq.n	8007c7e <_vfiprintf_r+0x20a>
 8007bfe:	4b26      	ldr	r3, [pc, #152]	@ (8007c98 <_vfiprintf_r+0x224>)
 8007c00:	bb1b      	cbnz	r3, 8007c4a <_vfiprintf_r+0x1d6>
 8007c02:	9b03      	ldr	r3, [sp, #12]
 8007c04:	3307      	adds	r3, #7
 8007c06:	f023 0307 	bic.w	r3, r3, #7
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	9303      	str	r3, [sp, #12]
 8007c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c10:	443b      	add	r3, r7
 8007c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c14:	e76a      	b.n	8007aec <_vfiprintf_r+0x78>
 8007c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	2001      	movs	r0, #1
 8007c1e:	e7a8      	b.n	8007b72 <_vfiprintf_r+0xfe>
 8007c20:	2300      	movs	r3, #0
 8007c22:	3401      	adds	r4, #1
 8007c24:	9305      	str	r3, [sp, #20]
 8007c26:	4619      	mov	r1, r3
 8007c28:	f04f 0c0a 	mov.w	ip, #10
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c32:	3a30      	subs	r2, #48	@ 0x30
 8007c34:	2a09      	cmp	r2, #9
 8007c36:	d903      	bls.n	8007c40 <_vfiprintf_r+0x1cc>
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0c6      	beq.n	8007bca <_vfiprintf_r+0x156>
 8007c3c:	9105      	str	r1, [sp, #20]
 8007c3e:	e7c4      	b.n	8007bca <_vfiprintf_r+0x156>
 8007c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c44:	4604      	mov	r4, r0
 8007c46:	2301      	movs	r3, #1
 8007c48:	e7f0      	b.n	8007c2c <_vfiprintf_r+0x1b8>
 8007c4a:	ab03      	add	r3, sp, #12
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	462a      	mov	r2, r5
 8007c50:	4b12      	ldr	r3, [pc, #72]	@ (8007c9c <_vfiprintf_r+0x228>)
 8007c52:	a904      	add	r1, sp, #16
 8007c54:	4630      	mov	r0, r6
 8007c56:	f3af 8000 	nop.w
 8007c5a:	4607      	mov	r7, r0
 8007c5c:	1c78      	adds	r0, r7, #1
 8007c5e:	d1d6      	bne.n	8007c0e <_vfiprintf_r+0x19a>
 8007c60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c62:	07d9      	lsls	r1, r3, #31
 8007c64:	d405      	bmi.n	8007c72 <_vfiprintf_r+0x1fe>
 8007c66:	89ab      	ldrh	r3, [r5, #12]
 8007c68:	059a      	lsls	r2, r3, #22
 8007c6a:	d402      	bmi.n	8007c72 <_vfiprintf_r+0x1fe>
 8007c6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c6e:	f7ff fddd 	bl	800782c <__retarget_lock_release_recursive>
 8007c72:	89ab      	ldrh	r3, [r5, #12]
 8007c74:	065b      	lsls	r3, r3, #25
 8007c76:	f53f af1f 	bmi.w	8007ab8 <_vfiprintf_r+0x44>
 8007c7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c7c:	e71e      	b.n	8007abc <_vfiprintf_r+0x48>
 8007c7e:	ab03      	add	r3, sp, #12
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	462a      	mov	r2, r5
 8007c84:	4b05      	ldr	r3, [pc, #20]	@ (8007c9c <_vfiprintf_r+0x228>)
 8007c86:	a904      	add	r1, sp, #16
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f000 f879 	bl	8007d80 <_printf_i>
 8007c8e:	e7e4      	b.n	8007c5a <_vfiprintf_r+0x1e6>
 8007c90:	0800975c 	.word	0x0800975c
 8007c94:	08009766 	.word	0x08009766
 8007c98:	00000000 	.word	0x00000000
 8007c9c:	08007a4f 	.word	0x08007a4f
 8007ca0:	08009762 	.word	0x08009762

08007ca4 <_printf_common>:
 8007ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca8:	4616      	mov	r6, r2
 8007caa:	4698      	mov	r8, r3
 8007cac:	688a      	ldr	r2, [r1, #8]
 8007cae:	690b      	ldr	r3, [r1, #16]
 8007cb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	bfb8      	it	lt
 8007cb8:	4613      	movlt	r3, r2
 8007cba:	6033      	str	r3, [r6, #0]
 8007cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	b10a      	cbz	r2, 8007cca <_printf_common+0x26>
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	0699      	lsls	r1, r3, #26
 8007cce:	bf42      	ittt	mi
 8007cd0:	6833      	ldrmi	r3, [r6, #0]
 8007cd2:	3302      	addmi	r3, #2
 8007cd4:	6033      	strmi	r3, [r6, #0]
 8007cd6:	6825      	ldr	r5, [r4, #0]
 8007cd8:	f015 0506 	ands.w	r5, r5, #6
 8007cdc:	d106      	bne.n	8007cec <_printf_common+0x48>
 8007cde:	f104 0a19 	add.w	sl, r4, #25
 8007ce2:	68e3      	ldr	r3, [r4, #12]
 8007ce4:	6832      	ldr	r2, [r6, #0]
 8007ce6:	1a9b      	subs	r3, r3, r2
 8007ce8:	42ab      	cmp	r3, r5
 8007cea:	dc26      	bgt.n	8007d3a <_printf_common+0x96>
 8007cec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cf0:	6822      	ldr	r2, [r4, #0]
 8007cf2:	3b00      	subs	r3, #0
 8007cf4:	bf18      	it	ne
 8007cf6:	2301      	movne	r3, #1
 8007cf8:	0692      	lsls	r2, r2, #26
 8007cfa:	d42b      	bmi.n	8007d54 <_printf_common+0xb0>
 8007cfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d00:	4641      	mov	r1, r8
 8007d02:	4638      	mov	r0, r7
 8007d04:	47c8      	blx	r9
 8007d06:	3001      	adds	r0, #1
 8007d08:	d01e      	beq.n	8007d48 <_printf_common+0xa4>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	6922      	ldr	r2, [r4, #16]
 8007d0e:	f003 0306 	and.w	r3, r3, #6
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	bf02      	ittt	eq
 8007d16:	68e5      	ldreq	r5, [r4, #12]
 8007d18:	6833      	ldreq	r3, [r6, #0]
 8007d1a:	1aed      	subeq	r5, r5, r3
 8007d1c:	68a3      	ldr	r3, [r4, #8]
 8007d1e:	bf0c      	ite	eq
 8007d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d24:	2500      	movne	r5, #0
 8007d26:	4293      	cmp	r3, r2
 8007d28:	bfc4      	itt	gt
 8007d2a:	1a9b      	subgt	r3, r3, r2
 8007d2c:	18ed      	addgt	r5, r5, r3
 8007d2e:	2600      	movs	r6, #0
 8007d30:	341a      	adds	r4, #26
 8007d32:	42b5      	cmp	r5, r6
 8007d34:	d11a      	bne.n	8007d6c <_printf_common+0xc8>
 8007d36:	2000      	movs	r0, #0
 8007d38:	e008      	b.n	8007d4c <_printf_common+0xa8>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4652      	mov	r2, sl
 8007d3e:	4641      	mov	r1, r8
 8007d40:	4638      	mov	r0, r7
 8007d42:	47c8      	blx	r9
 8007d44:	3001      	adds	r0, #1
 8007d46:	d103      	bne.n	8007d50 <_printf_common+0xac>
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d50:	3501      	adds	r5, #1
 8007d52:	e7c6      	b.n	8007ce2 <_printf_common+0x3e>
 8007d54:	18e1      	adds	r1, r4, r3
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	2030      	movs	r0, #48	@ 0x30
 8007d5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d5e:	4422      	add	r2, r4
 8007d60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d68:	3302      	adds	r3, #2
 8007d6a:	e7c7      	b.n	8007cfc <_printf_common+0x58>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	4622      	mov	r2, r4
 8007d70:	4641      	mov	r1, r8
 8007d72:	4638      	mov	r0, r7
 8007d74:	47c8      	blx	r9
 8007d76:	3001      	adds	r0, #1
 8007d78:	d0e6      	beq.n	8007d48 <_printf_common+0xa4>
 8007d7a:	3601      	adds	r6, #1
 8007d7c:	e7d9      	b.n	8007d32 <_printf_common+0x8e>
	...

08007d80 <_printf_i>:
 8007d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	7e0f      	ldrb	r7, [r1, #24]
 8007d86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d88:	2f78      	cmp	r7, #120	@ 0x78
 8007d8a:	4691      	mov	r9, r2
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	469a      	mov	sl, r3
 8007d92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d96:	d807      	bhi.n	8007da8 <_printf_i+0x28>
 8007d98:	2f62      	cmp	r7, #98	@ 0x62
 8007d9a:	d80a      	bhi.n	8007db2 <_printf_i+0x32>
 8007d9c:	2f00      	cmp	r7, #0
 8007d9e:	f000 80d2 	beq.w	8007f46 <_printf_i+0x1c6>
 8007da2:	2f58      	cmp	r7, #88	@ 0x58
 8007da4:	f000 80b9 	beq.w	8007f1a <_printf_i+0x19a>
 8007da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007db0:	e03a      	b.n	8007e28 <_printf_i+0xa8>
 8007db2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007db6:	2b15      	cmp	r3, #21
 8007db8:	d8f6      	bhi.n	8007da8 <_printf_i+0x28>
 8007dba:	a101      	add	r1, pc, #4	@ (adr r1, 8007dc0 <_printf_i+0x40>)
 8007dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dc0:	08007e19 	.word	0x08007e19
 8007dc4:	08007e2d 	.word	0x08007e2d
 8007dc8:	08007da9 	.word	0x08007da9
 8007dcc:	08007da9 	.word	0x08007da9
 8007dd0:	08007da9 	.word	0x08007da9
 8007dd4:	08007da9 	.word	0x08007da9
 8007dd8:	08007e2d 	.word	0x08007e2d
 8007ddc:	08007da9 	.word	0x08007da9
 8007de0:	08007da9 	.word	0x08007da9
 8007de4:	08007da9 	.word	0x08007da9
 8007de8:	08007da9 	.word	0x08007da9
 8007dec:	08007f2d 	.word	0x08007f2d
 8007df0:	08007e57 	.word	0x08007e57
 8007df4:	08007ee7 	.word	0x08007ee7
 8007df8:	08007da9 	.word	0x08007da9
 8007dfc:	08007da9 	.word	0x08007da9
 8007e00:	08007f4f 	.word	0x08007f4f
 8007e04:	08007da9 	.word	0x08007da9
 8007e08:	08007e57 	.word	0x08007e57
 8007e0c:	08007da9 	.word	0x08007da9
 8007e10:	08007da9 	.word	0x08007da9
 8007e14:	08007eef 	.word	0x08007eef
 8007e18:	6833      	ldr	r3, [r6, #0]
 8007e1a:	1d1a      	adds	r2, r3, #4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6032      	str	r2, [r6, #0]
 8007e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e09d      	b.n	8007f68 <_printf_i+0x1e8>
 8007e2c:	6833      	ldr	r3, [r6, #0]
 8007e2e:	6820      	ldr	r0, [r4, #0]
 8007e30:	1d19      	adds	r1, r3, #4
 8007e32:	6031      	str	r1, [r6, #0]
 8007e34:	0606      	lsls	r6, r0, #24
 8007e36:	d501      	bpl.n	8007e3c <_printf_i+0xbc>
 8007e38:	681d      	ldr	r5, [r3, #0]
 8007e3a:	e003      	b.n	8007e44 <_printf_i+0xc4>
 8007e3c:	0645      	lsls	r5, r0, #25
 8007e3e:	d5fb      	bpl.n	8007e38 <_printf_i+0xb8>
 8007e40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e44:	2d00      	cmp	r5, #0
 8007e46:	da03      	bge.n	8007e50 <_printf_i+0xd0>
 8007e48:	232d      	movs	r3, #45	@ 0x2d
 8007e4a:	426d      	negs	r5, r5
 8007e4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e50:	4859      	ldr	r0, [pc, #356]	@ (8007fb8 <_printf_i+0x238>)
 8007e52:	230a      	movs	r3, #10
 8007e54:	e011      	b.n	8007e7a <_printf_i+0xfa>
 8007e56:	6821      	ldr	r1, [r4, #0]
 8007e58:	6833      	ldr	r3, [r6, #0]
 8007e5a:	0608      	lsls	r0, r1, #24
 8007e5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e60:	d402      	bmi.n	8007e68 <_printf_i+0xe8>
 8007e62:	0649      	lsls	r1, r1, #25
 8007e64:	bf48      	it	mi
 8007e66:	b2ad      	uxthmi	r5, r5
 8007e68:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e6a:	4853      	ldr	r0, [pc, #332]	@ (8007fb8 <_printf_i+0x238>)
 8007e6c:	6033      	str	r3, [r6, #0]
 8007e6e:	bf14      	ite	ne
 8007e70:	230a      	movne	r3, #10
 8007e72:	2308      	moveq	r3, #8
 8007e74:	2100      	movs	r1, #0
 8007e76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e7a:	6866      	ldr	r6, [r4, #4]
 8007e7c:	60a6      	str	r6, [r4, #8]
 8007e7e:	2e00      	cmp	r6, #0
 8007e80:	bfa2      	ittt	ge
 8007e82:	6821      	ldrge	r1, [r4, #0]
 8007e84:	f021 0104 	bicge.w	r1, r1, #4
 8007e88:	6021      	strge	r1, [r4, #0]
 8007e8a:	b90d      	cbnz	r5, 8007e90 <_printf_i+0x110>
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	d04b      	beq.n	8007f28 <_printf_i+0x1a8>
 8007e90:	4616      	mov	r6, r2
 8007e92:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e96:	fb03 5711 	mls	r7, r3, r1, r5
 8007e9a:	5dc7      	ldrb	r7, [r0, r7]
 8007e9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ea0:	462f      	mov	r7, r5
 8007ea2:	42bb      	cmp	r3, r7
 8007ea4:	460d      	mov	r5, r1
 8007ea6:	d9f4      	bls.n	8007e92 <_printf_i+0x112>
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d10b      	bne.n	8007ec4 <_printf_i+0x144>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	07df      	lsls	r7, r3, #31
 8007eb0:	d508      	bpl.n	8007ec4 <_printf_i+0x144>
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	6861      	ldr	r1, [r4, #4]
 8007eb6:	4299      	cmp	r1, r3
 8007eb8:	bfde      	ittt	le
 8007eba:	2330      	movle	r3, #48	@ 0x30
 8007ebc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ec0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ec4:	1b92      	subs	r2, r2, r6
 8007ec6:	6122      	str	r2, [r4, #16]
 8007ec8:	f8cd a000 	str.w	sl, [sp]
 8007ecc:	464b      	mov	r3, r9
 8007ece:	aa03      	add	r2, sp, #12
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	f7ff fee6 	bl	8007ca4 <_printf_common>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d14a      	bne.n	8007f72 <_printf_i+0x1f2>
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	b004      	add	sp, #16
 8007ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	f043 0320 	orr.w	r3, r3, #32
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	4833      	ldr	r0, [pc, #204]	@ (8007fbc <_printf_i+0x23c>)
 8007ef0:	2778      	movs	r7, #120	@ 0x78
 8007ef2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	6831      	ldr	r1, [r6, #0]
 8007efa:	061f      	lsls	r7, r3, #24
 8007efc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f00:	d402      	bmi.n	8007f08 <_printf_i+0x188>
 8007f02:	065f      	lsls	r7, r3, #25
 8007f04:	bf48      	it	mi
 8007f06:	b2ad      	uxthmi	r5, r5
 8007f08:	6031      	str	r1, [r6, #0]
 8007f0a:	07d9      	lsls	r1, r3, #31
 8007f0c:	bf44      	itt	mi
 8007f0e:	f043 0320 	orrmi.w	r3, r3, #32
 8007f12:	6023      	strmi	r3, [r4, #0]
 8007f14:	b11d      	cbz	r5, 8007f1e <_printf_i+0x19e>
 8007f16:	2310      	movs	r3, #16
 8007f18:	e7ac      	b.n	8007e74 <_printf_i+0xf4>
 8007f1a:	4827      	ldr	r0, [pc, #156]	@ (8007fb8 <_printf_i+0x238>)
 8007f1c:	e7e9      	b.n	8007ef2 <_printf_i+0x172>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	f023 0320 	bic.w	r3, r3, #32
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	e7f6      	b.n	8007f16 <_printf_i+0x196>
 8007f28:	4616      	mov	r6, r2
 8007f2a:	e7bd      	b.n	8007ea8 <_printf_i+0x128>
 8007f2c:	6833      	ldr	r3, [r6, #0]
 8007f2e:	6825      	ldr	r5, [r4, #0]
 8007f30:	6961      	ldr	r1, [r4, #20]
 8007f32:	1d18      	adds	r0, r3, #4
 8007f34:	6030      	str	r0, [r6, #0]
 8007f36:	062e      	lsls	r6, r5, #24
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	d501      	bpl.n	8007f40 <_printf_i+0x1c0>
 8007f3c:	6019      	str	r1, [r3, #0]
 8007f3e:	e002      	b.n	8007f46 <_printf_i+0x1c6>
 8007f40:	0668      	lsls	r0, r5, #25
 8007f42:	d5fb      	bpl.n	8007f3c <_printf_i+0x1bc>
 8007f44:	8019      	strh	r1, [r3, #0]
 8007f46:	2300      	movs	r3, #0
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	4616      	mov	r6, r2
 8007f4c:	e7bc      	b.n	8007ec8 <_printf_i+0x148>
 8007f4e:	6833      	ldr	r3, [r6, #0]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	6032      	str	r2, [r6, #0]
 8007f54:	681e      	ldr	r6, [r3, #0]
 8007f56:	6862      	ldr	r2, [r4, #4]
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7f8 f938 	bl	80001d0 <memchr>
 8007f60:	b108      	cbz	r0, 8007f66 <_printf_i+0x1e6>
 8007f62:	1b80      	subs	r0, r0, r6
 8007f64:	6060      	str	r0, [r4, #4]
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	6123      	str	r3, [r4, #16]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f70:	e7aa      	b.n	8007ec8 <_printf_i+0x148>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	4632      	mov	r2, r6
 8007f76:	4649      	mov	r1, r9
 8007f78:	4640      	mov	r0, r8
 8007f7a:	47d0      	blx	sl
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d0ad      	beq.n	8007edc <_printf_i+0x15c>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	079b      	lsls	r3, r3, #30
 8007f84:	d413      	bmi.n	8007fae <_printf_i+0x22e>
 8007f86:	68e0      	ldr	r0, [r4, #12]
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	4298      	cmp	r0, r3
 8007f8c:	bfb8      	it	lt
 8007f8e:	4618      	movlt	r0, r3
 8007f90:	e7a6      	b.n	8007ee0 <_printf_i+0x160>
 8007f92:	2301      	movs	r3, #1
 8007f94:	4632      	mov	r2, r6
 8007f96:	4649      	mov	r1, r9
 8007f98:	4640      	mov	r0, r8
 8007f9a:	47d0      	blx	sl
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d09d      	beq.n	8007edc <_printf_i+0x15c>
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	68e3      	ldr	r3, [r4, #12]
 8007fa4:	9903      	ldr	r1, [sp, #12]
 8007fa6:	1a5b      	subs	r3, r3, r1
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	dcf2      	bgt.n	8007f92 <_printf_i+0x212>
 8007fac:	e7eb      	b.n	8007f86 <_printf_i+0x206>
 8007fae:	2500      	movs	r5, #0
 8007fb0:	f104 0619 	add.w	r6, r4, #25
 8007fb4:	e7f5      	b.n	8007fa2 <_printf_i+0x222>
 8007fb6:	bf00      	nop
 8007fb8:	0800976d 	.word	0x0800976d
 8007fbc:	0800977e 	.word	0x0800977e

08007fc0 <__sflush_r>:
 8007fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc8:	0716      	lsls	r6, r2, #28
 8007fca:	4605      	mov	r5, r0
 8007fcc:	460c      	mov	r4, r1
 8007fce:	d454      	bmi.n	800807a <__sflush_r+0xba>
 8007fd0:	684b      	ldr	r3, [r1, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	dc02      	bgt.n	8007fdc <__sflush_r+0x1c>
 8007fd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	dd48      	ble.n	800806e <__sflush_r+0xae>
 8007fdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fde:	2e00      	cmp	r6, #0
 8007fe0:	d045      	beq.n	800806e <__sflush_r+0xae>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fe8:	682f      	ldr	r7, [r5, #0]
 8007fea:	6a21      	ldr	r1, [r4, #32]
 8007fec:	602b      	str	r3, [r5, #0]
 8007fee:	d030      	beq.n	8008052 <__sflush_r+0x92>
 8007ff0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	0759      	lsls	r1, r3, #29
 8007ff6:	d505      	bpl.n	8008004 <__sflush_r+0x44>
 8007ff8:	6863      	ldr	r3, [r4, #4]
 8007ffa:	1ad2      	subs	r2, r2, r3
 8007ffc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ffe:	b10b      	cbz	r3, 8008004 <__sflush_r+0x44>
 8008000:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008002:	1ad2      	subs	r2, r2, r3
 8008004:	2300      	movs	r3, #0
 8008006:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008008:	6a21      	ldr	r1, [r4, #32]
 800800a:	4628      	mov	r0, r5
 800800c:	47b0      	blx	r6
 800800e:	1c43      	adds	r3, r0, #1
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	d106      	bne.n	8008022 <__sflush_r+0x62>
 8008014:	6829      	ldr	r1, [r5, #0]
 8008016:	291d      	cmp	r1, #29
 8008018:	d82b      	bhi.n	8008072 <__sflush_r+0xb2>
 800801a:	4a2a      	ldr	r2, [pc, #168]	@ (80080c4 <__sflush_r+0x104>)
 800801c:	410a      	asrs	r2, r1
 800801e:	07d6      	lsls	r6, r2, #31
 8008020:	d427      	bmi.n	8008072 <__sflush_r+0xb2>
 8008022:	2200      	movs	r2, #0
 8008024:	6062      	str	r2, [r4, #4]
 8008026:	04d9      	lsls	r1, r3, #19
 8008028:	6922      	ldr	r2, [r4, #16]
 800802a:	6022      	str	r2, [r4, #0]
 800802c:	d504      	bpl.n	8008038 <__sflush_r+0x78>
 800802e:	1c42      	adds	r2, r0, #1
 8008030:	d101      	bne.n	8008036 <__sflush_r+0x76>
 8008032:	682b      	ldr	r3, [r5, #0]
 8008034:	b903      	cbnz	r3, 8008038 <__sflush_r+0x78>
 8008036:	6560      	str	r0, [r4, #84]	@ 0x54
 8008038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800803a:	602f      	str	r7, [r5, #0]
 800803c:	b1b9      	cbz	r1, 800806e <__sflush_r+0xae>
 800803e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008042:	4299      	cmp	r1, r3
 8008044:	d002      	beq.n	800804c <__sflush_r+0x8c>
 8008046:	4628      	mov	r0, r5
 8008048:	f7ff fbf2 	bl	8007830 <_free_r>
 800804c:	2300      	movs	r3, #0
 800804e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008050:	e00d      	b.n	800806e <__sflush_r+0xae>
 8008052:	2301      	movs	r3, #1
 8008054:	4628      	mov	r0, r5
 8008056:	47b0      	blx	r6
 8008058:	4602      	mov	r2, r0
 800805a:	1c50      	adds	r0, r2, #1
 800805c:	d1c9      	bne.n	8007ff2 <__sflush_r+0x32>
 800805e:	682b      	ldr	r3, [r5, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0c6      	beq.n	8007ff2 <__sflush_r+0x32>
 8008064:	2b1d      	cmp	r3, #29
 8008066:	d001      	beq.n	800806c <__sflush_r+0xac>
 8008068:	2b16      	cmp	r3, #22
 800806a:	d11e      	bne.n	80080aa <__sflush_r+0xea>
 800806c:	602f      	str	r7, [r5, #0]
 800806e:	2000      	movs	r0, #0
 8008070:	e022      	b.n	80080b8 <__sflush_r+0xf8>
 8008072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008076:	b21b      	sxth	r3, r3
 8008078:	e01b      	b.n	80080b2 <__sflush_r+0xf2>
 800807a:	690f      	ldr	r7, [r1, #16]
 800807c:	2f00      	cmp	r7, #0
 800807e:	d0f6      	beq.n	800806e <__sflush_r+0xae>
 8008080:	0793      	lsls	r3, r2, #30
 8008082:	680e      	ldr	r6, [r1, #0]
 8008084:	bf08      	it	eq
 8008086:	694b      	ldreq	r3, [r1, #20]
 8008088:	600f      	str	r7, [r1, #0]
 800808a:	bf18      	it	ne
 800808c:	2300      	movne	r3, #0
 800808e:	eba6 0807 	sub.w	r8, r6, r7
 8008092:	608b      	str	r3, [r1, #8]
 8008094:	f1b8 0f00 	cmp.w	r8, #0
 8008098:	dde9      	ble.n	800806e <__sflush_r+0xae>
 800809a:	6a21      	ldr	r1, [r4, #32]
 800809c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800809e:	4643      	mov	r3, r8
 80080a0:	463a      	mov	r2, r7
 80080a2:	4628      	mov	r0, r5
 80080a4:	47b0      	blx	r6
 80080a6:	2800      	cmp	r0, #0
 80080a8:	dc08      	bgt.n	80080bc <__sflush_r+0xfc>
 80080aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295
 80080b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080bc:	4407      	add	r7, r0
 80080be:	eba8 0800 	sub.w	r8, r8, r0
 80080c2:	e7e7      	b.n	8008094 <__sflush_r+0xd4>
 80080c4:	dfbffffe 	.word	0xdfbffffe

080080c8 <_fflush_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	690b      	ldr	r3, [r1, #16]
 80080cc:	4605      	mov	r5, r0
 80080ce:	460c      	mov	r4, r1
 80080d0:	b913      	cbnz	r3, 80080d8 <_fflush_r+0x10>
 80080d2:	2500      	movs	r5, #0
 80080d4:	4628      	mov	r0, r5
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	b118      	cbz	r0, 80080e2 <_fflush_r+0x1a>
 80080da:	6a03      	ldr	r3, [r0, #32]
 80080dc:	b90b      	cbnz	r3, 80080e2 <_fflush_r+0x1a>
 80080de:	f7ff fa9f 	bl	8007620 <__sinit>
 80080e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0f3      	beq.n	80080d2 <_fflush_r+0xa>
 80080ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080ec:	07d0      	lsls	r0, r2, #31
 80080ee:	d404      	bmi.n	80080fa <_fflush_r+0x32>
 80080f0:	0599      	lsls	r1, r3, #22
 80080f2:	d402      	bmi.n	80080fa <_fflush_r+0x32>
 80080f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080f6:	f7ff fb98 	bl	800782a <__retarget_lock_acquire_recursive>
 80080fa:	4628      	mov	r0, r5
 80080fc:	4621      	mov	r1, r4
 80080fe:	f7ff ff5f 	bl	8007fc0 <__sflush_r>
 8008102:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008104:	07da      	lsls	r2, r3, #31
 8008106:	4605      	mov	r5, r0
 8008108:	d4e4      	bmi.n	80080d4 <_fflush_r+0xc>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	059b      	lsls	r3, r3, #22
 800810e:	d4e1      	bmi.n	80080d4 <_fflush_r+0xc>
 8008110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008112:	f7ff fb8b 	bl	800782c <__retarget_lock_release_recursive>
 8008116:	e7dd      	b.n	80080d4 <_fflush_r+0xc>

08008118 <__swbuf_r>:
 8008118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811a:	460e      	mov	r6, r1
 800811c:	4614      	mov	r4, r2
 800811e:	4605      	mov	r5, r0
 8008120:	b118      	cbz	r0, 800812a <__swbuf_r+0x12>
 8008122:	6a03      	ldr	r3, [r0, #32]
 8008124:	b90b      	cbnz	r3, 800812a <__swbuf_r+0x12>
 8008126:	f7ff fa7b 	bl	8007620 <__sinit>
 800812a:	69a3      	ldr	r3, [r4, #24]
 800812c:	60a3      	str	r3, [r4, #8]
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	071a      	lsls	r2, r3, #28
 8008132:	d501      	bpl.n	8008138 <__swbuf_r+0x20>
 8008134:	6923      	ldr	r3, [r4, #16]
 8008136:	b943      	cbnz	r3, 800814a <__swbuf_r+0x32>
 8008138:	4621      	mov	r1, r4
 800813a:	4628      	mov	r0, r5
 800813c:	f000 f82a 	bl	8008194 <__swsetup_r>
 8008140:	b118      	cbz	r0, 800814a <__swbuf_r+0x32>
 8008142:	f04f 37ff 	mov.w	r7, #4294967295
 8008146:	4638      	mov	r0, r7
 8008148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	6922      	ldr	r2, [r4, #16]
 800814e:	1a98      	subs	r0, r3, r2
 8008150:	6963      	ldr	r3, [r4, #20]
 8008152:	b2f6      	uxtb	r6, r6
 8008154:	4283      	cmp	r3, r0
 8008156:	4637      	mov	r7, r6
 8008158:	dc05      	bgt.n	8008166 <__swbuf_r+0x4e>
 800815a:	4621      	mov	r1, r4
 800815c:	4628      	mov	r0, r5
 800815e:	f7ff ffb3 	bl	80080c8 <_fflush_r>
 8008162:	2800      	cmp	r0, #0
 8008164:	d1ed      	bne.n	8008142 <__swbuf_r+0x2a>
 8008166:	68a3      	ldr	r3, [r4, #8]
 8008168:	3b01      	subs	r3, #1
 800816a:	60a3      	str	r3, [r4, #8]
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	6022      	str	r2, [r4, #0]
 8008172:	701e      	strb	r6, [r3, #0]
 8008174:	6962      	ldr	r2, [r4, #20]
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	429a      	cmp	r2, r3
 800817a:	d004      	beq.n	8008186 <__swbuf_r+0x6e>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	07db      	lsls	r3, r3, #31
 8008180:	d5e1      	bpl.n	8008146 <__swbuf_r+0x2e>
 8008182:	2e0a      	cmp	r6, #10
 8008184:	d1df      	bne.n	8008146 <__swbuf_r+0x2e>
 8008186:	4621      	mov	r1, r4
 8008188:	4628      	mov	r0, r5
 800818a:	f7ff ff9d 	bl	80080c8 <_fflush_r>
 800818e:	2800      	cmp	r0, #0
 8008190:	d0d9      	beq.n	8008146 <__swbuf_r+0x2e>
 8008192:	e7d6      	b.n	8008142 <__swbuf_r+0x2a>

08008194 <__swsetup_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4b29      	ldr	r3, [pc, #164]	@ (800823c <__swsetup_r+0xa8>)
 8008198:	4605      	mov	r5, r0
 800819a:	6818      	ldr	r0, [r3, #0]
 800819c:	460c      	mov	r4, r1
 800819e:	b118      	cbz	r0, 80081a8 <__swsetup_r+0x14>
 80081a0:	6a03      	ldr	r3, [r0, #32]
 80081a2:	b90b      	cbnz	r3, 80081a8 <__swsetup_r+0x14>
 80081a4:	f7ff fa3c 	bl	8007620 <__sinit>
 80081a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ac:	0719      	lsls	r1, r3, #28
 80081ae:	d422      	bmi.n	80081f6 <__swsetup_r+0x62>
 80081b0:	06da      	lsls	r2, r3, #27
 80081b2:	d407      	bmi.n	80081c4 <__swsetup_r+0x30>
 80081b4:	2209      	movs	r2, #9
 80081b6:	602a      	str	r2, [r5, #0]
 80081b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081bc:	81a3      	strh	r3, [r4, #12]
 80081be:	f04f 30ff 	mov.w	r0, #4294967295
 80081c2:	e033      	b.n	800822c <__swsetup_r+0x98>
 80081c4:	0758      	lsls	r0, r3, #29
 80081c6:	d512      	bpl.n	80081ee <__swsetup_r+0x5a>
 80081c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081ca:	b141      	cbz	r1, 80081de <__swsetup_r+0x4a>
 80081cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081d0:	4299      	cmp	r1, r3
 80081d2:	d002      	beq.n	80081da <__swsetup_r+0x46>
 80081d4:	4628      	mov	r0, r5
 80081d6:	f7ff fb2b 	bl	8007830 <_free_r>
 80081da:	2300      	movs	r3, #0
 80081dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	2300      	movs	r3, #0
 80081e8:	6063      	str	r3, [r4, #4]
 80081ea:	6923      	ldr	r3, [r4, #16]
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	f043 0308 	orr.w	r3, r3, #8
 80081f4:	81a3      	strh	r3, [r4, #12]
 80081f6:	6923      	ldr	r3, [r4, #16]
 80081f8:	b94b      	cbnz	r3, 800820e <__swsetup_r+0x7a>
 80081fa:	89a3      	ldrh	r3, [r4, #12]
 80081fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008204:	d003      	beq.n	800820e <__swsetup_r+0x7a>
 8008206:	4621      	mov	r1, r4
 8008208:	4628      	mov	r0, r5
 800820a:	f000 f84f 	bl	80082ac <__smakebuf_r>
 800820e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008212:	f013 0201 	ands.w	r2, r3, #1
 8008216:	d00a      	beq.n	800822e <__swsetup_r+0x9a>
 8008218:	2200      	movs	r2, #0
 800821a:	60a2      	str	r2, [r4, #8]
 800821c:	6962      	ldr	r2, [r4, #20]
 800821e:	4252      	negs	r2, r2
 8008220:	61a2      	str	r2, [r4, #24]
 8008222:	6922      	ldr	r2, [r4, #16]
 8008224:	b942      	cbnz	r2, 8008238 <__swsetup_r+0xa4>
 8008226:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800822a:	d1c5      	bne.n	80081b8 <__swsetup_r+0x24>
 800822c:	bd38      	pop	{r3, r4, r5, pc}
 800822e:	0799      	lsls	r1, r3, #30
 8008230:	bf58      	it	pl
 8008232:	6962      	ldrpl	r2, [r4, #20]
 8008234:	60a2      	str	r2, [r4, #8]
 8008236:	e7f4      	b.n	8008222 <__swsetup_r+0x8e>
 8008238:	2000      	movs	r0, #0
 800823a:	e7f7      	b.n	800822c <__swsetup_r+0x98>
 800823c:	20000018 	.word	0x20000018

08008240 <_sbrk_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4d06      	ldr	r5, [pc, #24]	@ (800825c <_sbrk_r+0x1c>)
 8008244:	2300      	movs	r3, #0
 8008246:	4604      	mov	r4, r0
 8008248:	4608      	mov	r0, r1
 800824a:	602b      	str	r3, [r5, #0]
 800824c:	f7fb fa7c 	bl	8003748 <_sbrk>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_sbrk_r+0x1a>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_sbrk_r+0x1a>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	20000578 	.word	0x20000578

08008260 <__swhatbuf_r>:
 8008260:	b570      	push	{r4, r5, r6, lr}
 8008262:	460c      	mov	r4, r1
 8008264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008268:	2900      	cmp	r1, #0
 800826a:	b096      	sub	sp, #88	@ 0x58
 800826c:	4615      	mov	r5, r2
 800826e:	461e      	mov	r6, r3
 8008270:	da0d      	bge.n	800828e <__swhatbuf_r+0x2e>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008278:	f04f 0100 	mov.w	r1, #0
 800827c:	bf14      	ite	ne
 800827e:	2340      	movne	r3, #64	@ 0x40
 8008280:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008284:	2000      	movs	r0, #0
 8008286:	6031      	str	r1, [r6, #0]
 8008288:	602b      	str	r3, [r5, #0]
 800828a:	b016      	add	sp, #88	@ 0x58
 800828c:	bd70      	pop	{r4, r5, r6, pc}
 800828e:	466a      	mov	r2, sp
 8008290:	f000 f848 	bl	8008324 <_fstat_r>
 8008294:	2800      	cmp	r0, #0
 8008296:	dbec      	blt.n	8008272 <__swhatbuf_r+0x12>
 8008298:	9901      	ldr	r1, [sp, #4]
 800829a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800829e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082a2:	4259      	negs	r1, r3
 80082a4:	4159      	adcs	r1, r3
 80082a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082aa:	e7eb      	b.n	8008284 <__swhatbuf_r+0x24>

080082ac <__smakebuf_r>:
 80082ac:	898b      	ldrh	r3, [r1, #12]
 80082ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082b0:	079d      	lsls	r5, r3, #30
 80082b2:	4606      	mov	r6, r0
 80082b4:	460c      	mov	r4, r1
 80082b6:	d507      	bpl.n	80082c8 <__smakebuf_r+0x1c>
 80082b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	6123      	str	r3, [r4, #16]
 80082c0:	2301      	movs	r3, #1
 80082c2:	6163      	str	r3, [r4, #20]
 80082c4:	b003      	add	sp, #12
 80082c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082c8:	ab01      	add	r3, sp, #4
 80082ca:	466a      	mov	r2, sp
 80082cc:	f7ff ffc8 	bl	8008260 <__swhatbuf_r>
 80082d0:	9f00      	ldr	r7, [sp, #0]
 80082d2:	4605      	mov	r5, r0
 80082d4:	4639      	mov	r1, r7
 80082d6:	4630      	mov	r0, r6
 80082d8:	f7ff fb16 	bl	8007908 <_malloc_r>
 80082dc:	b948      	cbnz	r0, 80082f2 <__smakebuf_r+0x46>
 80082de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082e2:	059a      	lsls	r2, r3, #22
 80082e4:	d4ee      	bmi.n	80082c4 <__smakebuf_r+0x18>
 80082e6:	f023 0303 	bic.w	r3, r3, #3
 80082ea:	f043 0302 	orr.w	r3, r3, #2
 80082ee:	81a3      	strh	r3, [r4, #12]
 80082f0:	e7e2      	b.n	80082b8 <__smakebuf_r+0xc>
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	6020      	str	r0, [r4, #0]
 80082f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fa:	81a3      	strh	r3, [r4, #12]
 80082fc:	9b01      	ldr	r3, [sp, #4]
 80082fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008302:	b15b      	cbz	r3, 800831c <__smakebuf_r+0x70>
 8008304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008308:	4630      	mov	r0, r6
 800830a:	f000 f81d 	bl	8008348 <_isatty_r>
 800830e:	b128      	cbz	r0, 800831c <__smakebuf_r+0x70>
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	f023 0303 	bic.w	r3, r3, #3
 8008316:	f043 0301 	orr.w	r3, r3, #1
 800831a:	81a3      	strh	r3, [r4, #12]
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	431d      	orrs	r5, r3
 8008320:	81a5      	strh	r5, [r4, #12]
 8008322:	e7cf      	b.n	80082c4 <__smakebuf_r+0x18>

08008324 <_fstat_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	4d07      	ldr	r5, [pc, #28]	@ (8008344 <_fstat_r+0x20>)
 8008328:	2300      	movs	r3, #0
 800832a:	4604      	mov	r4, r0
 800832c:	4608      	mov	r0, r1
 800832e:	4611      	mov	r1, r2
 8008330:	602b      	str	r3, [r5, #0]
 8008332:	f7fb f9e0 	bl	80036f6 <_fstat>
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	d102      	bne.n	8008340 <_fstat_r+0x1c>
 800833a:	682b      	ldr	r3, [r5, #0]
 800833c:	b103      	cbz	r3, 8008340 <_fstat_r+0x1c>
 800833e:	6023      	str	r3, [r4, #0]
 8008340:	bd38      	pop	{r3, r4, r5, pc}
 8008342:	bf00      	nop
 8008344:	20000578 	.word	0x20000578

08008348 <_isatty_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d06      	ldr	r5, [pc, #24]	@ (8008364 <_isatty_r+0x1c>)
 800834c:	2300      	movs	r3, #0
 800834e:	4604      	mov	r4, r0
 8008350:	4608      	mov	r0, r1
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	f7fb f9df 	bl	8003716 <_isatty>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_isatty_r+0x1a>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_isatty_r+0x1a>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	20000578 	.word	0x20000578

08008368 <atan2>:
 8008368:	f000 b956 	b.w	8008618 <__ieee754_atan2>

0800836c <pow>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	ed2d 8b02 	vpush	{d8}
 8008372:	eeb0 8a40 	vmov.f32	s16, s0
 8008376:	eef0 8a60 	vmov.f32	s17, s1
 800837a:	ec55 4b11 	vmov	r4, r5, d1
 800837e:	f000 fa13 	bl	80087a8 <__ieee754_pow>
 8008382:	4622      	mov	r2, r4
 8008384:	462b      	mov	r3, r5
 8008386:	4620      	mov	r0, r4
 8008388:	4629      	mov	r1, r5
 800838a:	ec57 6b10 	vmov	r6, r7, d0
 800838e:	f7f8 fbc5 	bl	8000b1c <__aeabi_dcmpun>
 8008392:	2800      	cmp	r0, #0
 8008394:	d13b      	bne.n	800840e <pow+0xa2>
 8008396:	ec51 0b18 	vmov	r0, r1, d8
 800839a:	2200      	movs	r2, #0
 800839c:	2300      	movs	r3, #0
 800839e:	f7f8 fb8b 	bl	8000ab8 <__aeabi_dcmpeq>
 80083a2:	b1b8      	cbz	r0, 80083d4 <pow+0x68>
 80083a4:	2200      	movs	r2, #0
 80083a6:	2300      	movs	r3, #0
 80083a8:	4620      	mov	r0, r4
 80083aa:	4629      	mov	r1, r5
 80083ac:	f7f8 fb84 	bl	8000ab8 <__aeabi_dcmpeq>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d146      	bne.n	8008442 <pow+0xd6>
 80083b4:	ec45 4b10 	vmov	d0, r4, r5
 80083b8:	f000 f848 	bl	800844c <finite>
 80083bc:	b338      	cbz	r0, 800840e <pow+0xa2>
 80083be:	2200      	movs	r2, #0
 80083c0:	2300      	movs	r3, #0
 80083c2:	4620      	mov	r0, r4
 80083c4:	4629      	mov	r1, r5
 80083c6:	f7f8 fb81 	bl	8000acc <__aeabi_dcmplt>
 80083ca:	b300      	cbz	r0, 800840e <pow+0xa2>
 80083cc:	f7ff fa02 	bl	80077d4 <__errno>
 80083d0:	2322      	movs	r3, #34	@ 0x22
 80083d2:	e01b      	b.n	800840c <pow+0xa0>
 80083d4:	ec47 6b10 	vmov	d0, r6, r7
 80083d8:	f000 f838 	bl	800844c <finite>
 80083dc:	b9e0      	cbnz	r0, 8008418 <pow+0xac>
 80083de:	eeb0 0a48 	vmov.f32	s0, s16
 80083e2:	eef0 0a68 	vmov.f32	s1, s17
 80083e6:	f000 f831 	bl	800844c <finite>
 80083ea:	b1a8      	cbz	r0, 8008418 <pow+0xac>
 80083ec:	ec45 4b10 	vmov	d0, r4, r5
 80083f0:	f000 f82c 	bl	800844c <finite>
 80083f4:	b180      	cbz	r0, 8008418 <pow+0xac>
 80083f6:	4632      	mov	r2, r6
 80083f8:	463b      	mov	r3, r7
 80083fa:	4630      	mov	r0, r6
 80083fc:	4639      	mov	r1, r7
 80083fe:	f7f8 fb8d 	bl	8000b1c <__aeabi_dcmpun>
 8008402:	2800      	cmp	r0, #0
 8008404:	d0e2      	beq.n	80083cc <pow+0x60>
 8008406:	f7ff f9e5 	bl	80077d4 <__errno>
 800840a:	2321      	movs	r3, #33	@ 0x21
 800840c:	6003      	str	r3, [r0, #0]
 800840e:	ecbd 8b02 	vpop	{d8}
 8008412:	ec47 6b10 	vmov	d0, r6, r7
 8008416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008418:	2200      	movs	r2, #0
 800841a:	2300      	movs	r3, #0
 800841c:	4630      	mov	r0, r6
 800841e:	4639      	mov	r1, r7
 8008420:	f7f8 fb4a 	bl	8000ab8 <__aeabi_dcmpeq>
 8008424:	2800      	cmp	r0, #0
 8008426:	d0f2      	beq.n	800840e <pow+0xa2>
 8008428:	eeb0 0a48 	vmov.f32	s0, s16
 800842c:	eef0 0a68 	vmov.f32	s1, s17
 8008430:	f000 f80c 	bl	800844c <finite>
 8008434:	2800      	cmp	r0, #0
 8008436:	d0ea      	beq.n	800840e <pow+0xa2>
 8008438:	ec45 4b10 	vmov	d0, r4, r5
 800843c:	f000 f806 	bl	800844c <finite>
 8008440:	e7c3      	b.n	80083ca <pow+0x5e>
 8008442:	4f01      	ldr	r7, [pc, #4]	@ (8008448 <pow+0xdc>)
 8008444:	2600      	movs	r6, #0
 8008446:	e7e2      	b.n	800840e <pow+0xa2>
 8008448:	3ff00000 	.word	0x3ff00000

0800844c <finite>:
 800844c:	b082      	sub	sp, #8
 800844e:	ed8d 0b00 	vstr	d0, [sp]
 8008452:	9801      	ldr	r0, [sp, #4]
 8008454:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008458:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800845c:	0fc0      	lsrs	r0, r0, #31
 800845e:	b002      	add	sp, #8
 8008460:	4770      	bx	lr
	...

08008464 <__ieee754_sqrt>:
 8008464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008468:	4a68      	ldr	r2, [pc, #416]	@ (800860c <__ieee754_sqrt+0x1a8>)
 800846a:	ec55 4b10 	vmov	r4, r5, d0
 800846e:	43aa      	bics	r2, r5
 8008470:	462b      	mov	r3, r5
 8008472:	4621      	mov	r1, r4
 8008474:	d110      	bne.n	8008498 <__ieee754_sqrt+0x34>
 8008476:	4622      	mov	r2, r4
 8008478:	4620      	mov	r0, r4
 800847a:	4629      	mov	r1, r5
 800847c:	f7f8 f8b4 	bl	80005e8 <__aeabi_dmul>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4620      	mov	r0, r4
 8008486:	4629      	mov	r1, r5
 8008488:	f7f7 fef8 	bl	800027c <__adddf3>
 800848c:	4604      	mov	r4, r0
 800848e:	460d      	mov	r5, r1
 8008490:	ec45 4b10 	vmov	d0, r4, r5
 8008494:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008498:	2d00      	cmp	r5, #0
 800849a:	dc0e      	bgt.n	80084ba <__ieee754_sqrt+0x56>
 800849c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80084a0:	4322      	orrs	r2, r4
 80084a2:	d0f5      	beq.n	8008490 <__ieee754_sqrt+0x2c>
 80084a4:	b19d      	cbz	r5, 80084ce <__ieee754_sqrt+0x6a>
 80084a6:	4622      	mov	r2, r4
 80084a8:	4620      	mov	r0, r4
 80084aa:	4629      	mov	r1, r5
 80084ac:	f7f7 fee4 	bl	8000278 <__aeabi_dsub>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	f7f8 f9c2 	bl	800083c <__aeabi_ddiv>
 80084b8:	e7e8      	b.n	800848c <__ieee754_sqrt+0x28>
 80084ba:	152a      	asrs	r2, r5, #20
 80084bc:	d115      	bne.n	80084ea <__ieee754_sqrt+0x86>
 80084be:	2000      	movs	r0, #0
 80084c0:	e009      	b.n	80084d6 <__ieee754_sqrt+0x72>
 80084c2:	0acb      	lsrs	r3, r1, #11
 80084c4:	3a15      	subs	r2, #21
 80084c6:	0549      	lsls	r1, r1, #21
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0fa      	beq.n	80084c2 <__ieee754_sqrt+0x5e>
 80084cc:	e7f7      	b.n	80084be <__ieee754_sqrt+0x5a>
 80084ce:	462a      	mov	r2, r5
 80084d0:	e7fa      	b.n	80084c8 <__ieee754_sqrt+0x64>
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	3001      	adds	r0, #1
 80084d6:	02dc      	lsls	r4, r3, #11
 80084d8:	d5fb      	bpl.n	80084d2 <__ieee754_sqrt+0x6e>
 80084da:	1e44      	subs	r4, r0, #1
 80084dc:	1b12      	subs	r2, r2, r4
 80084de:	f1c0 0420 	rsb	r4, r0, #32
 80084e2:	fa21 f404 	lsr.w	r4, r1, r4
 80084e6:	4323      	orrs	r3, r4
 80084e8:	4081      	lsls	r1, r0
 80084ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084ee:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80084f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084f6:	07d2      	lsls	r2, r2, #31
 80084f8:	bf5c      	itt	pl
 80084fa:	005b      	lslpl	r3, r3, #1
 80084fc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008500:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008504:	bf58      	it	pl
 8008506:	0049      	lslpl	r1, r1, #1
 8008508:	2600      	movs	r6, #0
 800850a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800850e:	106d      	asrs	r5, r5, #1
 8008510:	0049      	lsls	r1, r1, #1
 8008512:	2016      	movs	r0, #22
 8008514:	4632      	mov	r2, r6
 8008516:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800851a:	1917      	adds	r7, r2, r4
 800851c:	429f      	cmp	r7, r3
 800851e:	bfde      	ittt	le
 8008520:	193a      	addle	r2, r7, r4
 8008522:	1bdb      	suble	r3, r3, r7
 8008524:	1936      	addle	r6, r6, r4
 8008526:	0fcf      	lsrs	r7, r1, #31
 8008528:	3801      	subs	r0, #1
 800852a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800852e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008532:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008536:	d1f0      	bne.n	800851a <__ieee754_sqrt+0xb6>
 8008538:	4604      	mov	r4, r0
 800853a:	2720      	movs	r7, #32
 800853c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008540:	429a      	cmp	r2, r3
 8008542:	eb00 0e0c 	add.w	lr, r0, ip
 8008546:	db02      	blt.n	800854e <__ieee754_sqrt+0xea>
 8008548:	d113      	bne.n	8008572 <__ieee754_sqrt+0x10e>
 800854a:	458e      	cmp	lr, r1
 800854c:	d811      	bhi.n	8008572 <__ieee754_sqrt+0x10e>
 800854e:	f1be 0f00 	cmp.w	lr, #0
 8008552:	eb0e 000c 	add.w	r0, lr, ip
 8008556:	da42      	bge.n	80085de <__ieee754_sqrt+0x17a>
 8008558:	2800      	cmp	r0, #0
 800855a:	db40      	blt.n	80085de <__ieee754_sqrt+0x17a>
 800855c:	f102 0801 	add.w	r8, r2, #1
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	458e      	cmp	lr, r1
 8008564:	bf88      	it	hi
 8008566:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800856a:	eba1 010e 	sub.w	r1, r1, lr
 800856e:	4464      	add	r4, ip
 8008570:	4642      	mov	r2, r8
 8008572:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008576:	3f01      	subs	r7, #1
 8008578:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800857c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008580:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008584:	d1dc      	bne.n	8008540 <__ieee754_sqrt+0xdc>
 8008586:	4319      	orrs	r1, r3
 8008588:	d01b      	beq.n	80085c2 <__ieee754_sqrt+0x15e>
 800858a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008610 <__ieee754_sqrt+0x1ac>
 800858e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008614 <__ieee754_sqrt+0x1b0>
 8008592:	e9da 0100 	ldrd	r0, r1, [sl]
 8008596:	e9db 2300 	ldrd	r2, r3, [fp]
 800859a:	f7f7 fe6d 	bl	8000278 <__aeabi_dsub>
 800859e:	e9da 8900 	ldrd	r8, r9, [sl]
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4640      	mov	r0, r8
 80085a8:	4649      	mov	r1, r9
 80085aa:	f7f8 fa99 	bl	8000ae0 <__aeabi_dcmple>
 80085ae:	b140      	cbz	r0, 80085c2 <__ieee754_sqrt+0x15e>
 80085b0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80085b4:	e9da 0100 	ldrd	r0, r1, [sl]
 80085b8:	e9db 2300 	ldrd	r2, r3, [fp]
 80085bc:	d111      	bne.n	80085e2 <__ieee754_sqrt+0x17e>
 80085be:	3601      	adds	r6, #1
 80085c0:	463c      	mov	r4, r7
 80085c2:	1072      	asrs	r2, r6, #1
 80085c4:	0863      	lsrs	r3, r4, #1
 80085c6:	07f1      	lsls	r1, r6, #31
 80085c8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80085cc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80085d0:	bf48      	it	mi
 80085d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80085d6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80085da:	4618      	mov	r0, r3
 80085dc:	e756      	b.n	800848c <__ieee754_sqrt+0x28>
 80085de:	4690      	mov	r8, r2
 80085e0:	e7be      	b.n	8008560 <__ieee754_sqrt+0xfc>
 80085e2:	f7f7 fe4b 	bl	800027c <__adddf3>
 80085e6:	e9da 8900 	ldrd	r8, r9, [sl]
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4640      	mov	r0, r8
 80085f0:	4649      	mov	r1, r9
 80085f2:	f7f8 fa6b 	bl	8000acc <__aeabi_dcmplt>
 80085f6:	b120      	cbz	r0, 8008602 <__ieee754_sqrt+0x19e>
 80085f8:	1ca0      	adds	r0, r4, #2
 80085fa:	bf08      	it	eq
 80085fc:	3601      	addeq	r6, #1
 80085fe:	3402      	adds	r4, #2
 8008600:	e7df      	b.n	80085c2 <__ieee754_sqrt+0x15e>
 8008602:	1c63      	adds	r3, r4, #1
 8008604:	f023 0401 	bic.w	r4, r3, #1
 8008608:	e7db      	b.n	80085c2 <__ieee754_sqrt+0x15e>
 800860a:	bf00      	nop
 800860c:	7ff00000 	.word	0x7ff00000
 8008610:	20000070 	.word	0x20000070
 8008614:	20000068 	.word	0x20000068

08008618 <__ieee754_atan2>:
 8008618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800861c:	ec57 6b11 	vmov	r6, r7, d1
 8008620:	4273      	negs	r3, r6
 8008622:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80087a0 <__ieee754_atan2+0x188>
 8008626:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800862a:	4333      	orrs	r3, r6
 800862c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008630:	4543      	cmp	r3, r8
 8008632:	ec51 0b10 	vmov	r0, r1, d0
 8008636:	4635      	mov	r5, r6
 8008638:	d809      	bhi.n	800864e <__ieee754_atan2+0x36>
 800863a:	4244      	negs	r4, r0
 800863c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008640:	4304      	orrs	r4, r0
 8008642:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008646:	4544      	cmp	r4, r8
 8008648:	468e      	mov	lr, r1
 800864a:	4681      	mov	r9, r0
 800864c:	d907      	bls.n	800865e <__ieee754_atan2+0x46>
 800864e:	4632      	mov	r2, r6
 8008650:	463b      	mov	r3, r7
 8008652:	f7f7 fe13 	bl	800027c <__adddf3>
 8008656:	ec41 0b10 	vmov	d0, r0, r1
 800865a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8008662:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8008666:	4334      	orrs	r4, r6
 8008668:	d103      	bne.n	8008672 <__ieee754_atan2+0x5a>
 800866a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800866e:	f000 bddf 	b.w	8009230 <atan>
 8008672:	17bc      	asrs	r4, r7, #30
 8008674:	f004 0402 	and.w	r4, r4, #2
 8008678:	ea53 0909 	orrs.w	r9, r3, r9
 800867c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008680:	d107      	bne.n	8008692 <__ieee754_atan2+0x7a>
 8008682:	2c02      	cmp	r4, #2
 8008684:	d05f      	beq.n	8008746 <__ieee754_atan2+0x12e>
 8008686:	2c03      	cmp	r4, #3
 8008688:	d1e5      	bne.n	8008656 <__ieee754_atan2+0x3e>
 800868a:	a141      	add	r1, pc, #260	@ (adr r1, 8008790 <__ieee754_atan2+0x178>)
 800868c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008690:	e7e1      	b.n	8008656 <__ieee754_atan2+0x3e>
 8008692:	4315      	orrs	r5, r2
 8008694:	d106      	bne.n	80086a4 <__ieee754_atan2+0x8c>
 8008696:	f1be 0f00 	cmp.w	lr, #0
 800869a:	da5f      	bge.n	800875c <__ieee754_atan2+0x144>
 800869c:	a13e      	add	r1, pc, #248	@ (adr r1, 8008798 <__ieee754_atan2+0x180>)
 800869e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086a2:	e7d8      	b.n	8008656 <__ieee754_atan2+0x3e>
 80086a4:	4542      	cmp	r2, r8
 80086a6:	d10f      	bne.n	80086c8 <__ieee754_atan2+0xb0>
 80086a8:	4293      	cmp	r3, r2
 80086aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80086ae:	d107      	bne.n	80086c0 <__ieee754_atan2+0xa8>
 80086b0:	2c02      	cmp	r4, #2
 80086b2:	d84c      	bhi.n	800874e <__ieee754_atan2+0x136>
 80086b4:	4b34      	ldr	r3, [pc, #208]	@ (8008788 <__ieee754_atan2+0x170>)
 80086b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086be:	e7ca      	b.n	8008656 <__ieee754_atan2+0x3e>
 80086c0:	2c02      	cmp	r4, #2
 80086c2:	d848      	bhi.n	8008756 <__ieee754_atan2+0x13e>
 80086c4:	4b31      	ldr	r3, [pc, #196]	@ (800878c <__ieee754_atan2+0x174>)
 80086c6:	e7f6      	b.n	80086b6 <__ieee754_atan2+0x9e>
 80086c8:	4543      	cmp	r3, r8
 80086ca:	d0e4      	beq.n	8008696 <__ieee754_atan2+0x7e>
 80086cc:	1a9b      	subs	r3, r3, r2
 80086ce:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80086d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80086d6:	da1e      	bge.n	8008716 <__ieee754_atan2+0xfe>
 80086d8:	2f00      	cmp	r7, #0
 80086da:	da01      	bge.n	80086e0 <__ieee754_atan2+0xc8>
 80086dc:	323c      	adds	r2, #60	@ 0x3c
 80086de:	db1e      	blt.n	800871e <__ieee754_atan2+0x106>
 80086e0:	4632      	mov	r2, r6
 80086e2:	463b      	mov	r3, r7
 80086e4:	f7f8 f8aa 	bl	800083c <__aeabi_ddiv>
 80086e8:	ec41 0b10 	vmov	d0, r0, r1
 80086ec:	f000 ff38 	bl	8009560 <fabs>
 80086f0:	f000 fd9e 	bl	8009230 <atan>
 80086f4:	ec51 0b10 	vmov	r0, r1, d0
 80086f8:	2c01      	cmp	r4, #1
 80086fa:	d013      	beq.n	8008724 <__ieee754_atan2+0x10c>
 80086fc:	2c02      	cmp	r4, #2
 80086fe:	d015      	beq.n	800872c <__ieee754_atan2+0x114>
 8008700:	2c00      	cmp	r4, #0
 8008702:	d0a8      	beq.n	8008656 <__ieee754_atan2+0x3e>
 8008704:	a318      	add	r3, pc, #96	@ (adr r3, 8008768 <__ieee754_atan2+0x150>)
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	f7f7 fdb5 	bl	8000278 <__aeabi_dsub>
 800870e:	a318      	add	r3, pc, #96	@ (adr r3, 8008770 <__ieee754_atan2+0x158>)
 8008710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008714:	e014      	b.n	8008740 <__ieee754_atan2+0x128>
 8008716:	a118      	add	r1, pc, #96	@ (adr r1, 8008778 <__ieee754_atan2+0x160>)
 8008718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800871c:	e7ec      	b.n	80086f8 <__ieee754_atan2+0xe0>
 800871e:	2000      	movs	r0, #0
 8008720:	2100      	movs	r1, #0
 8008722:	e7e9      	b.n	80086f8 <__ieee754_atan2+0xe0>
 8008724:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008728:	4619      	mov	r1, r3
 800872a:	e794      	b.n	8008656 <__ieee754_atan2+0x3e>
 800872c:	a30e      	add	r3, pc, #56	@ (adr r3, 8008768 <__ieee754_atan2+0x150>)
 800872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008732:	f7f7 fda1 	bl	8000278 <__aeabi_dsub>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	a10d      	add	r1, pc, #52	@ (adr r1, 8008770 <__ieee754_atan2+0x158>)
 800873c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008740:	f7f7 fd9a 	bl	8000278 <__aeabi_dsub>
 8008744:	e787      	b.n	8008656 <__ieee754_atan2+0x3e>
 8008746:	a10a      	add	r1, pc, #40	@ (adr r1, 8008770 <__ieee754_atan2+0x158>)
 8008748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800874c:	e783      	b.n	8008656 <__ieee754_atan2+0x3e>
 800874e:	a10c      	add	r1, pc, #48	@ (adr r1, 8008780 <__ieee754_atan2+0x168>)
 8008750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008754:	e77f      	b.n	8008656 <__ieee754_atan2+0x3e>
 8008756:	2000      	movs	r0, #0
 8008758:	2100      	movs	r1, #0
 800875a:	e77c      	b.n	8008656 <__ieee754_atan2+0x3e>
 800875c:	a106      	add	r1, pc, #24	@ (adr r1, 8008778 <__ieee754_atan2+0x160>)
 800875e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008762:	e778      	b.n	8008656 <__ieee754_atan2+0x3e>
 8008764:	f3af 8000 	nop.w
 8008768:	33145c07 	.word	0x33145c07
 800876c:	3ca1a626 	.word	0x3ca1a626
 8008770:	54442d18 	.word	0x54442d18
 8008774:	400921fb 	.word	0x400921fb
 8008778:	54442d18 	.word	0x54442d18
 800877c:	3ff921fb 	.word	0x3ff921fb
 8008780:	54442d18 	.word	0x54442d18
 8008784:	3fe921fb 	.word	0x3fe921fb
 8008788:	080097a8 	.word	0x080097a8
 800878c:	08009790 	.word	0x08009790
 8008790:	54442d18 	.word	0x54442d18
 8008794:	c00921fb 	.word	0xc00921fb
 8008798:	54442d18 	.word	0x54442d18
 800879c:	bff921fb 	.word	0xbff921fb
 80087a0:	7ff00000 	.word	0x7ff00000
 80087a4:	00000000 	.word	0x00000000

080087a8 <__ieee754_pow>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	b091      	sub	sp, #68	@ 0x44
 80087ae:	ed8d 1b00 	vstr	d1, [sp]
 80087b2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80087b6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80087ba:	ea5a 0001 	orrs.w	r0, sl, r1
 80087be:	ec57 6b10 	vmov	r6, r7, d0
 80087c2:	d113      	bne.n	80087ec <__ieee754_pow+0x44>
 80087c4:	19b3      	adds	r3, r6, r6
 80087c6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80087ca:	4152      	adcs	r2, r2
 80087cc:	4298      	cmp	r0, r3
 80087ce:	4b98      	ldr	r3, [pc, #608]	@ (8008a30 <__ieee754_pow+0x288>)
 80087d0:	4193      	sbcs	r3, r2
 80087d2:	f080 84ea 	bcs.w	80091aa <__ieee754_pow+0xa02>
 80087d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087da:	4630      	mov	r0, r6
 80087dc:	4639      	mov	r1, r7
 80087de:	f7f7 fd4d 	bl	800027c <__adddf3>
 80087e2:	ec41 0b10 	vmov	d0, r0, r1
 80087e6:	b011      	add	sp, #68	@ 0x44
 80087e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ec:	4a91      	ldr	r2, [pc, #580]	@ (8008a34 <__ieee754_pow+0x28c>)
 80087ee:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80087f2:	4590      	cmp	r8, r2
 80087f4:	463d      	mov	r5, r7
 80087f6:	4633      	mov	r3, r6
 80087f8:	d806      	bhi.n	8008808 <__ieee754_pow+0x60>
 80087fa:	d101      	bne.n	8008800 <__ieee754_pow+0x58>
 80087fc:	2e00      	cmp	r6, #0
 80087fe:	d1ea      	bne.n	80087d6 <__ieee754_pow+0x2e>
 8008800:	4592      	cmp	sl, r2
 8008802:	d801      	bhi.n	8008808 <__ieee754_pow+0x60>
 8008804:	d10e      	bne.n	8008824 <__ieee754_pow+0x7c>
 8008806:	b169      	cbz	r1, 8008824 <__ieee754_pow+0x7c>
 8008808:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800880c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008810:	431d      	orrs	r5, r3
 8008812:	d1e0      	bne.n	80087d6 <__ieee754_pow+0x2e>
 8008814:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008818:	18db      	adds	r3, r3, r3
 800881a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800881e:	4152      	adcs	r2, r2
 8008820:	429d      	cmp	r5, r3
 8008822:	e7d4      	b.n	80087ce <__ieee754_pow+0x26>
 8008824:	2d00      	cmp	r5, #0
 8008826:	46c3      	mov	fp, r8
 8008828:	da3a      	bge.n	80088a0 <__ieee754_pow+0xf8>
 800882a:	4a83      	ldr	r2, [pc, #524]	@ (8008a38 <__ieee754_pow+0x290>)
 800882c:	4592      	cmp	sl, r2
 800882e:	d84d      	bhi.n	80088cc <__ieee754_pow+0x124>
 8008830:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008834:	4592      	cmp	sl, r2
 8008836:	f240 84c7 	bls.w	80091c8 <__ieee754_pow+0xa20>
 800883a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800883e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008842:	2a14      	cmp	r2, #20
 8008844:	dd0f      	ble.n	8008866 <__ieee754_pow+0xbe>
 8008846:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800884a:	fa21 f402 	lsr.w	r4, r1, r2
 800884e:	fa04 f202 	lsl.w	r2, r4, r2
 8008852:	428a      	cmp	r2, r1
 8008854:	f040 84b8 	bne.w	80091c8 <__ieee754_pow+0xa20>
 8008858:	f004 0401 	and.w	r4, r4, #1
 800885c:	f1c4 0402 	rsb	r4, r4, #2
 8008860:	2900      	cmp	r1, #0
 8008862:	d158      	bne.n	8008916 <__ieee754_pow+0x16e>
 8008864:	e00e      	b.n	8008884 <__ieee754_pow+0xdc>
 8008866:	2900      	cmp	r1, #0
 8008868:	d154      	bne.n	8008914 <__ieee754_pow+0x16c>
 800886a:	f1c2 0214 	rsb	r2, r2, #20
 800886e:	fa4a f402 	asr.w	r4, sl, r2
 8008872:	fa04 f202 	lsl.w	r2, r4, r2
 8008876:	4552      	cmp	r2, sl
 8008878:	f040 84a3 	bne.w	80091c2 <__ieee754_pow+0xa1a>
 800887c:	f004 0401 	and.w	r4, r4, #1
 8008880:	f1c4 0402 	rsb	r4, r4, #2
 8008884:	4a6d      	ldr	r2, [pc, #436]	@ (8008a3c <__ieee754_pow+0x294>)
 8008886:	4592      	cmp	sl, r2
 8008888:	d12e      	bne.n	80088e8 <__ieee754_pow+0x140>
 800888a:	f1b9 0f00 	cmp.w	r9, #0
 800888e:	f280 8494 	bge.w	80091ba <__ieee754_pow+0xa12>
 8008892:	496a      	ldr	r1, [pc, #424]	@ (8008a3c <__ieee754_pow+0x294>)
 8008894:	4632      	mov	r2, r6
 8008896:	463b      	mov	r3, r7
 8008898:	2000      	movs	r0, #0
 800889a:	f7f7 ffcf 	bl	800083c <__aeabi_ddiv>
 800889e:	e7a0      	b.n	80087e2 <__ieee754_pow+0x3a>
 80088a0:	2400      	movs	r4, #0
 80088a2:	bbc1      	cbnz	r1, 8008916 <__ieee754_pow+0x16e>
 80088a4:	4a63      	ldr	r2, [pc, #396]	@ (8008a34 <__ieee754_pow+0x28c>)
 80088a6:	4592      	cmp	sl, r2
 80088a8:	d1ec      	bne.n	8008884 <__ieee754_pow+0xdc>
 80088aa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80088ae:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80088b2:	431a      	orrs	r2, r3
 80088b4:	f000 8479 	beq.w	80091aa <__ieee754_pow+0xa02>
 80088b8:	4b61      	ldr	r3, [pc, #388]	@ (8008a40 <__ieee754_pow+0x298>)
 80088ba:	4598      	cmp	r8, r3
 80088bc:	d908      	bls.n	80088d0 <__ieee754_pow+0x128>
 80088be:	f1b9 0f00 	cmp.w	r9, #0
 80088c2:	f2c0 8476 	blt.w	80091b2 <__ieee754_pow+0xa0a>
 80088c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088ca:	e78a      	b.n	80087e2 <__ieee754_pow+0x3a>
 80088cc:	2402      	movs	r4, #2
 80088ce:	e7e8      	b.n	80088a2 <__ieee754_pow+0xfa>
 80088d0:	f1b9 0f00 	cmp.w	r9, #0
 80088d4:	f04f 0000 	mov.w	r0, #0
 80088d8:	f04f 0100 	mov.w	r1, #0
 80088dc:	da81      	bge.n	80087e2 <__ieee754_pow+0x3a>
 80088de:	e9dd 0300 	ldrd	r0, r3, [sp]
 80088e2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80088e6:	e77c      	b.n	80087e2 <__ieee754_pow+0x3a>
 80088e8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80088ec:	d106      	bne.n	80088fc <__ieee754_pow+0x154>
 80088ee:	4632      	mov	r2, r6
 80088f0:	463b      	mov	r3, r7
 80088f2:	4630      	mov	r0, r6
 80088f4:	4639      	mov	r1, r7
 80088f6:	f7f7 fe77 	bl	80005e8 <__aeabi_dmul>
 80088fa:	e772      	b.n	80087e2 <__ieee754_pow+0x3a>
 80088fc:	4a51      	ldr	r2, [pc, #324]	@ (8008a44 <__ieee754_pow+0x29c>)
 80088fe:	4591      	cmp	r9, r2
 8008900:	d109      	bne.n	8008916 <__ieee754_pow+0x16e>
 8008902:	2d00      	cmp	r5, #0
 8008904:	db07      	blt.n	8008916 <__ieee754_pow+0x16e>
 8008906:	ec47 6b10 	vmov	d0, r6, r7
 800890a:	b011      	add	sp, #68	@ 0x44
 800890c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008910:	f7ff bda8 	b.w	8008464 <__ieee754_sqrt>
 8008914:	2400      	movs	r4, #0
 8008916:	ec47 6b10 	vmov	d0, r6, r7
 800891a:	9302      	str	r3, [sp, #8]
 800891c:	f000 fe20 	bl	8009560 <fabs>
 8008920:	9b02      	ldr	r3, [sp, #8]
 8008922:	ec51 0b10 	vmov	r0, r1, d0
 8008926:	bb53      	cbnz	r3, 800897e <__ieee754_pow+0x1d6>
 8008928:	4b44      	ldr	r3, [pc, #272]	@ (8008a3c <__ieee754_pow+0x294>)
 800892a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800892e:	429a      	cmp	r2, r3
 8008930:	d002      	beq.n	8008938 <__ieee754_pow+0x190>
 8008932:	f1b8 0f00 	cmp.w	r8, #0
 8008936:	d122      	bne.n	800897e <__ieee754_pow+0x1d6>
 8008938:	f1b9 0f00 	cmp.w	r9, #0
 800893c:	da05      	bge.n	800894a <__ieee754_pow+0x1a2>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	2000      	movs	r0, #0
 8008944:	493d      	ldr	r1, [pc, #244]	@ (8008a3c <__ieee754_pow+0x294>)
 8008946:	f7f7 ff79 	bl	800083c <__aeabi_ddiv>
 800894a:	2d00      	cmp	r5, #0
 800894c:	f6bf af49 	bge.w	80087e2 <__ieee754_pow+0x3a>
 8008950:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008954:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008958:	ea58 0804 	orrs.w	r8, r8, r4
 800895c:	d108      	bne.n	8008970 <__ieee754_pow+0x1c8>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4610      	mov	r0, r2
 8008964:	4619      	mov	r1, r3
 8008966:	f7f7 fc87 	bl	8000278 <__aeabi_dsub>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	e794      	b.n	800889a <__ieee754_pow+0xf2>
 8008970:	2c01      	cmp	r4, #1
 8008972:	f47f af36 	bne.w	80087e2 <__ieee754_pow+0x3a>
 8008976:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800897a:	4619      	mov	r1, r3
 800897c:	e731      	b.n	80087e2 <__ieee754_pow+0x3a>
 800897e:	0feb      	lsrs	r3, r5, #31
 8008980:	3b01      	subs	r3, #1
 8008982:	ea53 0204 	orrs.w	r2, r3, r4
 8008986:	d102      	bne.n	800898e <__ieee754_pow+0x1e6>
 8008988:	4632      	mov	r2, r6
 800898a:	463b      	mov	r3, r7
 800898c:	e7e9      	b.n	8008962 <__ieee754_pow+0x1ba>
 800898e:	3c01      	subs	r4, #1
 8008990:	431c      	orrs	r4, r3
 8008992:	d016      	beq.n	80089c2 <__ieee754_pow+0x21a>
 8008994:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008a20 <__ieee754_pow+0x278>
 8008998:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800899c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80089a0:	f240 8112 	bls.w	8008bc8 <__ieee754_pow+0x420>
 80089a4:	4b28      	ldr	r3, [pc, #160]	@ (8008a48 <__ieee754_pow+0x2a0>)
 80089a6:	459a      	cmp	sl, r3
 80089a8:	4b25      	ldr	r3, [pc, #148]	@ (8008a40 <__ieee754_pow+0x298>)
 80089aa:	d916      	bls.n	80089da <__ieee754_pow+0x232>
 80089ac:	4598      	cmp	r8, r3
 80089ae:	d80b      	bhi.n	80089c8 <__ieee754_pow+0x220>
 80089b0:	f1b9 0f00 	cmp.w	r9, #0
 80089b4:	da0b      	bge.n	80089ce <__ieee754_pow+0x226>
 80089b6:	2000      	movs	r0, #0
 80089b8:	b011      	add	sp, #68	@ 0x44
 80089ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089be:	f000 be8b 	b.w	80096d8 <__math_oflow>
 80089c2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008a28 <__ieee754_pow+0x280>
 80089c6:	e7e7      	b.n	8008998 <__ieee754_pow+0x1f0>
 80089c8:	f1b9 0f00 	cmp.w	r9, #0
 80089cc:	dcf3      	bgt.n	80089b6 <__ieee754_pow+0x20e>
 80089ce:	2000      	movs	r0, #0
 80089d0:	b011      	add	sp, #68	@ 0x44
 80089d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d6:	f000 be77 	b.w	80096c8 <__math_uflow>
 80089da:	4598      	cmp	r8, r3
 80089dc:	d20c      	bcs.n	80089f8 <__ieee754_pow+0x250>
 80089de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089e2:	2200      	movs	r2, #0
 80089e4:	2300      	movs	r3, #0
 80089e6:	f7f8 f871 	bl	8000acc <__aeabi_dcmplt>
 80089ea:	3800      	subs	r0, #0
 80089ec:	bf18      	it	ne
 80089ee:	2001      	movne	r0, #1
 80089f0:	f1b9 0f00 	cmp.w	r9, #0
 80089f4:	daec      	bge.n	80089d0 <__ieee754_pow+0x228>
 80089f6:	e7df      	b.n	80089b8 <__ieee754_pow+0x210>
 80089f8:	4b10      	ldr	r3, [pc, #64]	@ (8008a3c <__ieee754_pow+0x294>)
 80089fa:	4598      	cmp	r8, r3
 80089fc:	f04f 0200 	mov.w	r2, #0
 8008a00:	d924      	bls.n	8008a4c <__ieee754_pow+0x2a4>
 8008a02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a06:	2300      	movs	r3, #0
 8008a08:	f7f8 f860 	bl	8000acc <__aeabi_dcmplt>
 8008a0c:	3800      	subs	r0, #0
 8008a0e:	bf18      	it	ne
 8008a10:	2001      	movne	r0, #1
 8008a12:	f1b9 0f00 	cmp.w	r9, #0
 8008a16:	dccf      	bgt.n	80089b8 <__ieee754_pow+0x210>
 8008a18:	e7da      	b.n	80089d0 <__ieee754_pow+0x228>
 8008a1a:	bf00      	nop
 8008a1c:	f3af 8000 	nop.w
 8008a20:	00000000 	.word	0x00000000
 8008a24:	3ff00000 	.word	0x3ff00000
 8008a28:	00000000 	.word	0x00000000
 8008a2c:	bff00000 	.word	0xbff00000
 8008a30:	fff00000 	.word	0xfff00000
 8008a34:	7ff00000 	.word	0x7ff00000
 8008a38:	433fffff 	.word	0x433fffff
 8008a3c:	3ff00000 	.word	0x3ff00000
 8008a40:	3fefffff 	.word	0x3fefffff
 8008a44:	3fe00000 	.word	0x3fe00000
 8008a48:	43f00000 	.word	0x43f00000
 8008a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8008bb8 <__ieee754_pow+0x410>)
 8008a4e:	f7f7 fc13 	bl	8000278 <__aeabi_dsub>
 8008a52:	a351      	add	r3, pc, #324	@ (adr r3, 8008b98 <__ieee754_pow+0x3f0>)
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	4604      	mov	r4, r0
 8008a5a:	460d      	mov	r5, r1
 8008a5c:	f7f7 fdc4 	bl	80005e8 <__aeabi_dmul>
 8008a60:	a34f      	add	r3, pc, #316	@ (adr r3, 8008ba0 <__ieee754_pow+0x3f8>)
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	4606      	mov	r6, r0
 8008a68:	460f      	mov	r7, r1
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	f7f7 fdbb 	bl	80005e8 <__aeabi_dmul>
 8008a72:	4b52      	ldr	r3, [pc, #328]	@ (8008bbc <__ieee754_pow+0x414>)
 8008a74:	4682      	mov	sl, r0
 8008a76:	468b      	mov	fp, r1
 8008a78:	2200      	movs	r2, #0
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	f7f7 fdb3 	bl	80005e8 <__aeabi_dmul>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	a148      	add	r1, pc, #288	@ (adr r1, 8008ba8 <__ieee754_pow+0x400>)
 8008a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a8c:	f7f7 fbf4 	bl	8000278 <__aeabi_dsub>
 8008a90:	4622      	mov	r2, r4
 8008a92:	462b      	mov	r3, r5
 8008a94:	f7f7 fda8 	bl	80005e8 <__aeabi_dmul>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	4948      	ldr	r1, [pc, #288]	@ (8008bc0 <__ieee754_pow+0x418>)
 8008aa0:	f7f7 fbea 	bl	8000278 <__aeabi_dsub>
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	4680      	mov	r8, r0
 8008aa8:	4689      	mov	r9, r1
 8008aaa:	462b      	mov	r3, r5
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f7 fd9a 	bl	80005e8 <__aeabi_dmul>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4640      	mov	r0, r8
 8008aba:	4649      	mov	r1, r9
 8008abc:	f7f7 fd94 	bl	80005e8 <__aeabi_dmul>
 8008ac0:	a33b      	add	r3, pc, #236	@ (adr r3, 8008bb0 <__ieee754_pow+0x408>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f7f7 fd8f 	bl	80005e8 <__aeabi_dmul>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4650      	mov	r0, sl
 8008ad0:	4659      	mov	r1, fp
 8008ad2:	f7f7 fbd1 	bl	8000278 <__aeabi_dsub>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4680      	mov	r8, r0
 8008adc:	4689      	mov	r9, r1
 8008ade:	4630      	mov	r0, r6
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	f7f7 fbcb 	bl	800027c <__adddf3>
 8008ae6:	2400      	movs	r4, #0
 8008ae8:	4632      	mov	r2, r6
 8008aea:	463b      	mov	r3, r7
 8008aec:	4620      	mov	r0, r4
 8008aee:	460d      	mov	r5, r1
 8008af0:	f7f7 fbc2 	bl	8000278 <__aeabi_dsub>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4640      	mov	r0, r8
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f7 fbbc 	bl	8000278 <__aeabi_dsub>
 8008b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b08:	2300      	movs	r3, #0
 8008b0a:	9304      	str	r3, [sp, #16]
 8008b0c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008b10:	4606      	mov	r6, r0
 8008b12:	460f      	mov	r7, r1
 8008b14:	4652      	mov	r2, sl
 8008b16:	465b      	mov	r3, fp
 8008b18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b1c:	f7f7 fbac 	bl	8000278 <__aeabi_dsub>
 8008b20:	4622      	mov	r2, r4
 8008b22:	462b      	mov	r3, r5
 8008b24:	f7f7 fd60 	bl	80005e8 <__aeabi_dmul>
 8008b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	4689      	mov	r9, r1
 8008b30:	4630      	mov	r0, r6
 8008b32:	4639      	mov	r1, r7
 8008b34:	f7f7 fd58 	bl	80005e8 <__aeabi_dmul>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	4649      	mov	r1, r9
 8008b40:	f7f7 fb9c 	bl	800027c <__adddf3>
 8008b44:	4652      	mov	r2, sl
 8008b46:	465b      	mov	r3, fp
 8008b48:	4606      	mov	r6, r0
 8008b4a:	460f      	mov	r7, r1
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	4629      	mov	r1, r5
 8008b50:	f7f7 fd4a 	bl	80005e8 <__aeabi_dmul>
 8008b54:	460b      	mov	r3, r1
 8008b56:	4602      	mov	r2, r0
 8008b58:	4680      	mov	r8, r0
 8008b5a:	4689      	mov	r9, r1
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	4639      	mov	r1, r7
 8008b60:	f7f7 fb8c 	bl	800027c <__adddf3>
 8008b64:	4b17      	ldr	r3, [pc, #92]	@ (8008bc4 <__ieee754_pow+0x41c>)
 8008b66:	4299      	cmp	r1, r3
 8008b68:	4604      	mov	r4, r0
 8008b6a:	460d      	mov	r5, r1
 8008b6c:	468a      	mov	sl, r1
 8008b6e:	468b      	mov	fp, r1
 8008b70:	f340 82ef 	ble.w	8009152 <__ieee754_pow+0x9aa>
 8008b74:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008b78:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008b7c:	4303      	orrs	r3, r0
 8008b7e:	f000 81e8 	beq.w	8008f52 <__ieee754_pow+0x7aa>
 8008b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b86:	2200      	movs	r2, #0
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f7f7 ff9f 	bl	8000acc <__aeabi_dcmplt>
 8008b8e:	3800      	subs	r0, #0
 8008b90:	bf18      	it	ne
 8008b92:	2001      	movne	r0, #1
 8008b94:	e710      	b.n	80089b8 <__ieee754_pow+0x210>
 8008b96:	bf00      	nop
 8008b98:	60000000 	.word	0x60000000
 8008b9c:	3ff71547 	.word	0x3ff71547
 8008ba0:	f85ddf44 	.word	0xf85ddf44
 8008ba4:	3e54ae0b 	.word	0x3e54ae0b
 8008ba8:	55555555 	.word	0x55555555
 8008bac:	3fd55555 	.word	0x3fd55555
 8008bb0:	652b82fe 	.word	0x652b82fe
 8008bb4:	3ff71547 	.word	0x3ff71547
 8008bb8:	3ff00000 	.word	0x3ff00000
 8008bbc:	3fd00000 	.word	0x3fd00000
 8008bc0:	3fe00000 	.word	0x3fe00000
 8008bc4:	408fffff 	.word	0x408fffff
 8008bc8:	4bd5      	ldr	r3, [pc, #852]	@ (8008f20 <__ieee754_pow+0x778>)
 8008bca:	402b      	ands	r3, r5
 8008bcc:	2200      	movs	r2, #0
 8008bce:	b92b      	cbnz	r3, 8008bdc <__ieee754_pow+0x434>
 8008bd0:	4bd4      	ldr	r3, [pc, #848]	@ (8008f24 <__ieee754_pow+0x77c>)
 8008bd2:	f7f7 fd09 	bl	80005e8 <__aeabi_dmul>
 8008bd6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008bda:	468b      	mov	fp, r1
 8008bdc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008be0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008be4:	4413      	add	r3, r2
 8008be6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008be8:	4bcf      	ldr	r3, [pc, #828]	@ (8008f28 <__ieee754_pow+0x780>)
 8008bea:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008bee:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008bf2:	459b      	cmp	fp, r3
 8008bf4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008bf8:	dd08      	ble.n	8008c0c <__ieee754_pow+0x464>
 8008bfa:	4bcc      	ldr	r3, [pc, #816]	@ (8008f2c <__ieee754_pow+0x784>)
 8008bfc:	459b      	cmp	fp, r3
 8008bfe:	f340 81a5 	ble.w	8008f4c <__ieee754_pow+0x7a4>
 8008c02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c04:	3301      	adds	r3, #1
 8008c06:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c08:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008c0c:	f04f 0a00 	mov.w	sl, #0
 8008c10:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008c14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c16:	4bc6      	ldr	r3, [pc, #792]	@ (8008f30 <__ieee754_pow+0x788>)
 8008c18:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c1c:	ed93 7b00 	vldr	d7, [r3]
 8008c20:	4629      	mov	r1, r5
 8008c22:	ec53 2b17 	vmov	r2, r3, d7
 8008c26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c2a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c2e:	f7f7 fb23 	bl	8000278 <__aeabi_dsub>
 8008c32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c36:	4606      	mov	r6, r0
 8008c38:	460f      	mov	r7, r1
 8008c3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c3e:	f7f7 fb1d 	bl	800027c <__adddf3>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	2000      	movs	r0, #0
 8008c48:	49ba      	ldr	r1, [pc, #744]	@ (8008f34 <__ieee754_pow+0x78c>)
 8008c4a:	f7f7 fdf7 	bl	800083c <__aeabi_ddiv>
 8008c4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4630      	mov	r0, r6
 8008c58:	4639      	mov	r1, r7
 8008c5a:	f7f7 fcc5 	bl	80005e8 <__aeabi_dmul>
 8008c5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c62:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008c66:	106d      	asrs	r5, r5, #1
 8008c68:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008c6c:	f04f 0b00 	mov.w	fp, #0
 8008c70:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008c74:	4661      	mov	r1, ip
 8008c76:	2200      	movs	r2, #0
 8008c78:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008c7c:	4658      	mov	r0, fp
 8008c7e:	46e1      	mov	r9, ip
 8008c80:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008c84:	4614      	mov	r4, r2
 8008c86:	461d      	mov	r5, r3
 8008c88:	f7f7 fcae 	bl	80005e8 <__aeabi_dmul>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 faf0 	bl	8000278 <__aeabi_dsub>
 8008c98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	460f      	mov	r7, r1
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	f7f7 fae8 	bl	8000278 <__aeabi_dsub>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cb0:	f7f7 fae2 	bl	8000278 <__aeabi_dsub>
 8008cb4:	465a      	mov	r2, fp
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	f7f7 fc96 	bl	80005e8 <__aeabi_dmul>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	f7f7 fad8 	bl	8000278 <__aeabi_dsub>
 8008cc8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008ccc:	f7f7 fc8c 	bl	80005e8 <__aeabi_dmul>
 8008cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4619      	mov	r1, r3
 8008cdc:	f7f7 fc84 	bl	80005e8 <__aeabi_dmul>
 8008ce0:	a37d      	add	r3, pc, #500	@ (adr r3, 8008ed8 <__ieee754_pow+0x730>)
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	460d      	mov	r5, r1
 8008cea:	f7f7 fc7d 	bl	80005e8 <__aeabi_dmul>
 8008cee:	a37c      	add	r3, pc, #496	@ (adr r3, 8008ee0 <__ieee754_pow+0x738>)
 8008cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf4:	f7f7 fac2 	bl	800027c <__adddf3>
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	462b      	mov	r3, r5
 8008cfc:	f7f7 fc74 	bl	80005e8 <__aeabi_dmul>
 8008d00:	a379      	add	r3, pc, #484	@ (adr r3, 8008ee8 <__ieee754_pow+0x740>)
 8008d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d06:	f7f7 fab9 	bl	800027c <__adddf3>
 8008d0a:	4622      	mov	r2, r4
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	f7f7 fc6b 	bl	80005e8 <__aeabi_dmul>
 8008d12:	a377      	add	r3, pc, #476	@ (adr r3, 8008ef0 <__ieee754_pow+0x748>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f7f7 fab0 	bl	800027c <__adddf3>
 8008d1c:	4622      	mov	r2, r4
 8008d1e:	462b      	mov	r3, r5
 8008d20:	f7f7 fc62 	bl	80005e8 <__aeabi_dmul>
 8008d24:	a374      	add	r3, pc, #464	@ (adr r3, 8008ef8 <__ieee754_pow+0x750>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	f7f7 faa7 	bl	800027c <__adddf3>
 8008d2e:	4622      	mov	r2, r4
 8008d30:	462b      	mov	r3, r5
 8008d32:	f7f7 fc59 	bl	80005e8 <__aeabi_dmul>
 8008d36:	a372      	add	r3, pc, #456	@ (adr r3, 8008f00 <__ieee754_pow+0x758>)
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	f7f7 fa9e 	bl	800027c <__adddf3>
 8008d40:	4622      	mov	r2, r4
 8008d42:	4606      	mov	r6, r0
 8008d44:	460f      	mov	r7, r1
 8008d46:	462b      	mov	r3, r5
 8008d48:	4620      	mov	r0, r4
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	f7f7 fc4c 	bl	80005e8 <__aeabi_dmul>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	4630      	mov	r0, r6
 8008d56:	4639      	mov	r1, r7
 8008d58:	f7f7 fc46 	bl	80005e8 <__aeabi_dmul>
 8008d5c:	465a      	mov	r2, fp
 8008d5e:	4604      	mov	r4, r0
 8008d60:	460d      	mov	r5, r1
 8008d62:	464b      	mov	r3, r9
 8008d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d68:	f7f7 fa88 	bl	800027c <__adddf3>
 8008d6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d70:	f7f7 fc3a 	bl	80005e8 <__aeabi_dmul>
 8008d74:	4622      	mov	r2, r4
 8008d76:	462b      	mov	r3, r5
 8008d78:	f7f7 fa80 	bl	800027c <__adddf3>
 8008d7c:	465a      	mov	r2, fp
 8008d7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d82:	464b      	mov	r3, r9
 8008d84:	4658      	mov	r0, fp
 8008d86:	4649      	mov	r1, r9
 8008d88:	f7f7 fc2e 	bl	80005e8 <__aeabi_dmul>
 8008d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8008f38 <__ieee754_pow+0x790>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	4606      	mov	r6, r0
 8008d92:	460f      	mov	r7, r1
 8008d94:	f7f7 fa72 	bl	800027c <__adddf3>
 8008d98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d9c:	f7f7 fa6e 	bl	800027c <__adddf3>
 8008da0:	46d8      	mov	r8, fp
 8008da2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008da6:	460d      	mov	r5, r1
 8008da8:	465a      	mov	r2, fp
 8008daa:	460b      	mov	r3, r1
 8008dac:	4640      	mov	r0, r8
 8008dae:	4649      	mov	r1, r9
 8008db0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008db4:	f7f7 fc18 	bl	80005e8 <__aeabi_dmul>
 8008db8:	465c      	mov	r4, fp
 8008dba:	4680      	mov	r8, r0
 8008dbc:	4689      	mov	r9, r1
 8008dbe:	4b5e      	ldr	r3, [pc, #376]	@ (8008f38 <__ieee754_pow+0x790>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	f7f7 fa57 	bl	8000278 <__aeabi_dsub>
 8008dca:	4632      	mov	r2, r6
 8008dcc:	463b      	mov	r3, r7
 8008dce:	f7f7 fa53 	bl	8000278 <__aeabi_dsub>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008dda:	f7f7 fa4d 	bl	8000278 <__aeabi_dsub>
 8008dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008de2:	f7f7 fc01 	bl	80005e8 <__aeabi_dmul>
 8008de6:	4622      	mov	r2, r4
 8008de8:	4606      	mov	r6, r0
 8008dea:	460f      	mov	r7, r1
 8008dec:	462b      	mov	r3, r5
 8008dee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008df2:	f7f7 fbf9 	bl	80005e8 <__aeabi_dmul>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	f7f7 fa3d 	bl	800027c <__adddf3>
 8008e02:	4606      	mov	r6, r0
 8008e04:	460f      	mov	r7, r1
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	f7f7 fa35 	bl	800027c <__adddf3>
 8008e12:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008e16:	a33c      	add	r3, pc, #240	@ (adr r3, 8008f08 <__ieee754_pow+0x760>)
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	4658      	mov	r0, fp
 8008e1e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008e22:	460d      	mov	r5, r1
 8008e24:	f7f7 fbe0 	bl	80005e8 <__aeabi_dmul>
 8008e28:	465c      	mov	r4, fp
 8008e2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e2e:	4642      	mov	r2, r8
 8008e30:	464b      	mov	r3, r9
 8008e32:	4620      	mov	r0, r4
 8008e34:	4629      	mov	r1, r5
 8008e36:	f7f7 fa1f 	bl	8000278 <__aeabi_dsub>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4630      	mov	r0, r6
 8008e40:	4639      	mov	r1, r7
 8008e42:	f7f7 fa19 	bl	8000278 <__aeabi_dsub>
 8008e46:	a332      	add	r3, pc, #200	@ (adr r3, 8008f10 <__ieee754_pow+0x768>)
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	f7f7 fbcc 	bl	80005e8 <__aeabi_dmul>
 8008e50:	a331      	add	r3, pc, #196	@ (adr r3, 8008f18 <__ieee754_pow+0x770>)
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	4606      	mov	r6, r0
 8008e58:	460f      	mov	r7, r1
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	f7f7 fbc3 	bl	80005e8 <__aeabi_dmul>
 8008e62:	4602      	mov	r2, r0
 8008e64:	460b      	mov	r3, r1
 8008e66:	4630      	mov	r0, r6
 8008e68:	4639      	mov	r1, r7
 8008e6a:	f7f7 fa07 	bl	800027c <__adddf3>
 8008e6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008e70:	4b32      	ldr	r3, [pc, #200]	@ (8008f3c <__ieee754_pow+0x794>)
 8008e72:	4413      	add	r3, r2
 8008e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e78:	f7f7 fa00 	bl	800027c <__adddf3>
 8008e7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e82:	f7f7 fb47 	bl	8000514 <__aeabi_i2d>
 8008e86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008e88:	4b2d      	ldr	r3, [pc, #180]	@ (8008f40 <__ieee754_pow+0x798>)
 8008e8a:	4413      	add	r3, r2
 8008e8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e90:	4606      	mov	r6, r0
 8008e92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e96:	460f      	mov	r7, r1
 8008e98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e9c:	f7f7 f9ee 	bl	800027c <__adddf3>
 8008ea0:	4642      	mov	r2, r8
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	f7f7 f9ea 	bl	800027c <__adddf3>
 8008ea8:	4632      	mov	r2, r6
 8008eaa:	463b      	mov	r3, r7
 8008eac:	f7f7 f9e6 	bl	800027c <__adddf3>
 8008eb0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008eb4:	4632      	mov	r2, r6
 8008eb6:	463b      	mov	r3, r7
 8008eb8:	4658      	mov	r0, fp
 8008eba:	460d      	mov	r5, r1
 8008ebc:	f7f7 f9dc 	bl	8000278 <__aeabi_dsub>
 8008ec0:	4642      	mov	r2, r8
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	f7f7 f9d8 	bl	8000278 <__aeabi_dsub>
 8008ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ecc:	f7f7 f9d4 	bl	8000278 <__aeabi_dsub>
 8008ed0:	465c      	mov	r4, fp
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	e036      	b.n	8008f44 <__ieee754_pow+0x79c>
 8008ed6:	bf00      	nop
 8008ed8:	4a454eef 	.word	0x4a454eef
 8008edc:	3fca7e28 	.word	0x3fca7e28
 8008ee0:	93c9db65 	.word	0x93c9db65
 8008ee4:	3fcd864a 	.word	0x3fcd864a
 8008ee8:	a91d4101 	.word	0xa91d4101
 8008eec:	3fd17460 	.word	0x3fd17460
 8008ef0:	518f264d 	.word	0x518f264d
 8008ef4:	3fd55555 	.word	0x3fd55555
 8008ef8:	db6fabff 	.word	0xdb6fabff
 8008efc:	3fdb6db6 	.word	0x3fdb6db6
 8008f00:	33333303 	.word	0x33333303
 8008f04:	3fe33333 	.word	0x3fe33333
 8008f08:	e0000000 	.word	0xe0000000
 8008f0c:	3feec709 	.word	0x3feec709
 8008f10:	dc3a03fd 	.word	0xdc3a03fd
 8008f14:	3feec709 	.word	0x3feec709
 8008f18:	145b01f5 	.word	0x145b01f5
 8008f1c:	be3e2fe0 	.word	0xbe3e2fe0
 8008f20:	7ff00000 	.word	0x7ff00000
 8008f24:	43400000 	.word	0x43400000
 8008f28:	0003988e 	.word	0x0003988e
 8008f2c:	000bb679 	.word	0x000bb679
 8008f30:	080097e0 	.word	0x080097e0
 8008f34:	3ff00000 	.word	0x3ff00000
 8008f38:	40080000 	.word	0x40080000
 8008f3c:	080097c0 	.word	0x080097c0
 8008f40:	080097d0 	.word	0x080097d0
 8008f44:	460b      	mov	r3, r1
 8008f46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f4a:	e5d7      	b.n	8008afc <__ieee754_pow+0x354>
 8008f4c:	f04f 0a01 	mov.w	sl, #1
 8008f50:	e65e      	b.n	8008c10 <__ieee754_pow+0x468>
 8008f52:	a3b4      	add	r3, pc, #720	@ (adr r3, 8009224 <__ieee754_pow+0xa7c>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	4630      	mov	r0, r6
 8008f5a:	4639      	mov	r1, r7
 8008f5c:	f7f7 f98e 	bl	800027c <__adddf3>
 8008f60:	4642      	mov	r2, r8
 8008f62:	e9cd 0100 	strd	r0, r1, [sp]
 8008f66:	464b      	mov	r3, r9
 8008f68:	4620      	mov	r0, r4
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	f7f7 f984 	bl	8000278 <__aeabi_dsub>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f78:	f7f7 fdc6 	bl	8000b08 <__aeabi_dcmpgt>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	f47f ae00 	bne.w	8008b82 <__ieee754_pow+0x3da>
 8008f82:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008f86:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008f8a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008f8e:	fa43 fa0a 	asr.w	sl, r3, sl
 8008f92:	44da      	add	sl, fp
 8008f94:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008f98:	489d      	ldr	r0, [pc, #628]	@ (8009210 <__ieee754_pow+0xa68>)
 8008f9a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008f9e:	4108      	asrs	r0, r1
 8008fa0:	ea00 030a 	and.w	r3, r0, sl
 8008fa4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008fa8:	f1c1 0114 	rsb	r1, r1, #20
 8008fac:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008fb0:	fa4a fa01 	asr.w	sl, sl, r1
 8008fb4:	f1bb 0f00 	cmp.w	fp, #0
 8008fb8:	4640      	mov	r0, r8
 8008fba:	4649      	mov	r1, r9
 8008fbc:	f04f 0200 	mov.w	r2, #0
 8008fc0:	bfb8      	it	lt
 8008fc2:	f1ca 0a00 	rsblt	sl, sl, #0
 8008fc6:	f7f7 f957 	bl	8000278 <__aeabi_dsub>
 8008fca:	4680      	mov	r8, r0
 8008fcc:	4689      	mov	r9, r1
 8008fce:	4632      	mov	r2, r6
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 f951 	bl	800027c <__adddf3>
 8008fda:	2400      	movs	r4, #0
 8008fdc:	a37c      	add	r3, pc, #496	@ (adr r3, 80091d0 <__ieee754_pow+0xa28>)
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	460d      	mov	r5, r1
 8008fe6:	f7f7 faff 	bl	80005e8 <__aeabi_dmul>
 8008fea:	4642      	mov	r2, r8
 8008fec:	e9cd 0100 	strd	r0, r1, [sp]
 8008ff0:	464b      	mov	r3, r9
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	f7f7 f93f 	bl	8000278 <__aeabi_dsub>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4630      	mov	r0, r6
 8009000:	4639      	mov	r1, r7
 8009002:	f7f7 f939 	bl	8000278 <__aeabi_dsub>
 8009006:	a374      	add	r3, pc, #464	@ (adr r3, 80091d8 <__ieee754_pow+0xa30>)
 8009008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900c:	f7f7 faec 	bl	80005e8 <__aeabi_dmul>
 8009010:	a373      	add	r3, pc, #460	@ (adr r3, 80091e0 <__ieee754_pow+0xa38>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	4680      	mov	r8, r0
 8009018:	4689      	mov	r9, r1
 800901a:	4620      	mov	r0, r4
 800901c:	4629      	mov	r1, r5
 800901e:	f7f7 fae3 	bl	80005e8 <__aeabi_dmul>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	4640      	mov	r0, r8
 8009028:	4649      	mov	r1, r9
 800902a:	f7f7 f927 	bl	800027c <__adddf3>
 800902e:	4604      	mov	r4, r0
 8009030:	460d      	mov	r5, r1
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	e9dd 0100 	ldrd	r0, r1, [sp]
 800903a:	f7f7 f91f 	bl	800027c <__adddf3>
 800903e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009042:	4680      	mov	r8, r0
 8009044:	4689      	mov	r9, r1
 8009046:	f7f7 f917 	bl	8000278 <__aeabi_dsub>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4620      	mov	r0, r4
 8009050:	4629      	mov	r1, r5
 8009052:	f7f7 f911 	bl	8000278 <__aeabi_dsub>
 8009056:	4642      	mov	r2, r8
 8009058:	4606      	mov	r6, r0
 800905a:	460f      	mov	r7, r1
 800905c:	464b      	mov	r3, r9
 800905e:	4640      	mov	r0, r8
 8009060:	4649      	mov	r1, r9
 8009062:	f7f7 fac1 	bl	80005e8 <__aeabi_dmul>
 8009066:	a360      	add	r3, pc, #384	@ (adr r3, 80091e8 <__ieee754_pow+0xa40>)
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	4604      	mov	r4, r0
 800906e:	460d      	mov	r5, r1
 8009070:	f7f7 faba 	bl	80005e8 <__aeabi_dmul>
 8009074:	a35e      	add	r3, pc, #376	@ (adr r3, 80091f0 <__ieee754_pow+0xa48>)
 8009076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907a:	f7f7 f8fd 	bl	8000278 <__aeabi_dsub>
 800907e:	4622      	mov	r2, r4
 8009080:	462b      	mov	r3, r5
 8009082:	f7f7 fab1 	bl	80005e8 <__aeabi_dmul>
 8009086:	a35c      	add	r3, pc, #368	@ (adr r3, 80091f8 <__ieee754_pow+0xa50>)
 8009088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908c:	f7f7 f8f6 	bl	800027c <__adddf3>
 8009090:	4622      	mov	r2, r4
 8009092:	462b      	mov	r3, r5
 8009094:	f7f7 faa8 	bl	80005e8 <__aeabi_dmul>
 8009098:	a359      	add	r3, pc, #356	@ (adr r3, 8009200 <__ieee754_pow+0xa58>)
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	f7f7 f8eb 	bl	8000278 <__aeabi_dsub>
 80090a2:	4622      	mov	r2, r4
 80090a4:	462b      	mov	r3, r5
 80090a6:	f7f7 fa9f 	bl	80005e8 <__aeabi_dmul>
 80090aa:	a357      	add	r3, pc, #348	@ (adr r3, 8009208 <__ieee754_pow+0xa60>)
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	f7f7 f8e4 	bl	800027c <__adddf3>
 80090b4:	4622      	mov	r2, r4
 80090b6:	462b      	mov	r3, r5
 80090b8:	f7f7 fa96 	bl	80005e8 <__aeabi_dmul>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4640      	mov	r0, r8
 80090c2:	4649      	mov	r1, r9
 80090c4:	f7f7 f8d8 	bl	8000278 <__aeabi_dsub>
 80090c8:	4604      	mov	r4, r0
 80090ca:	460d      	mov	r5, r1
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4640      	mov	r0, r8
 80090d2:	4649      	mov	r1, r9
 80090d4:	f7f7 fa88 	bl	80005e8 <__aeabi_dmul>
 80090d8:	2200      	movs	r2, #0
 80090da:	e9cd 0100 	strd	r0, r1, [sp]
 80090de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80090e2:	4620      	mov	r0, r4
 80090e4:	4629      	mov	r1, r5
 80090e6:	f7f7 f8c7 	bl	8000278 <__aeabi_dsub>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090f2:	f7f7 fba3 	bl	800083c <__aeabi_ddiv>
 80090f6:	4632      	mov	r2, r6
 80090f8:	4604      	mov	r4, r0
 80090fa:	460d      	mov	r5, r1
 80090fc:	463b      	mov	r3, r7
 80090fe:	4640      	mov	r0, r8
 8009100:	4649      	mov	r1, r9
 8009102:	f7f7 fa71 	bl	80005e8 <__aeabi_dmul>
 8009106:	4632      	mov	r2, r6
 8009108:	463b      	mov	r3, r7
 800910a:	f7f7 f8b7 	bl	800027c <__adddf3>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4620      	mov	r0, r4
 8009114:	4629      	mov	r1, r5
 8009116:	f7f7 f8af 	bl	8000278 <__aeabi_dsub>
 800911a:	4642      	mov	r2, r8
 800911c:	464b      	mov	r3, r9
 800911e:	f7f7 f8ab 	bl	8000278 <__aeabi_dsub>
 8009122:	460b      	mov	r3, r1
 8009124:	4602      	mov	r2, r0
 8009126:	493b      	ldr	r1, [pc, #236]	@ (8009214 <__ieee754_pow+0xa6c>)
 8009128:	2000      	movs	r0, #0
 800912a:	f7f7 f8a5 	bl	8000278 <__aeabi_dsub>
 800912e:	ec41 0b10 	vmov	d0, r0, r1
 8009132:	ee10 3a90 	vmov	r3, s1
 8009136:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800913a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800913e:	da30      	bge.n	80091a2 <__ieee754_pow+0x9fa>
 8009140:	4650      	mov	r0, sl
 8009142:	f000 fa15 	bl	8009570 <scalbn>
 8009146:	ec51 0b10 	vmov	r0, r1, d0
 800914a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800914e:	f7ff bbd2 	b.w	80088f6 <__ieee754_pow+0x14e>
 8009152:	4c31      	ldr	r4, [pc, #196]	@ (8009218 <__ieee754_pow+0xa70>)
 8009154:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009158:	42a3      	cmp	r3, r4
 800915a:	d91a      	bls.n	8009192 <__ieee754_pow+0x9ea>
 800915c:	4b2f      	ldr	r3, [pc, #188]	@ (800921c <__ieee754_pow+0xa74>)
 800915e:	440b      	add	r3, r1
 8009160:	4303      	orrs	r3, r0
 8009162:	d009      	beq.n	8009178 <__ieee754_pow+0x9d0>
 8009164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009168:	2200      	movs	r2, #0
 800916a:	2300      	movs	r3, #0
 800916c:	f7f7 fcae 	bl	8000acc <__aeabi_dcmplt>
 8009170:	3800      	subs	r0, #0
 8009172:	bf18      	it	ne
 8009174:	2001      	movne	r0, #1
 8009176:	e42b      	b.n	80089d0 <__ieee754_pow+0x228>
 8009178:	4642      	mov	r2, r8
 800917a:	464b      	mov	r3, r9
 800917c:	f7f7 f87c 	bl	8000278 <__aeabi_dsub>
 8009180:	4632      	mov	r2, r6
 8009182:	463b      	mov	r3, r7
 8009184:	f7f7 fcb6 	bl	8000af4 <__aeabi_dcmpge>
 8009188:	2800      	cmp	r0, #0
 800918a:	d1eb      	bne.n	8009164 <__ieee754_pow+0x9bc>
 800918c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800922c <__ieee754_pow+0xa84>
 8009190:	e6f7      	b.n	8008f82 <__ieee754_pow+0x7da>
 8009192:	469a      	mov	sl, r3
 8009194:	4b22      	ldr	r3, [pc, #136]	@ (8009220 <__ieee754_pow+0xa78>)
 8009196:	459a      	cmp	sl, r3
 8009198:	f63f aef3 	bhi.w	8008f82 <__ieee754_pow+0x7da>
 800919c:	f8dd a010 	ldr.w	sl, [sp, #16]
 80091a0:	e715      	b.n	8008fce <__ieee754_pow+0x826>
 80091a2:	ec51 0b10 	vmov	r0, r1, d0
 80091a6:	4619      	mov	r1, r3
 80091a8:	e7cf      	b.n	800914a <__ieee754_pow+0x9a2>
 80091aa:	491a      	ldr	r1, [pc, #104]	@ (8009214 <__ieee754_pow+0xa6c>)
 80091ac:	2000      	movs	r0, #0
 80091ae:	f7ff bb18 	b.w	80087e2 <__ieee754_pow+0x3a>
 80091b2:	2000      	movs	r0, #0
 80091b4:	2100      	movs	r1, #0
 80091b6:	f7ff bb14 	b.w	80087e2 <__ieee754_pow+0x3a>
 80091ba:	4630      	mov	r0, r6
 80091bc:	4639      	mov	r1, r7
 80091be:	f7ff bb10 	b.w	80087e2 <__ieee754_pow+0x3a>
 80091c2:	460c      	mov	r4, r1
 80091c4:	f7ff bb5e 	b.w	8008884 <__ieee754_pow+0xdc>
 80091c8:	2400      	movs	r4, #0
 80091ca:	f7ff bb49 	b.w	8008860 <__ieee754_pow+0xb8>
 80091ce:	bf00      	nop
 80091d0:	00000000 	.word	0x00000000
 80091d4:	3fe62e43 	.word	0x3fe62e43
 80091d8:	fefa39ef 	.word	0xfefa39ef
 80091dc:	3fe62e42 	.word	0x3fe62e42
 80091e0:	0ca86c39 	.word	0x0ca86c39
 80091e4:	be205c61 	.word	0xbe205c61
 80091e8:	72bea4d0 	.word	0x72bea4d0
 80091ec:	3e663769 	.word	0x3e663769
 80091f0:	c5d26bf1 	.word	0xc5d26bf1
 80091f4:	3ebbbd41 	.word	0x3ebbbd41
 80091f8:	af25de2c 	.word	0xaf25de2c
 80091fc:	3f11566a 	.word	0x3f11566a
 8009200:	16bebd93 	.word	0x16bebd93
 8009204:	3f66c16c 	.word	0x3f66c16c
 8009208:	5555553e 	.word	0x5555553e
 800920c:	3fc55555 	.word	0x3fc55555
 8009210:	fff00000 	.word	0xfff00000
 8009214:	3ff00000 	.word	0x3ff00000
 8009218:	4090cbff 	.word	0x4090cbff
 800921c:	3f6f3400 	.word	0x3f6f3400
 8009220:	3fe00000 	.word	0x3fe00000
 8009224:	652b82fe 	.word	0x652b82fe
 8009228:	3c971547 	.word	0x3c971547
 800922c:	4090cc00 	.word	0x4090cc00

08009230 <atan>:
 8009230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	ec55 4b10 	vmov	r4, r5, d0
 8009238:	4bbf      	ldr	r3, [pc, #764]	@ (8009538 <atan+0x308>)
 800923a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800923e:	429e      	cmp	r6, r3
 8009240:	46ab      	mov	fp, r5
 8009242:	d918      	bls.n	8009276 <atan+0x46>
 8009244:	4bbd      	ldr	r3, [pc, #756]	@ (800953c <atan+0x30c>)
 8009246:	429e      	cmp	r6, r3
 8009248:	d801      	bhi.n	800924e <atan+0x1e>
 800924a:	d109      	bne.n	8009260 <atan+0x30>
 800924c:	b144      	cbz	r4, 8009260 <atan+0x30>
 800924e:	4622      	mov	r2, r4
 8009250:	462b      	mov	r3, r5
 8009252:	4620      	mov	r0, r4
 8009254:	4629      	mov	r1, r5
 8009256:	f7f7 f811 	bl	800027c <__adddf3>
 800925a:	4604      	mov	r4, r0
 800925c:	460d      	mov	r5, r1
 800925e:	e006      	b.n	800926e <atan+0x3e>
 8009260:	f1bb 0f00 	cmp.w	fp, #0
 8009264:	f340 812b 	ble.w	80094be <atan+0x28e>
 8009268:	a597      	add	r5, pc, #604	@ (adr r5, 80094c8 <atan+0x298>)
 800926a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800926e:	ec45 4b10 	vmov	d0, r4, r5
 8009272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009276:	4bb2      	ldr	r3, [pc, #712]	@ (8009540 <atan+0x310>)
 8009278:	429e      	cmp	r6, r3
 800927a:	d813      	bhi.n	80092a4 <atan+0x74>
 800927c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009280:	429e      	cmp	r6, r3
 8009282:	d80c      	bhi.n	800929e <atan+0x6e>
 8009284:	a392      	add	r3, pc, #584	@ (adr r3, 80094d0 <atan+0x2a0>)
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	4620      	mov	r0, r4
 800928c:	4629      	mov	r1, r5
 800928e:	f7f6 fff5 	bl	800027c <__adddf3>
 8009292:	4bac      	ldr	r3, [pc, #688]	@ (8009544 <atan+0x314>)
 8009294:	2200      	movs	r2, #0
 8009296:	f7f7 fc37 	bl	8000b08 <__aeabi_dcmpgt>
 800929a:	2800      	cmp	r0, #0
 800929c:	d1e7      	bne.n	800926e <atan+0x3e>
 800929e:	f04f 3aff 	mov.w	sl, #4294967295
 80092a2:	e029      	b.n	80092f8 <atan+0xc8>
 80092a4:	f000 f95c 	bl	8009560 <fabs>
 80092a8:	4ba7      	ldr	r3, [pc, #668]	@ (8009548 <atan+0x318>)
 80092aa:	429e      	cmp	r6, r3
 80092ac:	ec55 4b10 	vmov	r4, r5, d0
 80092b0:	f200 80bc 	bhi.w	800942c <atan+0x1fc>
 80092b4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80092b8:	429e      	cmp	r6, r3
 80092ba:	f200 809e 	bhi.w	80093fa <atan+0x1ca>
 80092be:	4622      	mov	r2, r4
 80092c0:	462b      	mov	r3, r5
 80092c2:	4620      	mov	r0, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7f6 ffd9 	bl	800027c <__adddf3>
 80092ca:	4b9e      	ldr	r3, [pc, #632]	@ (8009544 <atan+0x314>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	f7f6 ffd3 	bl	8000278 <__aeabi_dsub>
 80092d2:	2200      	movs	r2, #0
 80092d4:	4606      	mov	r6, r0
 80092d6:	460f      	mov	r7, r1
 80092d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80092dc:	4620      	mov	r0, r4
 80092de:	4629      	mov	r1, r5
 80092e0:	f7f6 ffcc 	bl	800027c <__adddf3>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4630      	mov	r0, r6
 80092ea:	4639      	mov	r1, r7
 80092ec:	f7f7 faa6 	bl	800083c <__aeabi_ddiv>
 80092f0:	f04f 0a00 	mov.w	sl, #0
 80092f4:	4604      	mov	r4, r0
 80092f6:	460d      	mov	r5, r1
 80092f8:	4622      	mov	r2, r4
 80092fa:	462b      	mov	r3, r5
 80092fc:	4620      	mov	r0, r4
 80092fe:	4629      	mov	r1, r5
 8009300:	f7f7 f972 	bl	80005e8 <__aeabi_dmul>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4680      	mov	r8, r0
 800930a:	4689      	mov	r9, r1
 800930c:	f7f7 f96c 	bl	80005e8 <__aeabi_dmul>
 8009310:	a371      	add	r3, pc, #452	@ (adr r3, 80094d8 <atan+0x2a8>)
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	4606      	mov	r6, r0
 8009318:	460f      	mov	r7, r1
 800931a:	f7f7 f965 	bl	80005e8 <__aeabi_dmul>
 800931e:	a370      	add	r3, pc, #448	@ (adr r3, 80094e0 <atan+0x2b0>)
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	f7f6 ffaa 	bl	800027c <__adddf3>
 8009328:	4632      	mov	r2, r6
 800932a:	463b      	mov	r3, r7
 800932c:	f7f7 f95c 	bl	80005e8 <__aeabi_dmul>
 8009330:	a36d      	add	r3, pc, #436	@ (adr r3, 80094e8 <atan+0x2b8>)
 8009332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009336:	f7f6 ffa1 	bl	800027c <__adddf3>
 800933a:	4632      	mov	r2, r6
 800933c:	463b      	mov	r3, r7
 800933e:	f7f7 f953 	bl	80005e8 <__aeabi_dmul>
 8009342:	a36b      	add	r3, pc, #428	@ (adr r3, 80094f0 <atan+0x2c0>)
 8009344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009348:	f7f6 ff98 	bl	800027c <__adddf3>
 800934c:	4632      	mov	r2, r6
 800934e:	463b      	mov	r3, r7
 8009350:	f7f7 f94a 	bl	80005e8 <__aeabi_dmul>
 8009354:	a368      	add	r3, pc, #416	@ (adr r3, 80094f8 <atan+0x2c8>)
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	f7f6 ff8f 	bl	800027c <__adddf3>
 800935e:	4632      	mov	r2, r6
 8009360:	463b      	mov	r3, r7
 8009362:	f7f7 f941 	bl	80005e8 <__aeabi_dmul>
 8009366:	a366      	add	r3, pc, #408	@ (adr r3, 8009500 <atan+0x2d0>)
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	f7f6 ff86 	bl	800027c <__adddf3>
 8009370:	4642      	mov	r2, r8
 8009372:	464b      	mov	r3, r9
 8009374:	f7f7 f938 	bl	80005e8 <__aeabi_dmul>
 8009378:	a363      	add	r3, pc, #396	@ (adr r3, 8009508 <atan+0x2d8>)
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	4680      	mov	r8, r0
 8009380:	4689      	mov	r9, r1
 8009382:	4630      	mov	r0, r6
 8009384:	4639      	mov	r1, r7
 8009386:	f7f7 f92f 	bl	80005e8 <__aeabi_dmul>
 800938a:	a361      	add	r3, pc, #388	@ (adr r3, 8009510 <atan+0x2e0>)
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f7f6 ff72 	bl	8000278 <__aeabi_dsub>
 8009394:	4632      	mov	r2, r6
 8009396:	463b      	mov	r3, r7
 8009398:	f7f7 f926 	bl	80005e8 <__aeabi_dmul>
 800939c:	a35e      	add	r3, pc, #376	@ (adr r3, 8009518 <atan+0x2e8>)
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f7f6 ff69 	bl	8000278 <__aeabi_dsub>
 80093a6:	4632      	mov	r2, r6
 80093a8:	463b      	mov	r3, r7
 80093aa:	f7f7 f91d 	bl	80005e8 <__aeabi_dmul>
 80093ae:	a35c      	add	r3, pc, #368	@ (adr r3, 8009520 <atan+0x2f0>)
 80093b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b4:	f7f6 ff60 	bl	8000278 <__aeabi_dsub>
 80093b8:	4632      	mov	r2, r6
 80093ba:	463b      	mov	r3, r7
 80093bc:	f7f7 f914 	bl	80005e8 <__aeabi_dmul>
 80093c0:	a359      	add	r3, pc, #356	@ (adr r3, 8009528 <atan+0x2f8>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f6 ff57 	bl	8000278 <__aeabi_dsub>
 80093ca:	4632      	mov	r2, r6
 80093cc:	463b      	mov	r3, r7
 80093ce:	f7f7 f90b 	bl	80005e8 <__aeabi_dmul>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4640      	mov	r0, r8
 80093d8:	4649      	mov	r1, r9
 80093da:	f7f6 ff4f 	bl	800027c <__adddf3>
 80093de:	4622      	mov	r2, r4
 80093e0:	462b      	mov	r3, r5
 80093e2:	f7f7 f901 	bl	80005e8 <__aeabi_dmul>
 80093e6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	d148      	bne.n	8009482 <atan+0x252>
 80093f0:	4620      	mov	r0, r4
 80093f2:	4629      	mov	r1, r5
 80093f4:	f7f6 ff40 	bl	8000278 <__aeabi_dsub>
 80093f8:	e72f      	b.n	800925a <atan+0x2a>
 80093fa:	4b52      	ldr	r3, [pc, #328]	@ (8009544 <atan+0x314>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	4620      	mov	r0, r4
 8009400:	4629      	mov	r1, r5
 8009402:	f7f6 ff39 	bl	8000278 <__aeabi_dsub>
 8009406:	4b4f      	ldr	r3, [pc, #316]	@ (8009544 <atan+0x314>)
 8009408:	4606      	mov	r6, r0
 800940a:	460f      	mov	r7, r1
 800940c:	2200      	movs	r2, #0
 800940e:	4620      	mov	r0, r4
 8009410:	4629      	mov	r1, r5
 8009412:	f7f6 ff33 	bl	800027c <__adddf3>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4630      	mov	r0, r6
 800941c:	4639      	mov	r1, r7
 800941e:	f7f7 fa0d 	bl	800083c <__aeabi_ddiv>
 8009422:	f04f 0a01 	mov.w	sl, #1
 8009426:	4604      	mov	r4, r0
 8009428:	460d      	mov	r5, r1
 800942a:	e765      	b.n	80092f8 <atan+0xc8>
 800942c:	4b47      	ldr	r3, [pc, #284]	@ (800954c <atan+0x31c>)
 800942e:	429e      	cmp	r6, r3
 8009430:	d21c      	bcs.n	800946c <atan+0x23c>
 8009432:	4b47      	ldr	r3, [pc, #284]	@ (8009550 <atan+0x320>)
 8009434:	2200      	movs	r2, #0
 8009436:	4620      	mov	r0, r4
 8009438:	4629      	mov	r1, r5
 800943a:	f7f6 ff1d 	bl	8000278 <__aeabi_dsub>
 800943e:	4b44      	ldr	r3, [pc, #272]	@ (8009550 <atan+0x320>)
 8009440:	4606      	mov	r6, r0
 8009442:	460f      	mov	r7, r1
 8009444:	2200      	movs	r2, #0
 8009446:	4620      	mov	r0, r4
 8009448:	4629      	mov	r1, r5
 800944a:	f7f7 f8cd 	bl	80005e8 <__aeabi_dmul>
 800944e:	4b3d      	ldr	r3, [pc, #244]	@ (8009544 <atan+0x314>)
 8009450:	2200      	movs	r2, #0
 8009452:	f7f6 ff13 	bl	800027c <__adddf3>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4630      	mov	r0, r6
 800945c:	4639      	mov	r1, r7
 800945e:	f7f7 f9ed 	bl	800083c <__aeabi_ddiv>
 8009462:	f04f 0a02 	mov.w	sl, #2
 8009466:	4604      	mov	r4, r0
 8009468:	460d      	mov	r5, r1
 800946a:	e745      	b.n	80092f8 <atan+0xc8>
 800946c:	4622      	mov	r2, r4
 800946e:	462b      	mov	r3, r5
 8009470:	4938      	ldr	r1, [pc, #224]	@ (8009554 <atan+0x324>)
 8009472:	2000      	movs	r0, #0
 8009474:	f7f7 f9e2 	bl	800083c <__aeabi_ddiv>
 8009478:	f04f 0a03 	mov.w	sl, #3
 800947c:	4604      	mov	r4, r0
 800947e:	460d      	mov	r5, r1
 8009480:	e73a      	b.n	80092f8 <atan+0xc8>
 8009482:	4b35      	ldr	r3, [pc, #212]	@ (8009558 <atan+0x328>)
 8009484:	4e35      	ldr	r6, [pc, #212]	@ (800955c <atan+0x32c>)
 8009486:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	f7f6 fef3 	bl	8000278 <__aeabi_dsub>
 8009492:	4622      	mov	r2, r4
 8009494:	462b      	mov	r3, r5
 8009496:	f7f6 feef 	bl	8000278 <__aeabi_dsub>
 800949a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80094a6:	f7f6 fee7 	bl	8000278 <__aeabi_dsub>
 80094aa:	f1bb 0f00 	cmp.w	fp, #0
 80094ae:	4604      	mov	r4, r0
 80094b0:	460d      	mov	r5, r1
 80094b2:	f6bf aedc 	bge.w	800926e <atan+0x3e>
 80094b6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80094ba:	461d      	mov	r5, r3
 80094bc:	e6d7      	b.n	800926e <atan+0x3e>
 80094be:	a51c      	add	r5, pc, #112	@ (adr r5, 8009530 <atan+0x300>)
 80094c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094c4:	e6d3      	b.n	800926e <atan+0x3e>
 80094c6:	bf00      	nop
 80094c8:	54442d18 	.word	0x54442d18
 80094cc:	3ff921fb 	.word	0x3ff921fb
 80094d0:	8800759c 	.word	0x8800759c
 80094d4:	7e37e43c 	.word	0x7e37e43c
 80094d8:	e322da11 	.word	0xe322da11
 80094dc:	3f90ad3a 	.word	0x3f90ad3a
 80094e0:	24760deb 	.word	0x24760deb
 80094e4:	3fa97b4b 	.word	0x3fa97b4b
 80094e8:	a0d03d51 	.word	0xa0d03d51
 80094ec:	3fb10d66 	.word	0x3fb10d66
 80094f0:	c54c206e 	.word	0xc54c206e
 80094f4:	3fb745cd 	.word	0x3fb745cd
 80094f8:	920083ff 	.word	0x920083ff
 80094fc:	3fc24924 	.word	0x3fc24924
 8009500:	5555550d 	.word	0x5555550d
 8009504:	3fd55555 	.word	0x3fd55555
 8009508:	2c6a6c2f 	.word	0x2c6a6c2f
 800950c:	bfa2b444 	.word	0xbfa2b444
 8009510:	52defd9a 	.word	0x52defd9a
 8009514:	3fadde2d 	.word	0x3fadde2d
 8009518:	af749a6d 	.word	0xaf749a6d
 800951c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009520:	fe231671 	.word	0xfe231671
 8009524:	3fbc71c6 	.word	0x3fbc71c6
 8009528:	9998ebc4 	.word	0x9998ebc4
 800952c:	3fc99999 	.word	0x3fc99999
 8009530:	54442d18 	.word	0x54442d18
 8009534:	bff921fb 	.word	0xbff921fb
 8009538:	440fffff 	.word	0x440fffff
 800953c:	7ff00000 	.word	0x7ff00000
 8009540:	3fdbffff 	.word	0x3fdbffff
 8009544:	3ff00000 	.word	0x3ff00000
 8009548:	3ff2ffff 	.word	0x3ff2ffff
 800954c:	40038000 	.word	0x40038000
 8009550:	3ff80000 	.word	0x3ff80000
 8009554:	bff00000 	.word	0xbff00000
 8009558:	080097f0 	.word	0x080097f0
 800955c:	08009810 	.word	0x08009810

08009560 <fabs>:
 8009560:	ec51 0b10 	vmov	r0, r1, d0
 8009564:	4602      	mov	r2, r0
 8009566:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800956a:	ec43 2b10 	vmov	d0, r2, r3
 800956e:	4770      	bx	lr

08009570 <scalbn>:
 8009570:	b570      	push	{r4, r5, r6, lr}
 8009572:	ec55 4b10 	vmov	r4, r5, d0
 8009576:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800957a:	4606      	mov	r6, r0
 800957c:	462b      	mov	r3, r5
 800957e:	b991      	cbnz	r1, 80095a6 <scalbn+0x36>
 8009580:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009584:	4323      	orrs	r3, r4
 8009586:	d03d      	beq.n	8009604 <scalbn+0x94>
 8009588:	4b35      	ldr	r3, [pc, #212]	@ (8009660 <scalbn+0xf0>)
 800958a:	4620      	mov	r0, r4
 800958c:	4629      	mov	r1, r5
 800958e:	2200      	movs	r2, #0
 8009590:	f7f7 f82a 	bl	80005e8 <__aeabi_dmul>
 8009594:	4b33      	ldr	r3, [pc, #204]	@ (8009664 <scalbn+0xf4>)
 8009596:	429e      	cmp	r6, r3
 8009598:	4604      	mov	r4, r0
 800959a:	460d      	mov	r5, r1
 800959c:	da0f      	bge.n	80095be <scalbn+0x4e>
 800959e:	a328      	add	r3, pc, #160	@ (adr r3, 8009640 <scalbn+0xd0>)
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	e01e      	b.n	80095e4 <scalbn+0x74>
 80095a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80095aa:	4291      	cmp	r1, r2
 80095ac:	d10b      	bne.n	80095c6 <scalbn+0x56>
 80095ae:	4622      	mov	r2, r4
 80095b0:	4620      	mov	r0, r4
 80095b2:	4629      	mov	r1, r5
 80095b4:	f7f6 fe62 	bl	800027c <__adddf3>
 80095b8:	4604      	mov	r4, r0
 80095ba:	460d      	mov	r5, r1
 80095bc:	e022      	b.n	8009604 <scalbn+0x94>
 80095be:	460b      	mov	r3, r1
 80095c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80095c4:	3936      	subs	r1, #54	@ 0x36
 80095c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80095ca:	4296      	cmp	r6, r2
 80095cc:	dd0d      	ble.n	80095ea <scalbn+0x7a>
 80095ce:	2d00      	cmp	r5, #0
 80095d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8009648 <scalbn+0xd8>)
 80095d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d6:	da02      	bge.n	80095de <scalbn+0x6e>
 80095d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8009650 <scalbn+0xe0>)
 80095da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095de:	a31a      	add	r3, pc, #104	@ (adr r3, 8009648 <scalbn+0xd8>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	f7f7 f800 	bl	80005e8 <__aeabi_dmul>
 80095e8:	e7e6      	b.n	80095b8 <scalbn+0x48>
 80095ea:	1872      	adds	r2, r6, r1
 80095ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80095f0:	428a      	cmp	r2, r1
 80095f2:	dcec      	bgt.n	80095ce <scalbn+0x5e>
 80095f4:	2a00      	cmp	r2, #0
 80095f6:	dd08      	ble.n	800960a <scalbn+0x9a>
 80095f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80095fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009600:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009604:	ec45 4b10 	vmov	d0, r4, r5
 8009608:	bd70      	pop	{r4, r5, r6, pc}
 800960a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800960e:	da08      	bge.n	8009622 <scalbn+0xb2>
 8009610:	2d00      	cmp	r5, #0
 8009612:	a10b      	add	r1, pc, #44	@ (adr r1, 8009640 <scalbn+0xd0>)
 8009614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009618:	dac1      	bge.n	800959e <scalbn+0x2e>
 800961a:	a10f      	add	r1, pc, #60	@ (adr r1, 8009658 <scalbn+0xe8>)
 800961c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009620:	e7bd      	b.n	800959e <scalbn+0x2e>
 8009622:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009626:	3236      	adds	r2, #54	@ 0x36
 8009628:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800962c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009630:	4620      	mov	r0, r4
 8009632:	4b0d      	ldr	r3, [pc, #52]	@ (8009668 <scalbn+0xf8>)
 8009634:	4629      	mov	r1, r5
 8009636:	2200      	movs	r2, #0
 8009638:	e7d4      	b.n	80095e4 <scalbn+0x74>
 800963a:	bf00      	nop
 800963c:	f3af 8000 	nop.w
 8009640:	c2f8f359 	.word	0xc2f8f359
 8009644:	01a56e1f 	.word	0x01a56e1f
 8009648:	8800759c 	.word	0x8800759c
 800964c:	7e37e43c 	.word	0x7e37e43c
 8009650:	8800759c 	.word	0x8800759c
 8009654:	fe37e43c 	.word	0xfe37e43c
 8009658:	c2f8f359 	.word	0xc2f8f359
 800965c:	81a56e1f 	.word	0x81a56e1f
 8009660:	43500000 	.word	0x43500000
 8009664:	ffff3cb0 	.word	0xffff3cb0
 8009668:	3c900000 	.word	0x3c900000

0800966c <with_errno>:
 800966c:	b510      	push	{r4, lr}
 800966e:	ed2d 8b02 	vpush	{d8}
 8009672:	eeb0 8a40 	vmov.f32	s16, s0
 8009676:	eef0 8a60 	vmov.f32	s17, s1
 800967a:	4604      	mov	r4, r0
 800967c:	f7fe f8aa 	bl	80077d4 <__errno>
 8009680:	eeb0 0a48 	vmov.f32	s0, s16
 8009684:	eef0 0a68 	vmov.f32	s1, s17
 8009688:	ecbd 8b02 	vpop	{d8}
 800968c:	6004      	str	r4, [r0, #0]
 800968e:	bd10      	pop	{r4, pc}

08009690 <xflow>:
 8009690:	4603      	mov	r3, r0
 8009692:	b507      	push	{r0, r1, r2, lr}
 8009694:	ec51 0b10 	vmov	r0, r1, d0
 8009698:	b183      	cbz	r3, 80096bc <xflow+0x2c>
 800969a:	4602      	mov	r2, r0
 800969c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80096a0:	e9cd 2300 	strd	r2, r3, [sp]
 80096a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096a8:	f7f6 ff9e 	bl	80005e8 <__aeabi_dmul>
 80096ac:	ec41 0b10 	vmov	d0, r0, r1
 80096b0:	2022      	movs	r0, #34	@ 0x22
 80096b2:	b003      	add	sp, #12
 80096b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096b8:	f7ff bfd8 	b.w	800966c <with_errno>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	e7ee      	b.n	80096a0 <xflow+0x10>
 80096c2:	0000      	movs	r0, r0
 80096c4:	0000      	movs	r0, r0
	...

080096c8 <__math_uflow>:
 80096c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80096d0 <__math_uflow+0x8>
 80096cc:	f7ff bfe0 	b.w	8009690 <xflow>
 80096d0:	00000000 	.word	0x00000000
 80096d4:	10000000 	.word	0x10000000

080096d8 <__math_oflow>:
 80096d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80096e0 <__math_oflow+0x8>
 80096dc:	f7ff bfd8 	b.w	8009690 <xflow>
 80096e0:	00000000 	.word	0x00000000
 80096e4:	70000000 	.word	0x70000000

080096e8 <_init>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	bf00      	nop
 80096ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ee:	bc08      	pop	{r3}
 80096f0:	469e      	mov	lr, r3
 80096f2:	4770      	bx	lr

080096f4 <_fini>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	bf00      	nop
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr
