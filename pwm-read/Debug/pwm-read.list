
pwm-read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c18  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003da0  08003da0  00004da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db8  08003db8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003db8  08003db8  00004db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dc0  08003dc0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc0  08003dc0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dc4  08003dc4  00004dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003dc8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000001c8  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ffe  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001605  00000000  00000000  0000e03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  0000f640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000075c  00000000  00000000  0000ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb2a  00000000  00000000  0001071c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a7cd  00000000  00000000  00030246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4f34  00000000  00000000  0003aa13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff947  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002790  00000000  00000000  000ff98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0010211c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d88 	.word	0x08003d88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d88 	.word	0x08003d88

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_TIM_IC_CaptureCallback>:
volatile uint32_t Frequency_CH3 = 0, Frequency_CH4 = 0;
volatile uint32_t Frequency_CH5 = 0, Frequency_CH6 = 0;
volatile uint32_t Frequency_CH7 = 0, Frequency_CH8 = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]

	if(htim ==&htim2)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a83      	ldr	r2, [pc, #524]	@ (80006d0 <HAL_TIM_IC_CaptureCallback+0x218>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	f040 81ad 	bne.w	8000824 <HAL_TIM_IC_CaptureCallback+0x36c>
	{

	/* Channel 1 */
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	7f1b      	ldrb	r3, [r3, #28]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d15e      	bne.n	8000590 <HAL_TIM_IC_CaptureCallback+0xd8>
	    {
	        if (Is_First_Captured_CH1 == 0)
 80004d2:	4b80      	ldr	r3, [pc, #512]	@ (80006d4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d11a      	bne.n	8000510 <HAL_TIM_IC_CaptureCallback+0x58>
	        {
	            IC_Val1_CH1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80004da:	2100      	movs	r1, #0
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f002 fee5 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a7c      	ldr	r2, [pc, #496]	@ (80006d8 <HAL_TIM_IC_CaptureCallback+0x220>)
 80004e6:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH1 = 1;
 80004e8:	4b7a      	ldr	r3, [pc, #488]	@ (80006d4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6a1a      	ldr	r2, [r3, #32]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f022 020a 	bic.w	r2, r2, #10
 80004fc:	621a      	str	r2, [r3, #32]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	6a1a      	ldr	r2, [r3, #32]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f042 0202 	orr.w	r2, r2, #2
 800050c:	621a      	str	r2, [r3, #32]
 800050e:	e03f      	b.n	8000590 <HAL_TIM_IC_CaptureCallback+0xd8>
	        }
	        else
	        {
	            IC_Val2_CH1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000510:	2100      	movs	r1, #0
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f002 feca 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 8000518:	4603      	mov	r3, r0
 800051a:	4a70      	ldr	r2, [pc, #448]	@ (80006dc <HAL_TIM_IC_CaptureCallback+0x224>)
 800051c:	6013      	str	r3, [r2, #0]
	            __HAL_TIM_SET_COUNTER(htim, 0);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	@ 0x24

	            if (IC_Val2_CH1 > IC_Val1_CH1)
 8000526:	4b6d      	ldr	r3, [pc, #436]	@ (80006dc <HAL_TIM_IC_CaptureCallback+0x224>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b6b      	ldr	r3, [pc, #428]	@ (80006d8 <HAL_TIM_IC_CaptureCallback+0x220>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	429a      	cmp	r2, r3
 8000530:	d907      	bls.n	8000542 <HAL_TIM_IC_CaptureCallback+0x8a>
	            	{
	            		Difference_CH1 = IC_Val2_CH1 - IC_Val1_CH1;
 8000532:	4b6a      	ldr	r3, [pc, #424]	@ (80006dc <HAL_TIM_IC_CaptureCallback+0x224>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b68      	ldr	r3, [pc, #416]	@ (80006d8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	4a68      	ldr	r2, [pc, #416]	@ (80006e0 <HAL_TIM_IC_CaptureCallback+0x228>)
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	e008      	b.n	8000554 <HAL_TIM_IC_CaptureCallback+0x9c>
	                 }
	            else
	                {
	                            Difference_CH1 = (0xFFFF - IC_Val1_CH1) + IC_Val2_CH1 + 1;
 8000542:	4b66      	ldr	r3, [pc, #408]	@ (80006dc <HAL_TIM_IC_CaptureCallback+0x224>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	4b64      	ldr	r3, [pc, #400]	@ (80006d8 <HAL_TIM_IC_CaptureCallback+0x220>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000550:	4a63      	ldr	r2, [pc, #396]	@ (80006e0 <HAL_TIM_IC_CaptureCallback+0x228>)
 8000552:	6013      	str	r3, [r2, #0]
	                }
	            Frequency_CH1 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH1);
 8000554:	f002 f88e 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 8000558:	4603      	mov	r3, r0
 800055a:	005a      	lsls	r2, r3, #1
 800055c:	4b60      	ldr	r3, [pc, #384]	@ (80006e0 <HAL_TIM_IC_CaptureCallback+0x228>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	212a      	movs	r1, #42	@ 0x2a
 8000562:	fb01 f303 	mul.w	r3, r1, r3
 8000566:	fbb2 f3f3 	udiv	r3, r2, r3
 800056a:	4a5e      	ldr	r2, [pc, #376]	@ (80006e4 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800056c:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH1 = 0;
 800056e:	4b59      	ldr	r3, [pc, #356]	@ (80006d4 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6a1a      	ldr	r2, [r3, #32]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f022 020a 	bic.w	r2, r2, #10
 8000582:	621a      	str	r2, [r3, #32]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	6a12      	ldr	r2, [r2, #32]
 800058e:	621a      	str	r2, [r3, #32]
	        }
	    }

	    /* Channel 2 */
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	7f1b      	ldrb	r3, [r3, #28]
 8000594:	2b02      	cmp	r3, #2
 8000596:	d15e      	bne.n	8000656 <HAL_TIM_IC_CaptureCallback+0x19e>
	    {
	        if (Is_First_Captured_CH2 == 0)
 8000598:	4b53      	ldr	r3, [pc, #332]	@ (80006e8 <HAL_TIM_IC_CaptureCallback+0x230>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d11a      	bne.n	80005d6 <HAL_TIM_IC_CaptureCallback+0x11e>
	        {
	            IC_Val1_CH2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80005a0:	2104      	movs	r1, #4
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f002 fe82 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a50      	ldr	r2, [pc, #320]	@ (80006ec <HAL_TIM_IC_CaptureCallback+0x234>)
 80005ac:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH2 = 1;
 80005ae:	4b4e      	ldr	r3, [pc, #312]	@ (80006e8 <HAL_TIM_IC_CaptureCallback+0x230>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6a1a      	ldr	r2, [r3, #32]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80005c2:	621a      	str	r2, [r3, #32]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6a1a      	ldr	r2, [r3, #32]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f042 0220 	orr.w	r2, r2, #32
 80005d2:	621a      	str	r2, [r3, #32]
 80005d4:	e03f      	b.n	8000656 <HAL_TIM_IC_CaptureCallback+0x19e>
	        }
	        else
	        {
	            IC_Val2_CH2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80005d6:	2104      	movs	r1, #4
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f002 fe67 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a43      	ldr	r2, [pc, #268]	@ (80006f0 <HAL_TIM_IC_CaptureCallback+0x238>)
 80005e2:	6013      	str	r3, [r2, #0]
	            __HAL_TIM_SET_COUNTER(htim, 0);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2200      	movs	r2, #0
 80005ea:	625a      	str	r2, [r3, #36]	@ 0x24

	            if (IC_Val2_CH2 > IC_Val1_CH2)
 80005ec:	4b40      	ldr	r3, [pc, #256]	@ (80006f0 <HAL_TIM_IC_CaptureCallback+0x238>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b3e      	ldr	r3, [pc, #248]	@ (80006ec <HAL_TIM_IC_CaptureCallback+0x234>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d907      	bls.n	8000608 <HAL_TIM_IC_CaptureCallback+0x150>
	            	            	{
	            	            		Difference_CH2 = IC_Val2_CH2 - IC_Val1_CH2;
 80005f8:	4b3d      	ldr	r3, [pc, #244]	@ (80006f0 <HAL_TIM_IC_CaptureCallback+0x238>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b3b      	ldr	r3, [pc, #236]	@ (80006ec <HAL_TIM_IC_CaptureCallback+0x234>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	4a3c      	ldr	r2, [pc, #240]	@ (80006f4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000604:	6013      	str	r3, [r2, #0]
 8000606:	e008      	b.n	800061a <HAL_TIM_IC_CaptureCallback+0x162>
	            	                 }
	            	            else
	            	                {
	            	                            Difference_CH2 = (0xFFFF - IC_Val1_CH2) + IC_Val2_CH2 + 1;
 8000608:	4b39      	ldr	r3, [pc, #228]	@ (80006f0 <HAL_TIM_IC_CaptureCallback+0x238>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b37      	ldr	r3, [pc, #220]	@ (80006ec <HAL_TIM_IC_CaptureCallback+0x234>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000616:	4a37      	ldr	r2, [pc, #220]	@ (80006f4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000618:	6013      	str	r3, [r2, #0]
	            	                }
	            	            Frequency_CH2 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH2);
 800061a:	f002 f82b 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 800061e:	4603      	mov	r3, r0
 8000620:	005a      	lsls	r2, r3, #1
 8000622:	4b34      	ldr	r3, [pc, #208]	@ (80006f4 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	212a      	movs	r1, #42	@ 0x2a
 8000628:	fb01 f303 	mul.w	r3, r1, r3
 800062c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000630:	4a31      	ldr	r2, [pc, #196]	@ (80006f8 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000632:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH2 = 0;
 8000634:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <HAL_TIM_IC_CaptureCallback+0x230>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6a1a      	ldr	r2, [r3, #32]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000648:	621a      	str	r2, [r3, #32]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6a12      	ldr	r2, [r2, #32]
 8000654:	621a      	str	r2, [r3, #32]
	        }
	    }

	    /* Channel 3 */
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	7f1b      	ldrb	r3, [r3, #28]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d17d      	bne.n	800075a <HAL_TIM_IC_CaptureCallback+0x2a2>
	    {
	        if (Is_First_Captured_CH3 == 0)
 800065e:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <HAL_TIM_IC_CaptureCallback+0x244>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d11a      	bne.n	800069c <HAL_TIM_IC_CaptureCallback+0x1e4>
	        {
	            IC_Val1_CH3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000666:	2108      	movs	r1, #8
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f002 fe1f 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 800066e:	4603      	mov	r3, r0
 8000670:	4a23      	ldr	r2, [pc, #140]	@ (8000700 <HAL_TIM_IC_CaptureCallback+0x248>)
 8000672:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH3 = 1;
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <HAL_TIM_IC_CaptureCallback+0x244>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6a1a      	ldr	r2, [r3, #32]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000688:	621a      	str	r2, [r3, #32]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6a1a      	ldr	r2, [r3, #32]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000698:	621a      	str	r2, [r3, #32]
 800069a:	e05e      	b.n	800075a <HAL_TIM_IC_CaptureCallback+0x2a2>
	        }
	        else
	        {
	            IC_Val2_CH3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800069c:	2108      	movs	r1, #8
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f002 fe04 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a17      	ldr	r2, [pc, #92]	@ (8000704 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80006a8:	6013      	str	r3, [r2, #0]
	            __HAL_TIM_SET_COUNTER(htim, 0);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	@ 0x24

	            if (IC_Val2_CH3 > IC_Val1_CH3)
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <HAL_TIM_IC_CaptureCallback+0x248>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d926      	bls.n	800070c <HAL_TIM_IC_CaptureCallback+0x254>
	            	            	{
	            	            		Difference_CH3 = IC_Val2_CH3 - IC_Val1_CH3;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <HAL_TIM_IC_CaptureCallback+0x248>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000708 <HAL_TIM_IC_CaptureCallback+0x250>)
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	e027      	b.n	800071e <HAL_TIM_IC_CaptureCallback+0x266>
 80006ce:	bf00      	nop
 80006d0:	20000028 	.word	0x20000028
 80006d4:	200001a8 	.word	0x200001a8
 80006d8:	20000148 	.word	0x20000148
 80006dc:	2000014c 	.word	0x2000014c
 80006e0:	20000188 	.word	0x20000188
 80006e4:	200001b0 	.word	0x200001b0
 80006e8:	200001a9 	.word	0x200001a9
 80006ec:	20000150 	.word	0x20000150
 80006f0:	20000154 	.word	0x20000154
 80006f4:	2000018c 	.word	0x2000018c
 80006f8:	200001b4 	.word	0x200001b4
 80006fc:	200001aa 	.word	0x200001aa
 8000700:	20000158 	.word	0x20000158
 8000704:	2000015c 	.word	0x2000015c
 8000708:	20000190 	.word	0x20000190
	            	                 }
	            	            else
	            	                {
	            	                            Difference_CH3 = (0xFFFF - IC_Val1_CH3) + IC_Val2_CH3 + 1;
 800070c:	4b98      	ldr	r3, [pc, #608]	@ (8000970 <HAL_TIM_IC_CaptureCallback+0x4b8>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b98      	ldr	r3, [pc, #608]	@ (8000974 <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800071a:	4a97      	ldr	r2, [pc, #604]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x4c0>)
 800071c:	6013      	str	r3, [r2, #0]
	            	                }
	            	            Frequency_CH3 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH3);
 800071e:	f001 ffa9 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 8000722:	4603      	mov	r3, r0
 8000724:	005a      	lsls	r2, r3, #1
 8000726:	4b94      	ldr	r3, [pc, #592]	@ (8000978 <HAL_TIM_IC_CaptureCallback+0x4c0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	212a      	movs	r1, #42	@ 0x2a
 800072c:	fb01 f303 	mul.w	r3, r1, r3
 8000730:	fbb2 f3f3 	udiv	r3, r2, r3
 8000734:	4a91      	ldr	r2, [pc, #580]	@ (800097c <HAL_TIM_IC_CaptureCallback+0x4c4>)
 8000736:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH3 = 0;
 8000738:	4b91      	ldr	r3, [pc, #580]	@ (8000980 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6a1a      	ldr	r2, [r3, #32]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 800074c:	621a      	str	r2, [r3, #32]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	6a12      	ldr	r2, [r2, #32]
 8000758:	621a      	str	r2, [r3, #32]
	        }
	    }

	    /* Channel 4 */
	    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7f1b      	ldrb	r3, [r3, #28]
 800075e:	2b08      	cmp	r3, #8
 8000760:	f040 821b 	bne.w	8000b9a <HAL_TIM_IC_CaptureCallback+0x6e2>
	    {
	        if (Is_First_Captured_CH4 == 0)
 8000764:	4b87      	ldr	r3, [pc, #540]	@ (8000984 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d11a      	bne.n	80007a2 <HAL_TIM_IC_CaptureCallback+0x2ea>
	        {
	            IC_Val1_CH4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800076c:	210c      	movs	r1, #12
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f002 fd9c 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 8000774:	4603      	mov	r3, r0
 8000776:	4a84      	ldr	r2, [pc, #528]	@ (8000988 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 8000778:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH4 = 1;
 800077a:	4b82      	ldr	r3, [pc, #520]	@ (8000984 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6a1a      	ldr	r2, [r3, #32]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 800078e:	621a      	str	r2, [r3, #32]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	6a1a      	ldr	r2, [r3, #32]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800079e:	621a      	str	r2, [r3, #32]
		        }
		    }

	}

}
 80007a0:	e1fb      	b.n	8000b9a <HAL_TIM_IC_CaptureCallback+0x6e2>
	            IC_Val2_CH4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80007a2:	210c      	movs	r1, #12
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f002 fd81 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a77      	ldr	r2, [pc, #476]	@ (800098c <HAL_TIM_IC_CaptureCallback+0x4d4>)
 80007ae:	6013      	str	r3, [r2, #0]
	            __HAL_TIM_SET_COUNTER(htim, 0);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	@ 0x24
	            if (IC_Val2_CH4 > IC_Val1_CH4)
 80007b8:	4b74      	ldr	r3, [pc, #464]	@ (800098c <HAL_TIM_IC_CaptureCallback+0x4d4>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b72      	ldr	r3, [pc, #456]	@ (8000988 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d907      	bls.n	80007d4 <HAL_TIM_IC_CaptureCallback+0x31c>
	            	            		Difference_CH4 = IC_Val2_CH4 - IC_Val1_CH4;
 80007c4:	4b71      	ldr	r3, [pc, #452]	@ (800098c <HAL_TIM_IC_CaptureCallback+0x4d4>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b6f      	ldr	r3, [pc, #444]	@ (8000988 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	4a70      	ldr	r2, [pc, #448]	@ (8000990 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	e008      	b.n	80007e6 <HAL_TIM_IC_CaptureCallback+0x32e>
	            	                            Difference_CH4 = (0xFFFF - IC_Val1_CH4) + IC_Val2_CH4 + 1;
 80007d4:	4b6d      	ldr	r3, [pc, #436]	@ (800098c <HAL_TIM_IC_CaptureCallback+0x4d4>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b6b      	ldr	r3, [pc, #428]	@ (8000988 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80007e2:	4a6b      	ldr	r2, [pc, #428]	@ (8000990 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 80007e4:	6013      	str	r3, [r2, #0]
	            	            Frequency_CH4 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH4);
 80007e6:	f001 ff45 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 80007ea:	4603      	mov	r3, r0
 80007ec:	005a      	lsls	r2, r3, #1
 80007ee:	4b68      	ldr	r3, [pc, #416]	@ (8000990 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	212a      	movs	r1, #42	@ 0x2a
 80007f4:	fb01 f303 	mul.w	r3, r1, r3
 80007f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fc:	4a65      	ldr	r2, [pc, #404]	@ (8000994 <HAL_TIM_IC_CaptureCallback+0x4dc>)
 80007fe:	6013      	str	r3, [r2, #0]
	            Is_First_Captured_CH4 = 0;
 8000800:	4b60      	ldr	r3, [pc, #384]	@ (8000984 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6a1a      	ldr	r2, [r3, #32]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8000814:	621a      	str	r2, [r3, #32]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	6a12      	ldr	r2, [r2, #32]
 8000820:	621a      	str	r2, [r3, #32]
}
 8000822:	e1ba      	b.n	8000b9a <HAL_TIM_IC_CaptureCallback+0x6e2>
	else if(htim ==&htim5)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a5c      	ldr	r2, [pc, #368]	@ (8000998 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	f040 81b6 	bne.w	8000b9a <HAL_TIM_IC_CaptureCallback+0x6e2>
		    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7f1b      	ldrb	r3, [r3, #28]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d15e      	bne.n	80008f4 <HAL_TIM_IC_CaptureCallback+0x43c>
		        if (Is_First_Captured_CH5 == 0)
 8000836:	4b59      	ldr	r3, [pc, #356]	@ (800099c <HAL_TIM_IC_CaptureCallback+0x4e4>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d11a      	bne.n	8000874 <HAL_TIM_IC_CaptureCallback+0x3bc>
		            IC_Val1_CH5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800083e:	2100      	movs	r1, #0
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f002 fd33 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 8000846:	4603      	mov	r3, r0
 8000848:	4a55      	ldr	r2, [pc, #340]	@ (80009a0 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 800084a:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH5 = 1;
 800084c:	4b53      	ldr	r3, [pc, #332]	@ (800099c <HAL_TIM_IC_CaptureCallback+0x4e4>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6a1a      	ldr	r2, [r3, #32]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f022 020a 	bic.w	r2, r2, #10
 8000860:	621a      	str	r2, [r3, #32]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	6a1a      	ldr	r2, [r3, #32]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f042 0202 	orr.w	r2, r2, #2
 8000870:	621a      	str	r2, [r3, #32]
 8000872:	e03f      	b.n	80008f4 <HAL_TIM_IC_CaptureCallback+0x43c>
		            IC_Val2_CH5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000874:	2100      	movs	r1, #0
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f002 fd18 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 800087c:	4603      	mov	r3, r0
 800087e:	4a49      	ldr	r2, [pc, #292]	@ (80009a4 <HAL_TIM_IC_CaptureCallback+0x4ec>)
 8000880:	6013      	str	r3, [r2, #0]
		            __HAL_TIM_SET_COUNTER(htim, 0);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
		            if (IC_Val2_CH5 > IC_Val1_CH5)
 800088a:	4b46      	ldr	r3, [pc, #280]	@ (80009a4 <HAL_TIM_IC_CaptureCallback+0x4ec>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	4b44      	ldr	r3, [pc, #272]	@ (80009a0 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	429a      	cmp	r2, r3
 8000894:	d907      	bls.n	80008a6 <HAL_TIM_IC_CaptureCallback+0x3ee>
		            		Difference_CH5 = IC_Val2_CH5 - IC_Val1_CH5;
 8000896:	4b43      	ldr	r3, [pc, #268]	@ (80009a4 <HAL_TIM_IC_CaptureCallback+0x4ec>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	4b41      	ldr	r3, [pc, #260]	@ (80009a0 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	4a41      	ldr	r2, [pc, #260]	@ (80009a8 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	e008      	b.n	80008b8 <HAL_TIM_IC_CaptureCallback+0x400>
		                            Difference_CH5 = (0xFFFF - IC_Val1_CH5) + IC_Val2_CH5 + 1;
 80008a6:	4b3f      	ldr	r3, [pc, #252]	@ (80009a4 <HAL_TIM_IC_CaptureCallback+0x4ec>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4b3d      	ldr	r3, [pc, #244]	@ (80009a0 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80008b4:	4a3c      	ldr	r2, [pc, #240]	@ (80009a8 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 80008b6:	6013      	str	r3, [r2, #0]
		            Frequency_CH5 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH5);
 80008b8:	f001 fedc 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 80008bc:	4603      	mov	r3, r0
 80008be:	005a      	lsls	r2, r3, #1
 80008c0:	4b39      	ldr	r3, [pc, #228]	@ (80009a8 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	212a      	movs	r1, #42	@ 0x2a
 80008c6:	fb01 f303 	mul.w	r3, r1, r3
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4a37      	ldr	r2, [pc, #220]	@ (80009ac <HAL_TIM_IC_CaptureCallback+0x4f4>)
 80008d0:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH5 = 0;
 80008d2:	4b32      	ldr	r3, [pc, #200]	@ (800099c <HAL_TIM_IC_CaptureCallback+0x4e4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	6a1a      	ldr	r2, [r3, #32]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f022 020a 	bic.w	r2, r2, #10
 80008e6:	621a      	str	r2, [r3, #32]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	6a12      	ldr	r2, [r2, #32]
 80008f2:	621a      	str	r2, [r3, #32]
		    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	7f1b      	ldrb	r3, [r3, #28]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	f040 8088 	bne.w	8000a0e <HAL_TIM_IC_CaptureCallback+0x556>
		        if (Is_First_Captured_CH6 == 0)
 80008fe:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <HAL_TIM_IC_CaptureCallback+0x4f8>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d11a      	bne.n	800093c <HAL_TIM_IC_CaptureCallback+0x484>
		            IC_Val1_CH6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000906:	2104      	movs	r1, #4
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f002 fccf 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 800090e:	4603      	mov	r3, r0
 8000910:	4a28      	ldr	r2, [pc, #160]	@ (80009b4 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8000912:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH6 = 1;
 8000914:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <HAL_TIM_IC_CaptureCallback+0x4f8>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6a1a      	ldr	r2, [r3, #32]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000928:	621a      	str	r2, [r3, #32]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6a1a      	ldr	r2, [r3, #32]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f042 0220 	orr.w	r2, r2, #32
 8000938:	621a      	str	r2, [r3, #32]
 800093a:	e068      	b.n	8000a0e <HAL_TIM_IC_CaptureCallback+0x556>
		            IC_Val2_CH6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800093c:	2104      	movs	r1, #4
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f002 fcb4 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 8000944:	4603      	mov	r3, r0
 8000946:	4a1c      	ldr	r2, [pc, #112]	@ (80009b8 <HAL_TIM_IC_CaptureCallback+0x500>)
 8000948:	6013      	str	r3, [r2, #0]
		            __HAL_TIM_SET_COUNTER(htim, 0);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	@ 0x24
		            if (IC_Val2_CH6 > IC_Val1_CH6)
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <HAL_TIM_IC_CaptureCallback+0x500>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	429a      	cmp	r2, r3
 800095c:	d930      	bls.n	80009c0 <HAL_TIM_IC_CaptureCallback+0x508>
		            	            		Difference_CH6 = IC_Val2_CH6 - IC_Val1_CH6;
 800095e:	4b16      	ldr	r3, [pc, #88]	@ (80009b8 <HAL_TIM_IC_CaptureCallback+0x500>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	4a14      	ldr	r2, [pc, #80]	@ (80009bc <HAL_TIM_IC_CaptureCallback+0x504>)
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	e031      	b.n	80009d2 <HAL_TIM_IC_CaptureCallback+0x51a>
 800096e:	bf00      	nop
 8000970:	2000015c 	.word	0x2000015c
 8000974:	20000158 	.word	0x20000158
 8000978:	20000190 	.word	0x20000190
 800097c:	200001b8 	.word	0x200001b8
 8000980:	200001aa 	.word	0x200001aa
 8000984:	200001ab 	.word	0x200001ab
 8000988:	20000160 	.word	0x20000160
 800098c:	20000164 	.word	0x20000164
 8000990:	20000194 	.word	0x20000194
 8000994:	200001bc 	.word	0x200001bc
 8000998:	20000100 	.word	0x20000100
 800099c:	200001ac 	.word	0x200001ac
 80009a0:	20000168 	.word	0x20000168
 80009a4:	2000016c 	.word	0x2000016c
 80009a8:	20000198 	.word	0x20000198
 80009ac:	200001c0 	.word	0x200001c0
 80009b0:	200001ad 	.word	0x200001ad
 80009b4:	20000170 	.word	0x20000170
 80009b8:	20000174 	.word	0x20000174
 80009bc:	2000019c 	.word	0x2000019c
		            	                            Difference_CH6 = (0xFFFF - IC_Val1_CH6) + IC_Val2_CH6 + 1;
 80009c0:	4b78      	ldr	r3, [pc, #480]	@ (8000ba4 <HAL_TIM_IC_CaptureCallback+0x6ec>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b78      	ldr	r3, [pc, #480]	@ (8000ba8 <HAL_TIM_IC_CaptureCallback+0x6f0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80009ce:	4a77      	ldr	r2, [pc, #476]	@ (8000bac <HAL_TIM_IC_CaptureCallback+0x6f4>)
 80009d0:	6013      	str	r3, [r2, #0]
		            	            Frequency_CH6 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH6);
 80009d2:	f001 fe4f 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 80009d6:	4603      	mov	r3, r0
 80009d8:	005a      	lsls	r2, r3, #1
 80009da:	4b74      	ldr	r3, [pc, #464]	@ (8000bac <HAL_TIM_IC_CaptureCallback+0x6f4>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	212a      	movs	r1, #42	@ 0x2a
 80009e0:	fb01 f303 	mul.w	r3, r1, r3
 80009e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e8:	4a71      	ldr	r2, [pc, #452]	@ (8000bb0 <HAL_TIM_IC_CaptureCallback+0x6f8>)
 80009ea:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH6 = 0;
 80009ec:	4b71      	ldr	r3, [pc, #452]	@ (8000bb4 <HAL_TIM_IC_CaptureCallback+0x6fc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a1a      	ldr	r2, [r3, #32]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000a00:	621a      	str	r2, [r3, #32]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6a12      	ldr	r2, [r2, #32]
 8000a0c:	621a      	str	r2, [r3, #32]
		    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	7f1b      	ldrb	r3, [r3, #28]
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	d15e      	bne.n	8000ad4 <HAL_TIM_IC_CaptureCallback+0x61c>
		        if (Is_First_Captured_CH7 == 0)
 8000a16:	4b68      	ldr	r3, [pc, #416]	@ (8000bb8 <HAL_TIM_IC_CaptureCallback+0x700>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d11a      	bne.n	8000a54 <HAL_TIM_IC_CaptureCallback+0x59c>
		            IC_Val1_CH7 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000a1e:	2108      	movs	r1, #8
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f002 fc43 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a64      	ldr	r2, [pc, #400]	@ (8000bbc <HAL_TIM_IC_CaptureCallback+0x704>)
 8000a2a:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH7 = 1;
 8000a2c:	4b62      	ldr	r3, [pc, #392]	@ (8000bb8 <HAL_TIM_IC_CaptureCallback+0x700>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	6a1a      	ldr	r2, [r3, #32]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000a40:	621a      	str	r2, [r3, #32]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6a1a      	ldr	r2, [r3, #32]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a50:	621a      	str	r2, [r3, #32]
 8000a52:	e03f      	b.n	8000ad4 <HAL_TIM_IC_CaptureCallback+0x61c>
		            IC_Val2_CH7 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000a54:	2108      	movs	r1, #8
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f002 fc28 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4a58      	ldr	r2, [pc, #352]	@ (8000bc0 <HAL_TIM_IC_CaptureCallback+0x708>)
 8000a60:	6013      	str	r3, [r2, #0]
		            __HAL_TIM_SET_COUNTER(htim, 0);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	@ 0x24
		            if (IC_Val2_CH7 > IC_Val1_CH7)
 8000a6a:	4b55      	ldr	r3, [pc, #340]	@ (8000bc0 <HAL_TIM_IC_CaptureCallback+0x708>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b53      	ldr	r3, [pc, #332]	@ (8000bbc <HAL_TIM_IC_CaptureCallback+0x704>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d907      	bls.n	8000a86 <HAL_TIM_IC_CaptureCallback+0x5ce>
		            	            		Difference_CH7 = IC_Val2_CH7 - IC_Val1_CH7;
 8000a76:	4b52      	ldr	r3, [pc, #328]	@ (8000bc0 <HAL_TIM_IC_CaptureCallback+0x708>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b50      	ldr	r3, [pc, #320]	@ (8000bbc <HAL_TIM_IC_CaptureCallback+0x704>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	4a50      	ldr	r2, [pc, #320]	@ (8000bc4 <HAL_TIM_IC_CaptureCallback+0x70c>)
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	e008      	b.n	8000a98 <HAL_TIM_IC_CaptureCallback+0x5e0>
		            	                            Difference_CH7 = (0xFFFF - IC_Val1_CH7) + IC_Val2_CH7 + 1;
 8000a86:	4b4e      	ldr	r3, [pc, #312]	@ (8000bc0 <HAL_TIM_IC_CaptureCallback+0x708>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b4c      	ldr	r3, [pc, #304]	@ (8000bbc <HAL_TIM_IC_CaptureCallback+0x704>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000a94:	4a4b      	ldr	r2, [pc, #300]	@ (8000bc4 <HAL_TIM_IC_CaptureCallback+0x70c>)
 8000a96:	6013      	str	r3, [r2, #0]
		            	            Frequency_CH7 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH7);
 8000a98:	f001 fdec 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	005a      	lsls	r2, r3, #1
 8000aa0:	4b48      	ldr	r3, [pc, #288]	@ (8000bc4 <HAL_TIM_IC_CaptureCallback+0x70c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	212a      	movs	r1, #42	@ 0x2a
 8000aa6:	fb01 f303 	mul.w	r3, r1, r3
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4a46      	ldr	r2, [pc, #280]	@ (8000bc8 <HAL_TIM_IC_CaptureCallback+0x710>)
 8000ab0:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH7 = 0;
 8000ab2:	4b41      	ldr	r3, [pc, #260]	@ (8000bb8 <HAL_TIM_IC_CaptureCallback+0x700>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6a1a      	ldr	r2, [r3, #32]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000ac6:	621a      	str	r2, [r3, #32]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6a12      	ldr	r2, [r2, #32]
 8000ad2:	621a      	str	r2, [r3, #32]
		    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7f1b      	ldrb	r3, [r3, #28]
 8000ad8:	2b08      	cmp	r3, #8
 8000ada:	d15e      	bne.n	8000b9a <HAL_TIM_IC_CaptureCallback+0x6e2>
		        if (Is_First_Captured_CH8 == 0)
 8000adc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bcc <HAL_TIM_IC_CaptureCallback+0x714>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d11a      	bne.n	8000b1a <HAL_TIM_IC_CaptureCallback+0x662>
		            IC_Val1_CH8 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000ae4:	210c      	movs	r1, #12
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f002 fbe0 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a38      	ldr	r2, [pc, #224]	@ (8000bd0 <HAL_TIM_IC_CaptureCallback+0x718>)
 8000af0:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH8 = 1;
 8000af2:	4b36      	ldr	r3, [pc, #216]	@ (8000bcc <HAL_TIM_IC_CaptureCallback+0x714>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6a1a      	ldr	r2, [r3, #32]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8000b06:	621a      	str	r2, [r3, #32]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6a1a      	ldr	r2, [r3, #32]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000b16:	621a      	str	r2, [r3, #32]
}
 8000b18:	e03f      	b.n	8000b9a <HAL_TIM_IC_CaptureCallback+0x6e2>
		            IC_Val2_CH8 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000b1a:	210c      	movs	r1, #12
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f002 fbc5 	bl	80032ac <HAL_TIM_ReadCapturedValue>
 8000b22:	4603      	mov	r3, r0
 8000b24:	4a2b      	ldr	r2, [pc, #172]	@ (8000bd4 <HAL_TIM_IC_CaptureCallback+0x71c>)
 8000b26:	6013      	str	r3, [r2, #0]
		            __HAL_TIM_SET_COUNTER(htim, 0);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	625a      	str	r2, [r3, #36]	@ 0x24
		            if (IC_Val2_CH8 > IC_Val1_CH8)
 8000b30:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <HAL_TIM_IC_CaptureCallback+0x71c>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <HAL_TIM_IC_CaptureCallback+0x718>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d907      	bls.n	8000b4c <HAL_TIM_IC_CaptureCallback+0x694>
		            	            		Difference_CH8 = IC_Val2_CH8 - IC_Val1_CH8;
 8000b3c:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <HAL_TIM_IC_CaptureCallback+0x71c>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <HAL_TIM_IC_CaptureCallback+0x718>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	4a24      	ldr	r2, [pc, #144]	@ (8000bd8 <HAL_TIM_IC_CaptureCallback+0x720>)
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	e008      	b.n	8000b5e <HAL_TIM_IC_CaptureCallback+0x6a6>
		            	                            Difference_CH8 = (0xFFFF - IC_Val1_CH8) + IC_Val2_CH8 + 1;
 8000b4c:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <HAL_TIM_IC_CaptureCallback+0x71c>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <HAL_TIM_IC_CaptureCallback+0x718>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <HAL_TIM_IC_CaptureCallback+0x720>)
 8000b5c:	6013      	str	r3, [r2, #0]
		            	            Frequency_CH8 = (HAL_RCC_GetPCLK1Freq()*2) / (42*Difference_CH8);
 8000b5e:	f001 fd89 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 8000b62:	4603      	mov	r3, r0
 8000b64:	005a      	lsls	r2, r3, #1
 8000b66:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd8 <HAL_TIM_IC_CaptureCallback+0x720>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	212a      	movs	r1, #42	@ 0x2a
 8000b6c:	fb01 f303 	mul.w	r3, r1, r3
 8000b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b74:	4a19      	ldr	r2, [pc, #100]	@ (8000bdc <HAL_TIM_IC_CaptureCallback+0x724>)
 8000b76:	6013      	str	r3, [r2, #0]
		            Is_First_Captured_CH8 = 0;
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <HAL_TIM_IC_CaptureCallback+0x714>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	6a1a      	ldr	r2, [r3, #32]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8000b8c:	621a      	str	r2, [r3, #32]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	6a12      	ldr	r2, [r2, #32]
 8000b98:	621a      	str	r2, [r3, #32]
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000174 	.word	0x20000174
 8000ba8:	20000170 	.word	0x20000170
 8000bac:	2000019c 	.word	0x2000019c
 8000bb0:	200001c4 	.word	0x200001c4
 8000bb4:	200001ad 	.word	0x200001ad
 8000bb8:	200001ae 	.word	0x200001ae
 8000bbc:	20000178 	.word	0x20000178
 8000bc0:	2000017c 	.word	0x2000017c
 8000bc4:	200001a0 	.word	0x200001a0
 8000bc8:	200001c8 	.word	0x200001c8
 8000bcc:	200001af 	.word	0x200001af
 8000bd0:	20000180 	.word	0x20000180
 8000bd4:	20000184 	.word	0x20000184
 8000bd8:	200001a4 	.word	0x200001a4
 8000bdc:	200001cc 	.word	0x200001cc

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be4:	f000 fdb6 	bl	8001754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be8:	f000 f8ac 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bec:	f000 fb68 	bl	80012c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bf0:	f000 f914 	bl	8000e1c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bf4:	f000 f9a2 	bl	8000f3c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bf8:	f000 fa38 	bl	800106c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000bfc:	f000 face 	bl	800119c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */



  // TIM2 and TIM5 Interrupt Start
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000c00:	2100      	movs	r1, #0
 8000c02:	4844      	ldr	r0, [pc, #272]	@ (8000d14 <main+0x134>)
 8000c04:	f001 ff14 	bl	8002a30 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000c08:	2104      	movs	r1, #4
 8000c0a:	4842      	ldr	r0, [pc, #264]	@ (8000d14 <main+0x134>)
 8000c0c:	f001 ff10 	bl	8002a30 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000c10:	2108      	movs	r1, #8
 8000c12:	4840      	ldr	r0, [pc, #256]	@ (8000d14 <main+0x134>)
 8000c14:	f001 ff0c 	bl	8002a30 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c18:	210c      	movs	r1, #12
 8000c1a:	483e      	ldr	r0, [pc, #248]	@ (8000d14 <main+0x134>)
 8000c1c:	f001 ff08 	bl	8002a30 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000c20:	2100      	movs	r1, #0
 8000c22:	483d      	ldr	r0, [pc, #244]	@ (8000d18 <main+0x138>)
 8000c24:	f001 ff04 	bl	8002a30 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8000c28:	2104      	movs	r1, #4
 8000c2a:	483b      	ldr	r0, [pc, #236]	@ (8000d18 <main+0x138>)
 8000c2c:	f001 ff00 	bl	8002a30 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_3);
 8000c30:	2108      	movs	r1, #8
 8000c32:	4839      	ldr	r0, [pc, #228]	@ (8000d18 <main+0x138>)
 8000c34:	f001 fefc 	bl	8002a30 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4);
 8000c38:	210c      	movs	r1, #12
 8000c3a:	4837      	ldr	r0, [pc, #220]	@ (8000d18 <main+0x138>)
 8000c3c:	f001 fef8 	bl	8002a30 <HAL_TIM_IC_Start_IT>

  //TIM3 PWM START

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c40:	2100      	movs	r1, #0
 8000c42:	4836      	ldr	r0, [pc, #216]	@ (8000d1c <main+0x13c>)
 8000c44:	f001 fdd2 	bl	80027ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c48:	2104      	movs	r1, #4
 8000c4a:	4834      	ldr	r0, [pc, #208]	@ (8000d1c <main+0x13c>)
 8000c4c:	f001 fdce 	bl	80027ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000c50:	2108      	movs	r1, #8
 8000c52:	4832      	ldr	r0, [pc, #200]	@ (8000d1c <main+0x13c>)
 8000c54:	f001 fdca 	bl	80027ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000c58:	210c      	movs	r1, #12
 8000c5a:	4830      	ldr	r0, [pc, #192]	@ (8000d1c <main+0x13c>)
 8000c5c:	f001 fdc6 	bl	80027ec <HAL_TIM_PWM_Start>

  //TIM4 PWM START
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c60:	2100      	movs	r1, #0
 8000c62:	482f      	ldr	r0, [pc, #188]	@ (8000d20 <main+0x140>)
 8000c64:	f001 fdc2 	bl	80027ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c68:	2104      	movs	r1, #4
 8000c6a:	482d      	ldr	r0, [pc, #180]	@ (8000d20 <main+0x140>)
 8000c6c:	f001 fdbe 	bl	80027ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000c70:	2108      	movs	r1, #8
 8000c72:	482b      	ldr	r0, [pc, #172]	@ (8000d20 <main+0x140>)
 8000c74:	f001 fdba 	bl	80027ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000c78:	210c      	movs	r1, #12
 8000c7a:	4829      	ldr	r0, [pc, #164]	@ (8000d20 <main+0x140>)
 8000c7c:	f001 fdb6 	bl	80027ec <HAL_TIM_PWM_Start>


  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,0);
 8000c80:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <main+0x13c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2200      	movs	r2, #0
 8000c86:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8000c88:	4b24      	ldr	r3, [pc, #144]	@ (8000d1c <main+0x13c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8000c90:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <main+0x13c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2200      	movs	r2, #0
 8000c96:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,0);
 8000c98:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <main+0x13c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	641a      	str	r2, [r3, #64]	@ 0x40


  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <main+0x140>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <main+0x140>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2200      	movs	r2, #0
 8000cae:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <main+0x140>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 8000cb8:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <main+0x140>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,Difference_CH1);
 8000cc0:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <main+0x13c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <main+0x144>)
 8000cc6:	6812      	ldr	r2, [r2, #0]
 8000cc8:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,Difference_CH2);
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <main+0x13c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a16      	ldr	r2, [pc, #88]	@ (8000d28 <main+0x148>)
 8000cd0:	6812      	ldr	r2, [r2, #0]
 8000cd2:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,Difference_CH3);
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <main+0x13c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <main+0x14c>)
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,Difference_CH4);
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <main+0x13c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a13      	ldr	r2, [pc, #76]	@ (8000d30 <main+0x150>)
 8000ce4:	6812      	ldr	r2, [r2, #0]
 8000ce6:	641a      	str	r2, [r3, #64]	@ 0x40


	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,Difference_CH5);
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <main+0x140>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a11      	ldr	r2, [pc, #68]	@ (8000d34 <main+0x154>)
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,Difference_CH6);
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <main+0x140>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <main+0x158>)
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,Difference_CH7);
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <main+0x140>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0e      	ldr	r2, [pc, #56]	@ (8000d3c <main+0x15c>)
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,Difference_CH8);
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <main+0x140>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <main+0x160>)
 8000d0c:	6812      	ldr	r2, [r2, #0]
 8000d0e:	641a      	str	r2, [r3, #64]	@ 0x40
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,Difference_CH1);
 8000d10:	bf00      	nop
 8000d12:	e7d5      	b.n	8000cc0 <main+0xe0>
 8000d14:	20000028 	.word	0x20000028
 8000d18:	20000100 	.word	0x20000100
 8000d1c:	20000070 	.word	0x20000070
 8000d20:	200000b8 	.word	0x200000b8
 8000d24:	20000188 	.word	0x20000188
 8000d28:	2000018c 	.word	0x2000018c
 8000d2c:	20000190 	.word	0x20000190
 8000d30:	20000194 	.word	0x20000194
 8000d34:	20000198 	.word	0x20000198
 8000d38:	2000019c 	.word	0x2000019c
 8000d3c:	200001a0 	.word	0x200001a0
 8000d40:	200001a4 	.word	0x200001a4

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b094      	sub	sp, #80	@ 0x50
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	2230      	movs	r2, #48	@ 0x30
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f002 ffec 	bl	8003d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <SystemClock_Config+0xd0>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d70:	4a28      	ldr	r2, [pc, #160]	@ (8000e14 <SystemClock_Config+0xd0>)
 8000d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d78:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <SystemClock_Config+0xd0>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <SystemClock_Config+0xd4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a22      	ldr	r2, [pc, #136]	@ (8000e18 <SystemClock_Config+0xd4>)
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <SystemClock_Config+0xd4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000da0:	2309      	movs	r3, #9
 8000da2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000daa:	2301      	movs	r3, #1
 8000dac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000db8:	2304      	movs	r3, #4
 8000dba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000dbc:	23a8      	movs	r3, #168	@ 0xa8
 8000dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	f107 0320 	add.w	r3, r7, #32
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 ffe1 	bl	8001d94 <HAL_RCC_OscConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dd8:	f000 fab6 	bl	8001348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ddc:	230f      	movs	r3, #15
 8000dde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de0:	2302      	movs	r3, #2
 8000de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000de8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000dec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2105      	movs	r1, #5
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fa42 	bl	8002284 <HAL_RCC_ClockConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e06:	f000 fa9f 	bl	8001348 <Error_Handler>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3750      	adds	r7, #80	@ 0x50
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40007000 	.word	0x40007000

08000e1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0318 	add.w	r3, r7, #24
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e46:	4b3c      	ldr	r3, [pc, #240]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000e48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000e50:	2253      	movs	r2, #83	@ 0x53
 8000e52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b38      	ldr	r3, [pc, #224]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF-1;
 8000e5a:	4b37      	ldr	r3, [pc, #220]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000e5c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000e60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e62:	4b35      	ldr	r3, [pc, #212]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b33      	ldr	r3, [pc, #204]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e6e:	4832      	ldr	r0, [pc, #200]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000e70:	f001 fc14 	bl	800269c <HAL_TIM_Base_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000e7a:	f000 fa65 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e82:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e84:	f107 0318 	add.w	r3, r7, #24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	482b      	ldr	r0, [pc, #172]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000e8c:	f002 f946 	bl	800311c <HAL_TIM_ConfigClockSource>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e96:	f000 fa57 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e9a:	4827      	ldr	r0, [pc, #156]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000e9c:	f001 fd6e 	bl	800297c <HAL_TIM_IC_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ea6:	f000 fa4f 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	481f      	ldr	r0, [pc, #124]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000eba:	f002 fea9 	bl	8003c10 <HAL_TIMEx_MasterConfigSynchronization>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000ec4:	f000 fa40 	bl	8001348 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	4619      	mov	r1, r3
 8000ede:	4816      	ldr	r0, [pc, #88]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000ee0:	f001 ffbe 	bl	8002e60 <HAL_TIM_IC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000eea:	f000 fa2d 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4810      	ldr	r0, [pc, #64]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000ef6:	f001 ffb3 	bl	8002e60 <HAL_TIM_IC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000f00:	f000 fa22 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	2208      	movs	r2, #8
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480b      	ldr	r0, [pc, #44]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000f0c:	f001 ffa8 	bl	8002e60 <HAL_TIM_IC_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8000f16:	f000 fa17 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	220c      	movs	r2, #12
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <MX_TIM2_Init+0x11c>)
 8000f22:	f001 ff9d 	bl	8002e60 <HAL_TIM_IC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8000f2c:	f000 fa0c 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	@ 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000028 	.word	0x20000028

08000f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08e      	sub	sp, #56	@ 0x38
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	f107 0320 	add.w	r3, r7, #32
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	615a      	str	r2, [r3, #20]
 8000f6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001064 <MX_TIM3_Init+0x128>)
 8000f6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001068 <MX_TIM3_Init+0x12c>)
 8000f70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000f72:	4b3c      	ldr	r3, [pc, #240]	@ (8001064 <MX_TIM3_Init+0x128>)
 8000f74:	2253      	movs	r2, #83	@ 0x53
 8000f76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	4b3a      	ldr	r3, [pc, #232]	@ (8001064 <MX_TIM3_Init+0x128>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19700;
 8000f7e:	4b39      	ldr	r3, [pc, #228]	@ (8001064 <MX_TIM3_Init+0x128>)
 8000f80:	f644 42f4 	movw	r2, #19700	@ 0x4cf4
 8000f84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f86:	4b37      	ldr	r3, [pc, #220]	@ (8001064 <MX_TIM3_Init+0x128>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8c:	4b35      	ldr	r3, [pc, #212]	@ (8001064 <MX_TIM3_Init+0x128>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f92:	4834      	ldr	r0, [pc, #208]	@ (8001064 <MX_TIM3_Init+0x128>)
 8000f94:	f001 fb82 	bl	800269c <HAL_TIM_Base_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f9e:	f000 f9d3 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fac:	4619      	mov	r1, r3
 8000fae:	482d      	ldr	r0, [pc, #180]	@ (8001064 <MX_TIM3_Init+0x128>)
 8000fb0:	f002 f8b4 	bl	800311c <HAL_TIM_ConfigClockSource>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fba:	f000 f9c5 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fbe:	4829      	ldr	r0, [pc, #164]	@ (8001064 <MX_TIM3_Init+0x128>)
 8000fc0:	f001 fbbb 	bl	800273a <HAL_TIM_PWM_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fca:	f000 f9bd 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4821      	ldr	r0, [pc, #132]	@ (8001064 <MX_TIM3_Init+0x128>)
 8000fde:	f002 fe17 	bl	8003c10 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fe8:	f000 f9ae 	bl	8001348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fec:	2360      	movs	r3, #96	@ 0x60
 8000fee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	4619      	mov	r1, r3
 8001002:	4818      	ldr	r0, [pc, #96]	@ (8001064 <MX_TIM3_Init+0x128>)
 8001004:	f001 ffc8 	bl	8002f98 <HAL_TIM_PWM_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800100e:	f000 f99b 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2204      	movs	r2, #4
 8001016:	4619      	mov	r1, r3
 8001018:	4812      	ldr	r0, [pc, #72]	@ (8001064 <MX_TIM3_Init+0x128>)
 800101a:	f001 ffbd 	bl	8002f98 <HAL_TIM_PWM_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001024:	f000 f990 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2208      	movs	r2, #8
 800102c:	4619      	mov	r1, r3
 800102e:	480d      	ldr	r0, [pc, #52]	@ (8001064 <MX_TIM3_Init+0x128>)
 8001030:	f001 ffb2 	bl	8002f98 <HAL_TIM_PWM_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800103a:	f000 f985 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	220c      	movs	r2, #12
 8001042:	4619      	mov	r1, r3
 8001044:	4807      	ldr	r0, [pc, #28]	@ (8001064 <MX_TIM3_Init+0x128>)
 8001046:	f001 ffa7 	bl	8002f98 <HAL_TIM_PWM_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001050:	f000 f97a 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <MX_TIM3_Init+0x128>)
 8001056:	f000 fa7b 	bl	8001550 <HAL_TIM_MspPostInit>

}
 800105a:	bf00      	nop
 800105c:	3738      	adds	r7, #56	@ 0x38
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000070 	.word	0x20000070
 8001068:	40000400 	.word	0x40000400

0800106c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800109c:	4b3d      	ldr	r3, [pc, #244]	@ (8001194 <MX_TIM4_Init+0x128>)
 800109e:	4a3e      	ldr	r2, [pc, #248]	@ (8001198 <MX_TIM4_Init+0x12c>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80010a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010a4:	2253      	movs	r2, #83	@ 0x53
 80010a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19700;
 80010ae:	4b39      	ldr	r3, [pc, #228]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010b0:	f644 42f4 	movw	r2, #19700	@ 0x4cf4
 80010b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b37      	ldr	r3, [pc, #220]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b35      	ldr	r3, [pc, #212]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010c2:	4834      	ldr	r0, [pc, #208]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010c4:	f001 faea 	bl	800269c <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80010ce:	f000 f93b 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010dc:	4619      	mov	r1, r3
 80010de:	482d      	ldr	r0, [pc, #180]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010e0:	f002 f81c 	bl	800311c <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80010ea:	f000 f92d 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010ee:	4829      	ldr	r0, [pc, #164]	@ (8001194 <MX_TIM4_Init+0x128>)
 80010f0:	f001 fb23 	bl	800273a <HAL_TIM_PWM_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80010fa:	f000 f925 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4619      	mov	r1, r3
 800110c:	4821      	ldr	r0, [pc, #132]	@ (8001194 <MX_TIM4_Init+0x128>)
 800110e:	f002 fd7f 	bl	8003c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001118:	f000 f916 	bl	8001348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111c:	2360      	movs	r3, #96	@ 0x60
 800111e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	4818      	ldr	r0, [pc, #96]	@ (8001194 <MX_TIM4_Init+0x128>)
 8001134:	f001 ff30 	bl	8002f98 <HAL_TIM_PWM_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800113e:	f000 f903 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2204      	movs	r2, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4812      	ldr	r0, [pc, #72]	@ (8001194 <MX_TIM4_Init+0x128>)
 800114a:	f001 ff25 	bl	8002f98 <HAL_TIM_PWM_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001154:	f000 f8f8 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2208      	movs	r2, #8
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	@ (8001194 <MX_TIM4_Init+0x128>)
 8001160:	f001 ff1a 	bl	8002f98 <HAL_TIM_PWM_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800116a:	f000 f8ed 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	220c      	movs	r2, #12
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <MX_TIM4_Init+0x128>)
 8001176:	f001 ff0f 	bl	8002f98 <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001180:	f000 f8e2 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_TIM4_Init+0x128>)
 8001186:	f000 f9e3 	bl	8001550 <HAL_TIM_MspPostInit>

}
 800118a:	bf00      	nop
 800118c:	3738      	adds	r7, #56	@ 0x38
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000b8 	.word	0x200000b8
 8001198:	40000800 	.word	0x40000800

0800119c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011c6:	4b3c      	ldr	r3, [pc, #240]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 80011c8:	4a3c      	ldr	r2, [pc, #240]	@ (80012bc <MX_TIM5_Init+0x120>)
 80011ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80011cc:	4b3a      	ldr	r3, [pc, #232]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 80011ce:	2253      	movs	r2, #83	@ 0x53
 80011d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b39      	ldr	r3, [pc, #228]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff-1;
 80011d8:	4b37      	ldr	r3, [pc, #220]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 80011da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011de:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b35      	ldr	r3, [pc, #212]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011ec:	4832      	ldr	r0, [pc, #200]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 80011ee:	f001 fa55 	bl	800269c <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80011f8:	f000 f8a6 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001200:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	4619      	mov	r1, r3
 8001208:	482b      	ldr	r0, [pc, #172]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 800120a:	f001 ff87 	bl	800311c <HAL_TIM_ConfigClockSource>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001214:	f000 f898 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001218:	4827      	ldr	r0, [pc, #156]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 800121a:	f001 fbaf 	bl	800297c <HAL_TIM_IC_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001224:	f000 f890 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4619      	mov	r1, r3
 8001236:	4820      	ldr	r0, [pc, #128]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 8001238:	f002 fcea 	bl	8003c10 <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8001242:	f000 f881 	bl	8001348 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800124a:	2301      	movs	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4816      	ldr	r0, [pc, #88]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 800125e:	f001 fdff 	bl	8002e60 <HAL_TIM_IC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8001268:	f000 f86e 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	2204      	movs	r2, #4
 8001270:	4619      	mov	r1, r3
 8001272:	4811      	ldr	r0, [pc, #68]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 8001274:	f001 fdf4 	bl	8002e60 <HAL_TIM_IC_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM5_Init+0xe6>
  {
    Error_Handler();
 800127e:	f000 f863 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	2208      	movs	r2, #8
 8001286:	4619      	mov	r1, r3
 8001288:	480b      	ldr	r0, [pc, #44]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 800128a:	f001 fde9 	bl	8002e60 <HAL_TIM_IC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM5_Init+0xfc>
  {
    Error_Handler();
 8001294:	f000 f858 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	220c      	movs	r2, #12
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <MX_TIM5_Init+0x11c>)
 80012a0:	f001 fdde 	bl	8002e60 <HAL_TIM_IC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM5_Init+0x112>
  {
    Error_Handler();
 80012aa:	f000 f84d 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	@ 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000100 	.word	0x20000100
 80012bc:	40000c00 	.word	0x40000c00

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <MX_GPIO_Init+0x84>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001344 <MX_GPIO_Init+0x84>)
 80012d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <MX_GPIO_Init+0x84>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_GPIO_Init+0x84>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a16      	ldr	r2, [pc, #88]	@ (8001344 <MX_GPIO_Init+0x84>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_GPIO_Init+0x84>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <MX_GPIO_Init+0x84>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a0f      	ldr	r2, [pc, #60]	@ (8001344 <MX_GPIO_Init+0x84>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <MX_GPIO_Init+0x84>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_GPIO_Init+0x84>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <MX_GPIO_Init+0x84>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_GPIO_Init+0x84>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <Error_Handler+0x8>

08001354 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	@ 0x40
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	@ 0x38
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c4:	d153      	bne.n	800146e <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
 80013ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d6:	4b58      	ldr	r3, [pc, #352]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	623b      	str	r3, [r7, #32]
 80013e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	4b54      	ldr	r3, [pc, #336]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a53      	ldr	r2, [pc, #332]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b51      	ldr	r3, [pc, #324]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	4b4d      	ldr	r3, [pc, #308]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a4c      	ldr	r2, [pc, #304]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b4a      	ldr	r3, [pc, #296]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800141a:	2320      	movs	r3, #32
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800142a:	2301      	movs	r3, #1
 800142c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	4841      	ldr	r0, [pc, #260]	@ (800153c <HAL_TIM_Base_MspInit+0x198>)
 8001436:	f000 fb11 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 800143a:	f640 4308 	movw	r3, #3080	@ 0xc08
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800144c:	2301      	movs	r3, #1
 800144e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	483a      	ldr	r0, [pc, #232]	@ (8001540 <HAL_TIM_Base_MspInit+0x19c>)
 8001458:	f000 fb00 	bl	8001a5c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	201c      	movs	r0, #28
 8001462:	f000 fac4 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001466:	201c      	movs	r0, #28
 8001468:	f000 fadd 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800146c:	e060      	b.n	8001530 <HAL_TIM_Base_MspInit+0x18c>
  else if(htim_base->Instance==TIM3)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a34      	ldr	r2, [pc, #208]	@ (8001544 <HAL_TIM_Base_MspInit+0x1a0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d10e      	bne.n	8001496 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	4b2e      	ldr	r3, [pc, #184]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	4a2d      	ldr	r2, [pc, #180]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6413      	str	r3, [r2, #64]	@ 0x40
 8001488:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697b      	ldr	r3, [r7, #20]
}
 8001494:	e04c      	b.n	8001530 <HAL_TIM_Base_MspInit+0x18c>
  else if(htim_base->Instance==TIM4)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a2b      	ldr	r2, [pc, #172]	@ (8001548 <HAL_TIM_Base_MspInit+0x1a4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d10e      	bne.n	80014be <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	4a23      	ldr	r2, [pc, #140]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b0:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]
}
 80014bc:	e038      	b.n	8001530 <HAL_TIM_Base_MspInit+0x18c>
  else if(htim_base->Instance==TIM5)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a22      	ldr	r2, [pc, #136]	@ (800154c <HAL_TIM_Base_MspInit+0x1a8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d133      	bne.n	8001530 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	4a19      	ldr	r2, [pc, #100]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d8:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	4b13      	ldr	r3, [pc, #76]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ec:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f4:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <HAL_TIM_Base_MspInit+0x194>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001500:	230f      	movs	r3, #15
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001510:	2302      	movs	r3, #2
 8001512:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	4808      	ldr	r0, [pc, #32]	@ (800153c <HAL_TIM_Base_MspInit+0x198>)
 800151c:	f000 fa9e 	bl	8001a5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2032      	movs	r0, #50	@ 0x32
 8001526:	f000 fa62 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800152a:	2032      	movs	r0, #50	@ 0x32
 800152c:	f000 fa7b 	bl	8001a26 <HAL_NVIC_EnableIRQ>
}
 8001530:	bf00      	nop
 8001532:	3738      	adds	r7, #56	@ 0x38
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400
 8001544:	40000400 	.word	0x40000400
 8001548:	40000800 	.word	0x40000800
 800154c:	40000c00 	.word	0x40000c00

08001550 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a33      	ldr	r2, [pc, #204]	@ (800163c <HAL_TIM_MspPostInit+0xec>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d13c      	bne.n	80015ec <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b32      	ldr	r3, [pc, #200]	@ (8001640 <HAL_TIM_MspPostInit+0xf0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a31      	ldr	r2, [pc, #196]	@ (8001640 <HAL_TIM_MspPostInit+0xf0>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <HAL_TIM_MspPostInit+0xf0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b2b      	ldr	r3, [pc, #172]	@ (8001640 <HAL_TIM_MspPostInit+0xf0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a2a      	ldr	r2, [pc, #168]	@ (8001640 <HAL_TIM_MspPostInit+0xf0>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b28      	ldr	r3, [pc, #160]	@ (8001640 <HAL_TIM_MspPostInit+0xf0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015aa:	23c0      	movs	r3, #192	@ 0xc0
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ba:	2302      	movs	r3, #2
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	481f      	ldr	r0, [pc, #124]	@ (8001644 <HAL_TIM_MspPostInit+0xf4>)
 80015c6:	f000 fa49 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ca:	2303      	movs	r3, #3
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015da:	2302      	movs	r3, #2
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4818      	ldr	r0, [pc, #96]	@ (8001648 <HAL_TIM_MspPostInit+0xf8>)
 80015e6:	f000 fa39 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015ea:	e023      	b.n	8001634 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a16      	ldr	r2, [pc, #88]	@ (800164c <HAL_TIM_MspPostInit+0xfc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d11e      	bne.n	8001634 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <HAL_TIM_MspPostInit+0xf0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a10      	ldr	r2, [pc, #64]	@ (8001640 <HAL_TIM_MspPostInit+0xf0>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <HAL_TIM_MspPostInit+0xf0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001612:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001624:	2302      	movs	r3, #2
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	4808      	ldr	r0, [pc, #32]	@ (8001650 <HAL_TIM_MspPostInit+0x100>)
 8001630:	f000 fa14 	bl	8001a5c <HAL_GPIO_Init>
}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	@ 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40000400 	.word	0x40000400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400
 800164c:	40000800 	.word	0x40000800
 8001650:	40020c00 	.word	0x40020c00

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <NMI_Handler+0x4>

0800165c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <MemManage_Handler+0x4>

0800166c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <UsageFault_Handler+0x4>

0800167c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016aa:	f000 f8a5 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <TIM2_IRQHandler+0x10>)
 80016ba:	f001 fae1 	bl	8002c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000028 	.word	0x20000028

080016c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <TIM5_IRQHandler+0x10>)
 80016ce:	f001 fad7 	bl	8002c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000100 	.word	0x20000100

080016dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001738 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001704:	f7ff ffea 	bl	80016dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001708:	480c      	ldr	r0, [pc, #48]	@ (800173c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800170a:	490d      	ldr	r1, [pc, #52]	@ (8001740 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800170c:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001710:	e002      	b.n	8001718 <LoopCopyDataInit>

08001712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001716:	3304      	adds	r3, #4

08001718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800171c:	d3f9      	bcc.n	8001712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171e:	4a0a      	ldr	r2, [pc, #40]	@ (8001748 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001720:	4c0a      	ldr	r4, [pc, #40]	@ (800174c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001724:	e001      	b.n	800172a <LoopFillZerobss>

08001726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001728:	3204      	adds	r2, #4

0800172a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800172c:	d3fb      	bcc.n	8001726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172e:	f002 fb07 	bl	8003d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001732:	f7ff fa55 	bl	8000be0 <main>
  bx  lr    
 8001736:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001744:	08003dc8 	.word	0x08003dc8
  ldr r2, =_sbss
 8001748:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800174c:	200001d4 	.word	0x200001d4

08001750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC_IRQHandler>
	...

08001754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001758:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <HAL_Init+0x40>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001764:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <HAL_Init+0x40>)
 800176a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800176e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <HAL_Init+0x40>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f000 f92b 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	200f      	movs	r0, #15
 8001784:	f000 f808 	bl	8001798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001788:	f7ff fde4 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023c00 	.word	0x40023c00

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_InitTick+0x54>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_InitTick+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f943 	bl	8001a42 <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 f90b 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	@ (80017f4 <HAL_InitTick+0x5c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000008 	.word	0x20000008
 80017f4:	20000004 	.word	0x20000004

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	@ (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008
 800181c:	200001d0 	.word	0x200001d0

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200001d0 	.word	0x200001d0

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	@ (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	@ (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	@ (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	@ 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e16b      	b.n	8001d50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 815a 	bne.w	8001d4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d005      	beq.n	8001aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d130      	bne.n	8001b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 0201 	and.w	r2, r3, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d017      	beq.n	8001b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d123      	bne.n	8001ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	69b9      	ldr	r1, [r7, #24]
 8001b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80b4 	beq.w	8001d4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b60      	ldr	r3, [pc, #384]	@ (8001d68 <HAL_GPIO_Init+0x30c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	4a5f      	ldr	r2, [pc, #380]	@ (8001d68 <HAL_GPIO_Init+0x30c>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d68 <HAL_GPIO_Init+0x30c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfe:	4a5b      	ldr	r2, [pc, #364]	@ (8001d6c <HAL_GPIO_Init+0x310>)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a52      	ldr	r2, [pc, #328]	@ (8001d70 <HAL_GPIO_Init+0x314>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d02b      	beq.n	8001c82 <HAL_GPIO_Init+0x226>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a51      	ldr	r2, [pc, #324]	@ (8001d74 <HAL_GPIO_Init+0x318>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d025      	beq.n	8001c7e <HAL_GPIO_Init+0x222>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a50      	ldr	r2, [pc, #320]	@ (8001d78 <HAL_GPIO_Init+0x31c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01f      	beq.n	8001c7a <HAL_GPIO_Init+0x21e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d7c <HAL_GPIO_Init+0x320>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d019      	beq.n	8001c76 <HAL_GPIO_Init+0x21a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4e      	ldr	r2, [pc, #312]	@ (8001d80 <HAL_GPIO_Init+0x324>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0x216>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001d84 <HAL_GPIO_Init+0x328>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00d      	beq.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4c      	ldr	r2, [pc, #304]	@ (8001d88 <HAL_GPIO_Init+0x32c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <HAL_GPIO_Init+0x20e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4b      	ldr	r2, [pc, #300]	@ (8001d8c <HAL_GPIO_Init+0x330>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_GPIO_Init+0x20a>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e00e      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c66:	2308      	movs	r3, #8
 8001c68:	e00c      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	e00a      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c6e:	2305      	movs	r3, #5
 8001c70:	e008      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c76:	2303      	movs	r3, #3
 8001c78:	e004      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c82:	2300      	movs	r3, #0
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f002 0203 	and.w	r2, r2, #3
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4093      	lsls	r3, r2
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c94:	4935      	ldr	r1, [pc, #212]	@ (8001d6c <HAL_GPIO_Init+0x310>)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc6:	4a32      	ldr	r2, [pc, #200]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ccc:	4b30      	ldr	r3, [pc, #192]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf0:	4a27      	ldr	r2, [pc, #156]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf6:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d44:	4a12      	ldr	r2, [pc, #72]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	f67f ae90 	bls.w	8001a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3724      	adds	r7, #36	@ 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40021400 	.word	0x40021400
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40021c00 	.word	0x40021c00
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e267      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d075      	beq.n	8001e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001db2:	4b88      	ldr	r3, [pc, #544]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dbe:	4b85      	ldr	r3, [pc, #532]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d112      	bne.n	8001df0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dca:	4b82      	ldr	r3, [pc, #520]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dd6:	d10b      	bne.n	8001df0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d05b      	beq.n	8001e9c <HAL_RCC_OscConfig+0x108>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d157      	bne.n	8001e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e242      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df8:	d106      	bne.n	8001e08 <HAL_RCC_OscConfig+0x74>
 8001dfa:	4b76      	ldr	r3, [pc, #472]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a75      	ldr	r2, [pc, #468]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e01d      	b.n	8001e44 <HAL_RCC_OscConfig+0xb0>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x98>
 8001e12:	4b70      	ldr	r3, [pc, #448]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a6f      	ldr	r2, [pc, #444]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a6c      	ldr	r2, [pc, #432]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0xb0>
 8001e2c:	4b69      	ldr	r3, [pc, #420]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a68      	ldr	r2, [pc, #416]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b66      	ldr	r3, [pc, #408]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a65      	ldr	r2, [pc, #404]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fce8 	bl	8001820 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff fce4 	bl	8001820 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	@ 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e207      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b5b      	ldr	r3, [pc, #364]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0xc0>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff fcd4 	bl	8001820 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7ff fcd0 	bl	8001820 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	@ 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1f3      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	4b51      	ldr	r3, [pc, #324]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0xe8>
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d063      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb6:	4b47      	ldr	r3, [pc, #284]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d11c      	bne.n	8001efc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec2:	4b44      	ldr	r3, [pc, #272]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d116      	bne.n	8001efc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	4b41      	ldr	r3, [pc, #260]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x152>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e1c7      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4937      	ldr	r1, [pc, #220]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	e03a      	b.n	8001f72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d020      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f04:	4b34      	ldr	r3, [pc, #208]	@ (8001fd8 <HAL_RCC_OscConfig+0x244>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fc89 	bl	8001820 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f12:	f7ff fc85 	bl	8001820 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e1a8      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f30:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4925      	ldr	r1, [pc, #148]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
 8001f44:	e015      	b.n	8001f72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f46:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <HAL_RCC_OscConfig+0x244>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff fc68 	bl	8001820 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f54:	f7ff fc64 	bl	8001820 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e187      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d036      	beq.n	8001fec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_RCC_OscConfig+0x248>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff fc48 	bl	8001820 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f94:	f7ff fc44 	bl	8001820 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e167      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x200>
 8001fb2:	e01b      	b.n	8001fec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <HAL_RCC_OscConfig+0x248>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fc31 	bl	8001820 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc0:	e00e      	b.n	8001fe0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fc2d 	bl	8001820 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d907      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e150      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	42470000 	.word	0x42470000
 8001fdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	4b88      	ldr	r3, [pc, #544]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ea      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8097 	beq.w	8002128 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffe:	4b81      	ldr	r3, [pc, #516]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	4b7d      	ldr	r3, [pc, #500]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	4a7c      	ldr	r2, [pc, #496]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002018:	6413      	str	r3, [r2, #64]	@ 0x40
 800201a:	4b7a      	ldr	r3, [pc, #488]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002026:	2301      	movs	r3, #1
 8002028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b77      	ldr	r3, [pc, #476]	@ (8002208 <HAL_RCC_OscConfig+0x474>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d118      	bne.n	8002068 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002036:	4b74      	ldr	r3, [pc, #464]	@ (8002208 <HAL_RCC_OscConfig+0x474>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a73      	ldr	r2, [pc, #460]	@ (8002208 <HAL_RCC_OscConfig+0x474>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002042:	f7ff fbed 	bl	8001820 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204a:	f7ff fbe9 	bl	8001820 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e10c      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	4b6a      	ldr	r3, [pc, #424]	@ (8002208 <HAL_RCC_OscConfig+0x474>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x2ea>
 8002070:	4b64      	ldr	r3, [pc, #400]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002074:	4a63      	ldr	r2, [pc, #396]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6713      	str	r3, [r2, #112]	@ 0x70
 800207c:	e01c      	b.n	80020b8 <HAL_RCC_OscConfig+0x324>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b05      	cmp	r3, #5
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x30c>
 8002086:	4b5f      	ldr	r3, [pc, #380]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208a:	4a5e      	ldr	r2, [pc, #376]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6713      	str	r3, [r2, #112]	@ 0x70
 8002092:	4b5c      	ldr	r3, [pc, #368]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002096:	4a5b      	ldr	r2, [pc, #364]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6713      	str	r3, [r2, #112]	@ 0x70
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0x324>
 80020a0:	4b58      	ldr	r3, [pc, #352]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a4:	4a57      	ldr	r2, [pc, #348]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ac:	4b55      	ldr	r3, [pc, #340]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b0:	4a54      	ldr	r2, [pc, #336]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80020b2:	f023 0304 	bic.w	r3, r3, #4
 80020b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c0:	f7ff fbae 	bl	8001820 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c6:	e00a      	b.n	80020de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7ff fbaa 	bl	8001820 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e0cb      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020de:	4b49      	ldr	r3, [pc, #292]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0ee      	beq.n	80020c8 <HAL_RCC_OscConfig+0x334>
 80020ea:	e014      	b.n	8002116 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ec:	f7ff fb98 	bl	8001820 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f2:	e00a      	b.n	800210a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f4:	f7ff fb94 	bl	8001820 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002102:	4293      	cmp	r3, r2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e0b5      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210a:	4b3e      	ldr	r3, [pc, #248]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1ee      	bne.n	80020f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002116:	7dfb      	ldrb	r3, [r7, #23]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211c:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	4a38      	ldr	r2, [pc, #224]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002126:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80a1 	beq.w	8002274 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002132:	4b34      	ldr	r3, [pc, #208]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b08      	cmp	r3, #8
 800213c:	d05c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d141      	bne.n	80021ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b31      	ldr	r3, [pc, #196]	@ (800220c <HAL_RCC_OscConfig+0x478>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff fb68 	bl	8001820 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff fb64 	bl	8001820 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e087      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	4b27      	ldr	r3, [pc, #156]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	3b01      	subs	r3, #1
 800218c:	041b      	lsls	r3, r3, #16
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	061b      	lsls	r3, r3, #24
 8002196:	491b      	ldr	r1, [pc, #108]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x478>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7ff fb3d 	bl	8001820 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021aa:	f7ff fb39 	bl	8001820 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e05c      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021bc:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x416>
 80021c8:	e054      	b.n	8002274 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <HAL_RCC_OscConfig+0x478>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fb26 	bl	8001820 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d8:	f7ff fb22 	bl	8001820 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e045      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_RCC_OscConfig+0x470>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x444>
 80021f6:	e03d      	b.n	8002274 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e038      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
 8002204:	40023800 	.word	0x40023800
 8002208:	40007000 	.word	0x40007000
 800220c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002210:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <HAL_RCC_OscConfig+0x4ec>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d028      	beq.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d121      	bne.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d11a      	bne.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002240:	4013      	ands	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002246:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002248:	4293      	cmp	r3, r2
 800224a:	d111      	bne.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	3b01      	subs	r3, #1
 800225a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d107      	bne.n	8002270 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800

08002284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0cc      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002298:	4b68      	ldr	r3, [pc, #416]	@ (800243c <HAL_RCC_ClockConfig+0x1b8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d90c      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b65      	ldr	r3, [pc, #404]	@ (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b63      	ldr	r3, [pc, #396]	@ (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0b8      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d8:	4b59      	ldr	r3, [pc, #356]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4a58      	ldr	r2, [pc, #352]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f0:	4b53      	ldr	r3, [pc, #332]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a52      	ldr	r2, [pc, #328]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b50      	ldr	r3, [pc, #320]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	494d      	ldr	r1, [pc, #308]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d044      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b47      	ldr	r3, [pc, #284]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d119      	bne.n	8002362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e07f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d003      	beq.n	8002342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233e:	2b03      	cmp	r3, #3
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002342:	4b3f      	ldr	r3, [pc, #252]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002352:	4b3b      	ldr	r3, [pc, #236]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e067      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002362:	4b37      	ldr	r3, [pc, #220]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f023 0203 	bic.w	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4934      	ldr	r1, [pc, #208]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	4313      	orrs	r3, r2
 8002372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002374:	f7ff fa54 	bl	8001820 <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237a:	e00a      	b.n	8002392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237c:	f7ff fa50 	bl	8001820 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e04f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002392:	4b2b      	ldr	r3, [pc, #172]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 020c 	and.w	r2, r3, #12
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d1eb      	bne.n	800237c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a4:	4b25      	ldr	r3, [pc, #148]	@ (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d20c      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b22      	ldr	r3, [pc, #136]	@ (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b20      	ldr	r3, [pc, #128]	@ (800243c <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e032      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d8:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4916      	ldr	r1, [pc, #88]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f6:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	490e      	ldr	r1, [pc, #56]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800240a:	f000 f821 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800240e:	4602      	mov	r2, r0
 8002410:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	490a      	ldr	r1, [pc, #40]	@ (8002444 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	5ccb      	ldrb	r3, [r1, r3]
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	4a09      	ldr	r2, [pc, #36]	@ (8002448 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002426:	4b09      	ldr	r3, [pc, #36]	@ (800244c <HAL_RCC_ClockConfig+0x1c8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f9b4 	bl	8001798 <HAL_InitTick>

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00
 8002440:	40023800 	.word	0x40023800
 8002444:	08003da0 	.word	0x08003da0
 8002448:	20000000 	.word	0x20000000
 800244c:	20000004 	.word	0x20000004

08002450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002454:	b094      	sub	sp, #80	@ 0x50
 8002456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	647b      	str	r3, [r7, #68]	@ 0x44
 800245c:	2300      	movs	r3, #0
 800245e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002460:	2300      	movs	r3, #0
 8002462:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002468:	4b79      	ldr	r3, [pc, #484]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d00d      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x40>
 8002474:	2b08      	cmp	r3, #8
 8002476:	f200 80e1 	bhi.w	800263c <HAL_RCC_GetSysClockFreq+0x1ec>
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x34>
 800247e:	2b04      	cmp	r3, #4
 8002480:	d003      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0x3a>
 8002482:	e0db      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002484:	4b73      	ldr	r3, [pc, #460]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x204>)
 8002486:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002488:	e0db      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800248a:	4b73      	ldr	r3, [pc, #460]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x208>)
 800248c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800248e:	e0d8      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002490:	4b6f      	ldr	r3, [pc, #444]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002498:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800249a:	4b6d      	ldr	r3, [pc, #436]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d063      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	099b      	lsrs	r3, r3, #6
 80024ac:	2200      	movs	r2, #0
 80024ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80024ba:	2300      	movs	r3, #0
 80024bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80024be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024c2:	4622      	mov	r2, r4
 80024c4:	462b      	mov	r3, r5
 80024c6:	f04f 0000 	mov.w	r0, #0
 80024ca:	f04f 0100 	mov.w	r1, #0
 80024ce:	0159      	lsls	r1, r3, #5
 80024d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d4:	0150      	lsls	r0, r2, #5
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4621      	mov	r1, r4
 80024dc:	1a51      	subs	r1, r2, r1
 80024de:	6139      	str	r1, [r7, #16]
 80024e0:	4629      	mov	r1, r5
 80024e2:	eb63 0301 	sbc.w	r3, r3, r1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024f4:	4659      	mov	r1, fp
 80024f6:	018b      	lsls	r3, r1, #6
 80024f8:	4651      	mov	r1, sl
 80024fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024fe:	4651      	mov	r1, sl
 8002500:	018a      	lsls	r2, r1, #6
 8002502:	4651      	mov	r1, sl
 8002504:	ebb2 0801 	subs.w	r8, r2, r1
 8002508:	4659      	mov	r1, fp
 800250a:	eb63 0901 	sbc.w	r9, r3, r1
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800251a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800251e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002522:	4690      	mov	r8, r2
 8002524:	4699      	mov	r9, r3
 8002526:	4623      	mov	r3, r4
 8002528:	eb18 0303 	adds.w	r3, r8, r3
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	462b      	mov	r3, r5
 8002530:	eb49 0303 	adc.w	r3, r9, r3
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002542:	4629      	mov	r1, r5
 8002544:	024b      	lsls	r3, r1, #9
 8002546:	4621      	mov	r1, r4
 8002548:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800254c:	4621      	mov	r1, r4
 800254e:	024a      	lsls	r2, r1, #9
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002556:	2200      	movs	r2, #0
 8002558:	62bb      	str	r3, [r7, #40]	@ 0x28
 800255a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800255c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002560:	f7fd fe32 	bl	80001c8 <__aeabi_uldivmod>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4613      	mov	r3, r2
 800256a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800256c:	e058      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256e:	4b38      	ldr	r3, [pc, #224]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	099b      	lsrs	r3, r3, #6
 8002574:	2200      	movs	r2, #0
 8002576:	4618      	mov	r0, r3
 8002578:	4611      	mov	r1, r2
 800257a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800257e:	623b      	str	r3, [r7, #32]
 8002580:	2300      	movs	r3, #0
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
 8002584:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002588:	4642      	mov	r2, r8
 800258a:	464b      	mov	r3, r9
 800258c:	f04f 0000 	mov.w	r0, #0
 8002590:	f04f 0100 	mov.w	r1, #0
 8002594:	0159      	lsls	r1, r3, #5
 8002596:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800259a:	0150      	lsls	r0, r2, #5
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4641      	mov	r1, r8
 80025a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80025a6:	4649      	mov	r1, r9
 80025a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025c0:	ebb2 040a 	subs.w	r4, r2, sl
 80025c4:	eb63 050b 	sbc.w	r5, r3, fp
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	00eb      	lsls	r3, r5, #3
 80025d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d6:	00e2      	lsls	r2, r4, #3
 80025d8:	4614      	mov	r4, r2
 80025da:	461d      	mov	r5, r3
 80025dc:	4643      	mov	r3, r8
 80025de:	18e3      	adds	r3, r4, r3
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	464b      	mov	r3, r9
 80025e4:	eb45 0303 	adc.w	r3, r5, r3
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025f6:	4629      	mov	r1, r5
 80025f8:	028b      	lsls	r3, r1, #10
 80025fa:	4621      	mov	r1, r4
 80025fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002600:	4621      	mov	r1, r4
 8002602:	028a      	lsls	r2, r1, #10
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800260a:	2200      	movs	r2, #0
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	61fa      	str	r2, [r7, #28]
 8002610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002614:	f7fd fdd8 	bl	80001c8 <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4613      	mov	r3, r2
 800261e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002620:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x200>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	3301      	adds	r3, #1
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002630:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800263a:	e002      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800263c:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x204>)
 800263e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002644:	4618      	mov	r0, r3
 8002646:	3750      	adds	r7, #80	@ 0x50
 8002648:	46bd      	mov	sp, r7
 800264a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	00f42400 	.word	0x00f42400
 8002658:	007a1200 	.word	0x007a1200

0800265c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002660:	4b03      	ldr	r3, [pc, #12]	@ (8002670 <HAL_RCC_GetHCLKFreq+0x14>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000000 	.word	0x20000000

08002674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002678:	f7ff fff0 	bl	800265c <HAL_RCC_GetHCLKFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	0a9b      	lsrs	r3, r3, #10
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	4903      	ldr	r1, [pc, #12]	@ (8002698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	08003db0 	.word	0x08003db0

0800269c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e041      	b.n	8002732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe fe6e 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3304      	adds	r3, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4610      	mov	r0, r2
 80026dc:	f000 fe52 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e041      	b.n	80027d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f839 	bl	80027d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2202      	movs	r2, #2
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3304      	adds	r3, #4
 8002776:	4619      	mov	r1, r3
 8002778:	4610      	mov	r0, r2
 800277a:	f000 fe03 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_TIM_PWM_Start+0x24>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e022      	b.n	8002856 <HAL_TIM_PWM_Start+0x6a>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b04      	cmp	r3, #4
 8002814:	d109      	bne.n	800282a <HAL_TIM_PWM_Start+0x3e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	e015      	b.n	8002856 <HAL_TIM_PWM_Start+0x6a>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d109      	bne.n	8002844 <HAL_TIM_PWM_Start+0x58>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b01      	cmp	r3, #1
 800283a:	bf14      	ite	ne
 800283c:	2301      	movne	r3, #1
 800283e:	2300      	moveq	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e008      	b.n	8002856 <HAL_TIM_PWM_Start+0x6a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b01      	cmp	r3, #1
 800284e:	bf14      	ite	ne
 8002850:	2301      	movne	r3, #1
 8002852:	2300      	moveq	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e07c      	b.n	8002958 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d104      	bne.n	800286e <HAL_TIM_PWM_Start+0x82>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800286c:	e013      	b.n	8002896 <HAL_TIM_PWM_Start+0xaa>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b04      	cmp	r3, #4
 8002872:	d104      	bne.n	800287e <HAL_TIM_PWM_Start+0x92>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800287c:	e00b      	b.n	8002896 <HAL_TIM_PWM_Start+0xaa>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d104      	bne.n	800288e <HAL_TIM_PWM_Start+0xa2>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800288c:	e003      	b.n	8002896 <HAL_TIM_PWM_Start+0xaa>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2202      	movs	r2, #2
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2201      	movs	r2, #1
 800289c:	6839      	ldr	r1, [r7, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 f990 	bl	8003bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002960 <HAL_TIM_PWM_Start+0x174>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <HAL_TIM_PWM_Start+0xcc>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002964 <HAL_TIM_PWM_Start+0x178>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <HAL_TIM_PWM_Start+0xd0>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_TIM_PWM_Start+0xd2>
 80028bc:	2300      	movs	r3, #0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a22      	ldr	r2, [pc, #136]	@ (8002960 <HAL_TIM_PWM_Start+0x174>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d022      	beq.n	8002922 <HAL_TIM_PWM_Start+0x136>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e4:	d01d      	beq.n	8002922 <HAL_TIM_PWM_Start+0x136>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002968 <HAL_TIM_PWM_Start+0x17c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d018      	beq.n	8002922 <HAL_TIM_PWM_Start+0x136>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1d      	ldr	r2, [pc, #116]	@ (800296c <HAL_TIM_PWM_Start+0x180>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_TIM_PWM_Start+0x136>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002970 <HAL_TIM_PWM_Start+0x184>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00e      	beq.n	8002922 <HAL_TIM_PWM_Start+0x136>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a16      	ldr	r2, [pc, #88]	@ (8002964 <HAL_TIM_PWM_Start+0x178>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_TIM_PWM_Start+0x136>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a18      	ldr	r2, [pc, #96]	@ (8002974 <HAL_TIM_PWM_Start+0x188>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d004      	beq.n	8002922 <HAL_TIM_PWM_Start+0x136>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a16      	ldr	r2, [pc, #88]	@ (8002978 <HAL_TIM_PWM_Start+0x18c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d111      	bne.n	8002946 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d010      	beq.n	8002956 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002944:	e007      	b.n	8002956 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40010000 	.word	0x40010000
 8002964:	40010400 	.word	0x40010400
 8002968:	40000400 	.word	0x40000400
 800296c:	40000800 	.word	0x40000800
 8002970:	40000c00 	.word	0x40000c00
 8002974:	40014000 	.word	0x40014000
 8002978:	40001800 	.word	0x40001800

0800297c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e041      	b.n	8002a12 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f839 	bl	8002a1a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3304      	adds	r3, #4
 80029b8:	4619      	mov	r1, r3
 80029ba:	4610      	mov	r0, r2
 80029bc:	f000 fce2 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_IC_Start_IT+0x1e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	e013      	b.n	8002a76 <HAL_TIM_IC_Start_IT+0x46>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_IC_Start_IT+0x2e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	e00b      	b.n	8002a76 <HAL_TIM_IC_Start_IT+0x46>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d104      	bne.n	8002a6e <HAL_TIM_IC_Start_IT+0x3e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	e003      	b.n	8002a76 <HAL_TIM_IC_Start_IT+0x46>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d104      	bne.n	8002a88 <HAL_TIM_IC_Start_IT+0x58>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e013      	b.n	8002ab0 <HAL_TIM_IC_Start_IT+0x80>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d104      	bne.n	8002a98 <HAL_TIM_IC_Start_IT+0x68>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e00b      	b.n	8002ab0 <HAL_TIM_IC_Start_IT+0x80>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d104      	bne.n	8002aa8 <HAL_TIM_IC_Start_IT+0x78>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e003      	b.n	8002ab0 <HAL_TIM_IC_Start_IT+0x80>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ab2:	7bbb      	ldrb	r3, [r7, #14]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d102      	bne.n	8002abe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ab8:	7b7b      	ldrb	r3, [r7, #13]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d001      	beq.n	8002ac2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0cc      	b.n	8002c5c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d104      	bne.n	8002ad2 <HAL_TIM_IC_Start_IT+0xa2>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ad0:	e013      	b.n	8002afa <HAL_TIM_IC_Start_IT+0xca>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d104      	bne.n	8002ae2 <HAL_TIM_IC_Start_IT+0xb2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ae0:	e00b      	b.n	8002afa <HAL_TIM_IC_Start_IT+0xca>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d104      	bne.n	8002af2 <HAL_TIM_IC_Start_IT+0xc2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002af0:	e003      	b.n	8002afa <HAL_TIM_IC_Start_IT+0xca>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_IC_Start_IT+0xda>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b08:	e013      	b.n	8002b32 <HAL_TIM_IC_Start_IT+0x102>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_IC_Start_IT+0xea>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b18:	e00b      	b.n	8002b32 <HAL_TIM_IC_Start_IT+0x102>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_IC_Start_IT+0xfa>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b28:	e003      	b.n	8002b32 <HAL_TIM_IC_Start_IT+0x102>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	d841      	bhi.n	8002bbc <HAL_TIM_IC_Start_IT+0x18c>
 8002b38:	a201      	add	r2, pc, #4	@ (adr r2, 8002b40 <HAL_TIM_IC_Start_IT+0x110>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b75 	.word	0x08002b75
 8002b44:	08002bbd 	.word	0x08002bbd
 8002b48:	08002bbd 	.word	0x08002bbd
 8002b4c:	08002bbd 	.word	0x08002bbd
 8002b50:	08002b87 	.word	0x08002b87
 8002b54:	08002bbd 	.word	0x08002bbd
 8002b58:	08002bbd 	.word	0x08002bbd
 8002b5c:	08002bbd 	.word	0x08002bbd
 8002b60:	08002b99 	.word	0x08002b99
 8002b64:	08002bbd 	.word	0x08002bbd
 8002b68:	08002bbd 	.word	0x08002bbd
 8002b6c:	08002bbd 	.word	0x08002bbd
 8002b70:	08002bab 	.word	0x08002bab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0202 	orr.w	r2, r2, #2
 8002b82:	60da      	str	r2, [r3, #12]
      break;
 8002b84:	e01d      	b.n	8002bc2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0204 	orr.w	r2, r2, #4
 8002b94:	60da      	str	r2, [r3, #12]
      break;
 8002b96:	e014      	b.n	8002bc2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0208 	orr.w	r2, r2, #8
 8002ba6:	60da      	str	r2, [r3, #12]
      break;
 8002ba8:	e00b      	b.n	8002bc2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0210 	orr.w	r2, r2, #16
 8002bb8:	60da      	str	r2, [r3, #12]
      break;
 8002bba:	e002      	b.n	8002bc2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d148      	bne.n	8002c5a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fff7 	bl	8003bc4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a22      	ldr	r2, [pc, #136]	@ (8002c64 <HAL_TIM_IC_Start_IT+0x234>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d022      	beq.n	8002c26 <HAL_TIM_IC_Start_IT+0x1f6>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be8:	d01d      	beq.n	8002c26 <HAL_TIM_IC_Start_IT+0x1f6>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1e      	ldr	r2, [pc, #120]	@ (8002c68 <HAL_TIM_IC_Start_IT+0x238>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d018      	beq.n	8002c26 <HAL_TIM_IC_Start_IT+0x1f6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c6c <HAL_TIM_IC_Start_IT+0x23c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_TIM_IC_Start_IT+0x1f6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1b      	ldr	r2, [pc, #108]	@ (8002c70 <HAL_TIM_IC_Start_IT+0x240>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00e      	beq.n	8002c26 <HAL_TIM_IC_Start_IT+0x1f6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	@ (8002c74 <HAL_TIM_IC_Start_IT+0x244>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d009      	beq.n	8002c26 <HAL_TIM_IC_Start_IT+0x1f6>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a18      	ldr	r2, [pc, #96]	@ (8002c78 <HAL_TIM_IC_Start_IT+0x248>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_TIM_IC_Start_IT+0x1f6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a16      	ldr	r2, [pc, #88]	@ (8002c7c <HAL_TIM_IC_Start_IT+0x24c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d111      	bne.n	8002c4a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d010      	beq.n	8002c5a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c48:	e007      	b.n	8002c5a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40010000 	.word	0x40010000
 8002c68:	40000400 	.word	0x40000400
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40000c00 	.word	0x40000c00
 8002c74:	40010400 	.word	0x40010400
 8002c78:	40014000 	.word	0x40014000
 8002c7c:	40001800 	.word	0x40001800

08002c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d020      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01b      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0202 	mvn.w	r2, #2
 8002cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fd fbf4 	bl	80004b8 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fb38 	bl	8003348 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fb3f 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d020      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01b      	beq.n	8002d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0204 	mvn.w	r2, #4
 8002d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fd fbce 	bl	80004b8 <HAL_TIM_IC_CaptureCallback>
 8002d1c:	e005      	b.n	8002d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fb12 	bl	8003348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fb19 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d020      	beq.n	8002d7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01b      	beq.n	8002d7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0208 	mvn.w	r2, #8
 8002d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2204      	movs	r2, #4
 8002d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fd fba8 	bl	80004b8 <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 faec 	bl	8003348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 faf3 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d020      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0210 	mvn.w	r2, #16
 8002d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd fb82 	bl	80004b8 <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fac6 	bl	8003348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 facd 	bl	800335c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00c      	beq.n	8002dec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0201 	mvn.w	r2, #1
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 faa4 	bl	8003334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 ff86 	bl	8003d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 fa9e 	bl	8003370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0220 	mvn.w	r2, #32
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 ff58 	bl	8003d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_IC_ConfigChannel+0x1e>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e088      	b.n	8002f90 <HAL_TIM_IC_ConfigChannel+0x130>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002e9c:	f000 fcce 	bl	800383c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 020c 	bic.w	r2, r2, #12
 8002eae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6999      	ldr	r1, [r3, #24]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	619a      	str	r2, [r3, #24]
 8002ec2:	e060      	b.n	8002f86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d11c      	bne.n	8002f04 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002eda:	f000 fd52 	bl	8003982 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002eec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6999      	ldr	r1, [r3, #24]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	021a      	lsls	r2, r3, #8
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	619a      	str	r2, [r3, #24]
 8002f02:	e040      	b.n	8002f86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d11b      	bne.n	8002f42 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002f1a:	f000 fd9f 	bl	8003a5c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 020c 	bic.w	r2, r2, #12
 8002f2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69d9      	ldr	r1, [r3, #28]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	61da      	str	r2, [r3, #28]
 8002f40:	e021      	b.n	8002f86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	d11c      	bne.n	8002f82 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002f58:	f000 fdbc 	bl	8003ad4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002f6a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69d9      	ldr	r1, [r3, #28]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	021a      	lsls	r2, r3, #8
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	61da      	str	r2, [r3, #28]
 8002f80:	e001      	b.n	8002f86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0ae      	b.n	8003114 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	f200 809f 	bhi.w	8003104 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fcc:	08003001 	.word	0x08003001
 8002fd0:	08003105 	.word	0x08003105
 8002fd4:	08003105 	.word	0x08003105
 8002fd8:	08003105 	.word	0x08003105
 8002fdc:	08003041 	.word	0x08003041
 8002fe0:	08003105 	.word	0x08003105
 8002fe4:	08003105 	.word	0x08003105
 8002fe8:	08003105 	.word	0x08003105
 8002fec:	08003083 	.word	0x08003083
 8002ff0:	08003105 	.word	0x08003105
 8002ff4:	08003105 	.word	0x08003105
 8002ff8:	08003105 	.word	0x08003105
 8002ffc:	080030c3 	.word	0x080030c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fa68 	bl	80034dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0208 	orr.w	r2, r2, #8
 800301a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0204 	bic.w	r2, r2, #4
 800302a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6999      	ldr	r1, [r3, #24]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	619a      	str	r2, [r3, #24]
      break;
 800303e:	e064      	b.n	800310a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fab8 	bl	80035bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800305a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800306a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6999      	ldr	r1, [r3, #24]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	021a      	lsls	r2, r3, #8
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	619a      	str	r2, [r3, #24]
      break;
 8003080:	e043      	b.n	800310a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fb0d 	bl	80036a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0208 	orr.w	r2, r2, #8
 800309c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0204 	bic.w	r2, r2, #4
 80030ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69d9      	ldr	r1, [r3, #28]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	61da      	str	r2, [r3, #28]
      break;
 80030c0:	e023      	b.n	800310a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fb61 	bl	8003790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69da      	ldr	r2, [r3, #28]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69d9      	ldr	r1, [r3, #28]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	021a      	lsls	r2, r3, #8
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	61da      	str	r2, [r3, #28]
      break;
 8003102:	e002      	b.n	800310a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	75fb      	strb	r3, [r7, #23]
      break;
 8003108:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003112:	7dfb      	ldrb	r3, [r7, #23]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_TIM_ConfigClockSource+0x1c>
 8003134:	2302      	movs	r3, #2
 8003136:	e0b4      	b.n	80032a2 <HAL_TIM_ConfigClockSource+0x186>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800315e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003170:	d03e      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003176:	f200 8087 	bhi.w	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 800317a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800317e:	f000 8086 	beq.w	800328e <HAL_TIM_ConfigClockSource+0x172>
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003186:	d87f      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 8003188:	2b70      	cmp	r3, #112	@ 0x70
 800318a:	d01a      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0xa6>
 800318c:	2b70      	cmp	r3, #112	@ 0x70
 800318e:	d87b      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 8003190:	2b60      	cmp	r3, #96	@ 0x60
 8003192:	d050      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x11a>
 8003194:	2b60      	cmp	r3, #96	@ 0x60
 8003196:	d877      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 8003198:	2b50      	cmp	r3, #80	@ 0x50
 800319a:	d03c      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0xfa>
 800319c:	2b50      	cmp	r3, #80	@ 0x50
 800319e:	d873      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d058      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0x13a>
 80031a4:	2b40      	cmp	r3, #64	@ 0x40
 80031a6:	d86f      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 80031a8:	2b30      	cmp	r3, #48	@ 0x30
 80031aa:	d064      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x15a>
 80031ac:	2b30      	cmp	r3, #48	@ 0x30
 80031ae:	d86b      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d060      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x15a>
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d867      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d05c      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x15a>
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d05a      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	e062      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031d2:	f000 fcd7 	bl	8003b84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	609a      	str	r2, [r3, #8]
      break;
 80031ee:	e04f      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003200:	f000 fcc0 	bl	8003b84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003212:	609a      	str	r2, [r3, #8]
      break;
 8003214:	e03c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	461a      	mov	r2, r3
 8003224:	f000 fb7e 	bl	8003924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2150      	movs	r1, #80	@ 0x50
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fc8d 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003234:	e02c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003242:	461a      	mov	r2, r3
 8003244:	f000 fbda 	bl	80039fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2160      	movs	r1, #96	@ 0x60
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fc7d 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003254:	e01c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003262:	461a      	mov	r2, r3
 8003264:	f000 fb5e 	bl	8003924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2140      	movs	r1, #64	@ 0x40
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fc6d 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003274:	e00c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f000 fc64 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 8003286:	e003      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]
      break;
 800328c:	e000      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800328e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b0c      	cmp	r3, #12
 80032be:	d831      	bhi.n	8003324 <HAL_TIM_ReadCapturedValue+0x78>
 80032c0:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	08003325 	.word	0x08003325
 80032d0:	08003325 	.word	0x08003325
 80032d4:	08003325 	.word	0x08003325
 80032d8:	08003307 	.word	0x08003307
 80032dc:	08003325 	.word	0x08003325
 80032e0:	08003325 	.word	0x08003325
 80032e4:	08003325 	.word	0x08003325
 80032e8:	08003311 	.word	0x08003311
 80032ec:	08003325 	.word	0x08003325
 80032f0:	08003325 	.word	0x08003325
 80032f4:	08003325 	.word	0x08003325
 80032f8:	0800331b 	.word	0x0800331b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003302:	60fb      	str	r3, [r7, #12]

      break;
 8003304:	e00f      	b.n	8003326 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	60fb      	str	r3, [r7, #12]

      break;
 800330e:	e00a      	b.n	8003326 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003316:	60fb      	str	r3, [r7, #12]

      break;
 8003318:	e005      	b.n	8003326 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	60fb      	str	r3, [r7, #12]

      break;
 8003322:	e000      	b.n	8003326 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003324:	bf00      	nop
  }

  return tmpreg;
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a46      	ldr	r2, [pc, #280]	@ (80034b0 <TIM_Base_SetConfig+0x12c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a2:	d00f      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a43      	ldr	r2, [pc, #268]	@ (80034b4 <TIM_Base_SetConfig+0x130>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00b      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a42      	ldr	r2, [pc, #264]	@ (80034b8 <TIM_Base_SetConfig+0x134>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a41      	ldr	r2, [pc, #260]	@ (80034bc <TIM_Base_SetConfig+0x138>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a40      	ldr	r2, [pc, #256]	@ (80034c0 <TIM_Base_SetConfig+0x13c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d108      	bne.n	80033d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a35      	ldr	r2, [pc, #212]	@ (80034b0 <TIM_Base_SetConfig+0x12c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d02b      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e4:	d027      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a32      	ldr	r2, [pc, #200]	@ (80034b4 <TIM_Base_SetConfig+0x130>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d023      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a31      	ldr	r2, [pc, #196]	@ (80034b8 <TIM_Base_SetConfig+0x134>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01f      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a30      	ldr	r2, [pc, #192]	@ (80034bc <TIM_Base_SetConfig+0x138>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d01b      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a2f      	ldr	r2, [pc, #188]	@ (80034c0 <TIM_Base_SetConfig+0x13c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d017      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2e      	ldr	r2, [pc, #184]	@ (80034c4 <TIM_Base_SetConfig+0x140>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2d      	ldr	r2, [pc, #180]	@ (80034c8 <TIM_Base_SetConfig+0x144>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00f      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a2c      	ldr	r2, [pc, #176]	@ (80034cc <TIM_Base_SetConfig+0x148>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00b      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2b      	ldr	r2, [pc, #172]	@ (80034d0 <TIM_Base_SetConfig+0x14c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2a      	ldr	r2, [pc, #168]	@ (80034d4 <TIM_Base_SetConfig+0x150>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d003      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a29      	ldr	r2, [pc, #164]	@ (80034d8 <TIM_Base_SetConfig+0x154>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d108      	bne.n	8003448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800343c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a10      	ldr	r2, [pc, #64]	@ (80034b0 <TIM_Base_SetConfig+0x12c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_Base_SetConfig+0xf8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a12      	ldr	r2, [pc, #72]	@ (80034c0 <TIM_Base_SetConfig+0x13c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d103      	bne.n	8003484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d105      	bne.n	80034a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f023 0201 	bic.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	611a      	str	r2, [r3, #16]
  }
}
 80034a2:	bf00      	nop
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40010000 	.word	0x40010000
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40000800 	.word	0x40000800
 80034bc:	40000c00 	.word	0x40000c00
 80034c0:	40010400 	.word	0x40010400
 80034c4:	40014000 	.word	0x40014000
 80034c8:	40014400 	.word	0x40014400
 80034cc:	40014800 	.word	0x40014800
 80034d0:	40001800 	.word	0x40001800
 80034d4:	40001c00 	.word	0x40001c00
 80034d8:	40002000 	.word	0x40002000

080034dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	f023 0201 	bic.w	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800350a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 0302 	bic.w	r3, r3, #2
 8003524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a20      	ldr	r2, [pc, #128]	@ (80035b4 <TIM_OC1_SetConfig+0xd8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d003      	beq.n	8003540 <TIM_OC1_SetConfig+0x64>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a1f      	ldr	r2, [pc, #124]	@ (80035b8 <TIM_OC1_SetConfig+0xdc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d10c      	bne.n	800355a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f023 0308 	bic.w	r3, r3, #8
 8003546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a15      	ldr	r2, [pc, #84]	@ (80035b4 <TIM_OC1_SetConfig+0xd8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_OC1_SetConfig+0x8e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a14      	ldr	r2, [pc, #80]	@ (80035b8 <TIM_OC1_SetConfig+0xdc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d111      	bne.n	800358e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	621a      	str	r2, [r3, #32]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40010400 	.word	0x40010400

080035bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f023 0210 	bic.w	r2, r3, #16
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f023 0320 	bic.w	r3, r3, #32
 8003606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a22      	ldr	r2, [pc, #136]	@ (80036a0 <TIM_OC2_SetConfig+0xe4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d003      	beq.n	8003624 <TIM_OC2_SetConfig+0x68>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a21      	ldr	r2, [pc, #132]	@ (80036a4 <TIM_OC2_SetConfig+0xe8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d10d      	bne.n	8003640 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800362a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800363e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a17      	ldr	r2, [pc, #92]	@ (80036a0 <TIM_OC2_SetConfig+0xe4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_OC2_SetConfig+0x94>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a16      	ldr	r2, [pc, #88]	@ (80036a4 <TIM_OC2_SetConfig+0xe8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d113      	bne.n	8003678 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800365e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	621a      	str	r2, [r3, #32]
}
 8003692:	bf00      	nop
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40010400 	.word	0x40010400

080036a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a21      	ldr	r2, [pc, #132]	@ (8003788 <TIM_OC3_SetConfig+0xe0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d003      	beq.n	800370e <TIM_OC3_SetConfig+0x66>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a20      	ldr	r2, [pc, #128]	@ (800378c <TIM_OC3_SetConfig+0xe4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d10d      	bne.n	800372a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a16      	ldr	r2, [pc, #88]	@ (8003788 <TIM_OC3_SetConfig+0xe0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_OC3_SetConfig+0x92>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a15      	ldr	r2, [pc, #84]	@ (800378c <TIM_OC3_SetConfig+0xe4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d113      	bne.n	8003762 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	621a      	str	r2, [r3, #32]
}
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40010000 	.word	0x40010000
 800378c:	40010400 	.word	0x40010400

08003790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	031b      	lsls	r3, r3, #12
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a12      	ldr	r2, [pc, #72]	@ (8003834 <TIM_OC4_SetConfig+0xa4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_OC4_SetConfig+0x68>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a11      	ldr	r2, [pc, #68]	@ (8003838 <TIM_OC4_SetConfig+0xa8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d109      	bne.n	800380c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	019b      	lsls	r3, r3, #6
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	621a      	str	r2, [r3, #32]
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40010000 	.word	0x40010000
 8003838:	40010400 	.word	0x40010400

0800383c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f023 0201 	bic.w	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4a28      	ldr	r2, [pc, #160]	@ (8003908 <TIM_TI1_SetConfig+0xcc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01b      	beq.n	80038a2 <TIM_TI1_SetConfig+0x66>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003870:	d017      	beq.n	80038a2 <TIM_TI1_SetConfig+0x66>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4a25      	ldr	r2, [pc, #148]	@ (800390c <TIM_TI1_SetConfig+0xd0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <TIM_TI1_SetConfig+0x66>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a24      	ldr	r2, [pc, #144]	@ (8003910 <TIM_TI1_SetConfig+0xd4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00f      	beq.n	80038a2 <TIM_TI1_SetConfig+0x66>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a23      	ldr	r2, [pc, #140]	@ (8003914 <TIM_TI1_SetConfig+0xd8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00b      	beq.n	80038a2 <TIM_TI1_SetConfig+0x66>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a22      	ldr	r2, [pc, #136]	@ (8003918 <TIM_TI1_SetConfig+0xdc>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d007      	beq.n	80038a2 <TIM_TI1_SetConfig+0x66>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a21      	ldr	r2, [pc, #132]	@ (800391c <TIM_TI1_SetConfig+0xe0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_TI1_SetConfig+0x66>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a20      	ldr	r2, [pc, #128]	@ (8003920 <TIM_TI1_SetConfig+0xe4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <TIM_TI1_SetConfig+0x6a>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <TIM_TI1_SetConfig+0x6c>
 80038a6:	2300      	movs	r3, #0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f023 0303 	bic.w	r3, r3, #3
 80038b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	e003      	b.n	80038c6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f023 030a 	bic.w	r3, r3, #10
 80038e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f003 030a 	and.w	r3, r3, #10
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40010000 	.word	0x40010000
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00
 8003918:	40010400 	.word	0x40010400
 800391c:	40014000 	.word	0x40014000
 8003920:	40001800 	.word	0x40001800

08003924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	f023 0201 	bic.w	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800394e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f023 030a 	bic.w	r3, r3, #10
 8003960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003982:	b480      	push	{r7}
 8003984:	b087      	sub	sp, #28
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f023 0210 	bic.w	r2, r3, #16
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	031b      	lsls	r3, r3, #12
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	621a      	str	r2, [r3, #32]
}
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f023 0210 	bic.w	r2, r3, #16
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	031b      	lsls	r3, r3, #12
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	621a      	str	r2, [r3, #32]
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f023 0303 	bic.w	r3, r3, #3
 8003a88:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003aac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	621a      	str	r2, [r3, #32]
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b00:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b12:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	031b      	lsls	r3, r3, #12
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003b26:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	031b      	lsls	r3, r3, #12
 8003b2c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f043 0307 	orr.w	r3, r3, #7
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1a      	ldr	r2, [r3, #32]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	401a      	ands	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e05a      	b.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a21      	ldr	r2, [pc, #132]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c74:	d01d      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d018      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	@ (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	@ (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a15      	ldr	r2, [pc, #84]	@ (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10c      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800
 8003cf8:	40000c00 	.word	0x40000c00
 8003cfc:	40010400 	.word	0x40010400
 8003d00:	40014000 	.word	0x40014000
 8003d04:	40001800 	.word	0x40001800

08003d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <memset>:
 8003d30:	4402      	add	r2, r0
 8003d32:	4603      	mov	r3, r0
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d100      	bne.n	8003d3a <memset+0xa>
 8003d38:	4770      	bx	lr
 8003d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d3e:	e7f9      	b.n	8003d34 <memset+0x4>

08003d40 <__libc_init_array>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	4d0d      	ldr	r5, [pc, #52]	@ (8003d78 <__libc_init_array+0x38>)
 8003d44:	4c0d      	ldr	r4, [pc, #52]	@ (8003d7c <__libc_init_array+0x3c>)
 8003d46:	1b64      	subs	r4, r4, r5
 8003d48:	10a4      	asrs	r4, r4, #2
 8003d4a:	2600      	movs	r6, #0
 8003d4c:	42a6      	cmp	r6, r4
 8003d4e:	d109      	bne.n	8003d64 <__libc_init_array+0x24>
 8003d50:	4d0b      	ldr	r5, [pc, #44]	@ (8003d80 <__libc_init_array+0x40>)
 8003d52:	4c0c      	ldr	r4, [pc, #48]	@ (8003d84 <__libc_init_array+0x44>)
 8003d54:	f000 f818 	bl	8003d88 <_init>
 8003d58:	1b64      	subs	r4, r4, r5
 8003d5a:	10a4      	asrs	r4, r4, #2
 8003d5c:	2600      	movs	r6, #0
 8003d5e:	42a6      	cmp	r6, r4
 8003d60:	d105      	bne.n	8003d6e <__libc_init_array+0x2e>
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
 8003d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d68:	4798      	blx	r3
 8003d6a:	3601      	adds	r6, #1
 8003d6c:	e7ee      	b.n	8003d4c <__libc_init_array+0xc>
 8003d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d72:	4798      	blx	r3
 8003d74:	3601      	adds	r6, #1
 8003d76:	e7f2      	b.n	8003d5e <__libc_init_array+0x1e>
 8003d78:	08003dc0 	.word	0x08003dc0
 8003d7c:	08003dc0 	.word	0x08003dc0
 8003d80:	08003dc0 	.word	0x08003dc0
 8003d84:	08003dc4 	.word	0x08003dc4

08003d88 <_init>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr

08003d94 <_fini>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr
