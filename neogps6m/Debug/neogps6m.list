
neogps6m.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006974  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08006b08  08006b08  00007b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f18  08006f18  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006f18  08006f18  00007f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f20  08006f20  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f20  08006f20  00007f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f24  08006f24  00007f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006f28  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          000002f0  200001d8  200001d8  000081d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200004c8  200004c8  000081d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000947b  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ac7  00000000  00000000  0001167f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  00013148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000060b  00000000  00000000  00013940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213c0  00000000  00000000  00013f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a606  00000000  00000000  0003530b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5bf6  00000000  00000000  0003f911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00105507  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b4  00000000  00000000  0010554c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00108600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006aec 	.word	0x08006aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08006aec 	.word	0x08006aec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b9a0 	b.w	8000f04 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f83c 	bl	8000c48 <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2lz>:
 8000bdc:	b538      	push	{r3, r4, r5, lr}
 8000bde:	2200      	movs	r2, #0
 8000be0:	2300      	movs	r3, #0
 8000be2:	4604      	mov	r4, r0
 8000be4:	460d      	mov	r5, r1
 8000be6:	f7ff ff71 	bl	8000acc <__aeabi_dcmplt>
 8000bea:	b928      	cbnz	r0, 8000bf8 <__aeabi_d2lz+0x1c>
 8000bec:	4620      	mov	r0, r4
 8000bee:	4629      	mov	r1, r5
 8000bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bf4:	f000 b80a 	b.w	8000c0c <__aeabi_d2ulz>
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bfe:	f000 f805 	bl	8000c0c <__aeabi_d2ulz>
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	bd38      	pop	{r3, r4, r5, pc}
 8000c0a:	bf00      	nop

08000c0c <__aeabi_d2ulz>:
 8000c0c:	b5d0      	push	{r4, r6, r7, lr}
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <__aeabi_d2ulz+0x34>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	4606      	mov	r6, r0
 8000c14:	460f      	mov	r7, r1
 8000c16:	f7ff fce7 	bl	80005e8 <__aeabi_dmul>
 8000c1a:	f7ff ffa7 	bl	8000b6c <__aeabi_d2uiz>
 8000c1e:	4604      	mov	r4, r0
 8000c20:	f7ff fc68 	bl	80004f4 <__aeabi_ui2d>
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <__aeabi_d2ulz+0x38>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f7ff fcde 	bl	80005e8 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4630      	mov	r0, r6
 8000c32:	4639      	mov	r1, r7
 8000c34:	f7ff fb20 	bl	8000278 <__aeabi_dsub>
 8000c38:	f7ff ff98 	bl	8000b6c <__aeabi_d2uiz>
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c40:	3df00000 	.word	0x3df00000
 8000c44:	41f00000 	.word	0x41f00000

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d106      	bne.n	8000f2a <prv_parse_number+0x22>
        t = gh->p.term_str;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3371      	adds	r3, #113	@ 0x71
 8000f20:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000f22:	e002      	b.n	8000f2a <prv_parse_number+0x22>
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <prv_parse_number+0x30>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b20      	cmp	r3, #32
 8000f36:	d0f5      	beq.n	8000f24 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b2d      	cmp	r3, #45	@ 0x2d
 8000f3e:	d104      	bne.n	8000f4a <prv_parse_number+0x42>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <prv_parse_number+0x44>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8000f4e:	e00d      	b.n	8000f6c <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	3b30      	subs	r3, #48	@ 0x30
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <prv_parse_number+0x7a>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f78:	d903      	bls.n	8000f82 <prv_parse_number+0x7a>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b39      	cmp	r3, #57	@ 0x39
 8000f80:	d9e6      	bls.n	8000f50 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8000f82:	7afb      	ldrb	r3, [r7, #11]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <prv_parse_number+0x86>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	e000      	b.n	8000f90 <prv_parse_number+0x88>
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d106      	bne.n	8000fba <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3371      	adds	r3, #113	@ 0x71
 8000fb0:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000fb2:	e002      	b.n	8000fba <prv_parse_float_number+0x1e>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <prv_parse_float_number+0x2c>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b20      	cmp	r3, #32
 8000fc6:	d0f5      	beq.n	8000fb4 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8000fc8:	2100      	movs	r1, #0
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f003 fd98 	bl	8004b00 <strtod>
 8000fd0:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8000fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fd8:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fdc:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe0:	eef0 0a67 	vmov.f32	s1, s15
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffd0 	bl	8000f9c <prv_parse_float_number>
 8000ffc:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8001000:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001004:	f7ff fd8a 	bl	8000b1c <__aeabi_d2iz>
 8001008:	4603      	mov	r3, r0
 800100a:	4a1d      	ldr	r2, [pc, #116]	@ (8001080 <prv_parse_lat_long+0x94>)
 800100c:	fb82 1203 	smull	r1, r2, r2, r3
 8001010:	1152      	asrs	r2, r2, #5
 8001012:	17db      	asrs	r3, r3, #31
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fa7c 	bl	8000514 <__aeabi_i2d>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <prv_parse_lat_long+0x98>)
 800102a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800102e:	f7ff fadb 	bl	80005e8 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800103a:	f7ff f91d 	bl	8000278 <__aeabi_dsub>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <prv_parse_lat_long+0x9c>)
 800104c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001050:	f7ff fbf4 	bl	800083c <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800105c:	f7ff f90e 	bl	800027c <__adddf3>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800106c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001070:	eeb0 0a47 	vmov.f32	s0, s14
 8001074:	eef0 0a67 	vmov.f32	s1, s15
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	51eb851f 	.word	0x51eb851f
 8001084:	40590000 	.word	0x40590000
 8001088:	404e0000 	.word	0x404e0000

0800108c <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 800108c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 800109c:	2900      	cmp	r1, #0
 800109e:	d169      	bne.n	8001174 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3371      	adds	r3, #113	@ 0x71
 80010a4:	2206      	movs	r2, #6
 80010a6:	49ba      	ldr	r1, [pc, #744]	@ (8001390 <prv_parse_term+0x304>)
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 fe42 	bl	8004d32 <strncmp>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d009      	beq.n	80010c8 <prv_parse_term+0x3c>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3371      	adds	r3, #113	@ 0x71
 80010b8:	2206      	movs	r2, #6
 80010ba:	49b6      	ldr	r1, [pc, #728]	@ (8001394 <prv_parse_term+0x308>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f003 fe38 	bl	8004d32 <strncmp>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d104      	bne.n	80010d2 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80010d0:	e04e      	b.n	8001170 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3371      	adds	r3, #113	@ 0x71
 80010d6:	2206      	movs	r2, #6
 80010d8:	49af      	ldr	r1, [pc, #700]	@ (8001398 <prv_parse_term+0x30c>)
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fe29 	bl	8004d32 <strncmp>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d009      	beq.n	80010fa <prv_parse_term+0x6e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3371      	adds	r3, #113	@ 0x71
 80010ea:	2206      	movs	r2, #6
 80010ec:	49ab      	ldr	r1, [pc, #684]	@ (800139c <prv_parse_term+0x310>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fe1f 	bl	8004d32 <strncmp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d104      	bne.n	8001104 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2202      	movs	r2, #2
 80010fe:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001102:	e035      	b.n	8001170 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3371      	adds	r3, #113	@ 0x71
 8001108:	2206      	movs	r2, #6
 800110a:	49a5      	ldr	r1, [pc, #660]	@ (80013a0 <prv_parse_term+0x314>)
 800110c:	4618      	mov	r0, r3
 800110e:	f003 fe10 	bl	8004d32 <strncmp>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d009      	beq.n	800112c <prv_parse_term+0xa0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3371      	adds	r3, #113	@ 0x71
 800111c:	2206      	movs	r2, #6
 800111e:	49a1      	ldr	r1, [pc, #644]	@ (80013a4 <prv_parse_term+0x318>)
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fe06 	bl	8004d32 <strncmp>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d104      	bne.n	8001136 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2203      	movs	r2, #3
 8001130:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001134:	e01c      	b.n	8001170 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3371      	adds	r3, #113	@ 0x71
 800113a:	2206      	movs	r2, #6
 800113c:	499a      	ldr	r1, [pc, #616]	@ (80013a8 <prv_parse_term+0x31c>)
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fdf7 	bl	8004d32 <strncmp>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <prv_parse_term+0xd2>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3371      	adds	r3, #113	@ 0x71
 800114e:	2206      	movs	r2, #6
 8001150:	4996      	ldr	r1, [pc, #600]	@ (80013ac <prv_parse_term+0x320>)
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fded 	bl	8004d32 <strncmp>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d104      	bne.n	8001168 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2204      	movs	r2, #4
 8001162:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001166:	e003      	b.n	8001170 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 8001170:	2301      	movs	r3, #1
 8001172:	e231      	b.n	80015d8 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 800117a:	2900      	cmp	r1, #0
 800117c:	f000 822b 	beq.w	80015d6 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001186:	2901      	cmp	r1, #1
 8001188:	f040 80c9 	bne.w	800131e <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001192:	3b01      	subs	r3, #1
 8001194:	2b0a      	cmp	r3, #10
 8001196:	f200 8213 	bhi.w	80015c0 <prv_parse_term+0x534>
 800119a:	a201      	add	r2, pc, #4	@ (adr r2, 80011a0 <prv_parse_term+0x114>)
 800119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a0:	080011cd 	.word	0x080011cd
 80011a4:	08001247 	.word	0x08001247
 80011a8:	0800125d 	.word	0x0800125d
 80011ac:	08001287 	.word	0x08001287
 80011b0:	0800129d 	.word	0x0800129d
 80011b4:	080012c7 	.word	0x080012c7
 80011b8:	080012db 	.word	0x080012db
 80011bc:	080015c1 	.word	0x080015c1
 80011c0:	080012ef 	.word	0x080012ef
 80011c4:	080015c1 	.word	0x080015c1
 80011c8:	08001307 	.word	0x08001307
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80011d2:	3b30      	subs	r3, #48	@ 0x30
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	4413      	add	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80011e6:	4413      	add	r3, r2
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	3b30      	subs	r3, #48	@ 0x30
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80011fa:	3b30      	subs	r3, #48	@ 0x30
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4413      	add	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800120e:	4413      	add	r3, r2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	3b30      	subs	r3, #48	@ 0x30
 8001214:	b2da      	uxtb	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8001222:	3b30      	subs	r3, #48	@ 0x30
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	4413      	add	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	b2da      	uxtb	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001236:	4413      	add	r3, r2
 8001238:	b2db      	uxtb	r3, r3
 800123a:	3b30      	subs	r3, #48	@ 0x30
 800123c:	b2da      	uxtb	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8001244:	e1c7      	b.n	80015d6 <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fed0 	bl	8000fec <prv_parse_lat_long>
 800124c:	eeb0 7a40 	vmov.f32	s14, s0
 8001250:	eef0 7a60 	vmov.f32	s15, s1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 800125a:	e1bc      	b.n	80015d6 <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001262:	2b53      	cmp	r3, #83	@ 0x53
 8001264:	d005      	beq.n	8001272 <prv_parse_term+0x1e6>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800126c:	2b73      	cmp	r3, #115	@ 0x73
 800126e:	f040 81a9 	bne.w	80015c4 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001278:	4690      	mov	r8, r2
 800127a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 8001284:	e19e      	b.n	80015c4 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff feb0 	bl	8000fec <prv_parse_lat_long>
 800128c:	eeb0 7a40 	vmov.f32	s14, s0
 8001290:	eef0 7a60 	vmov.f32	s15, s1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 800129a:	e19c      	b.n	80015d6 <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80012a2:	2b57      	cmp	r3, #87	@ 0x57
 80012a4:	d005      	beq.n	80012b2 <prv_parse_term+0x226>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80012ac:	2b77      	cmp	r3, #119	@ 0x77
 80012ae:	f040 818b 	bne.w	80015c8 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80012b8:	4614      	mov	r4, r2
 80012ba:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 80012c4:	e180      	b.n	80015c8 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80012c6:	2100      	movs	r1, #0
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fe1d 	bl	8000f08 <prv_parse_number>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                break;
 80012d8:	e17d      	b.n	80015d6 <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80012da:	2100      	movs	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fe13 	bl	8000f08 <prv_parse_number>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 80012ec:	e173      	b.n	80015d6 <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 80012ee:	2100      	movs	r1, #0
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff fe53 	bl	8000f9c <prv_parse_float_number>
 80012f6:	eeb0 7a40 	vmov.f32	s14, s0
 80012fa:	eef0 7a60 	vmov.f32	s15, s1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001304:	e167      	b.n	80015d6 <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001306:	2100      	movs	r1, #0
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fe47 	bl	8000f9c <prv_parse_float_number>
 800130e:	eeb0 7a40 	vmov.f32	s14, s0
 8001312:	eef0 7a60 	vmov.f32	s15, s1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 800131c:	e15b      	b.n	80015d6 <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001324:	2902      	cmp	r1, #2
 8001326:	f040 8083 	bne.w	8001430 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001330:	3b02      	subs	r3, #2
 8001332:	2b0f      	cmp	r3, #15
 8001334:	d860      	bhi.n	80013f8 <prv_parse_term+0x36c>
 8001336:	a201      	add	r2, pc, #4	@ (adr r2, 800133c <prv_parse_term+0x2b0>)
 8001338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133c:	0800137d 	.word	0x0800137d
 8001340:	080013f9 	.word	0x080013f9
 8001344:	080013f9 	.word	0x080013f9
 8001348:	080013f9 	.word	0x080013f9
 800134c:	080013f9 	.word	0x080013f9
 8001350:	080013f9 	.word	0x080013f9
 8001354:	080013f9 	.word	0x080013f9
 8001358:	080013f9 	.word	0x080013f9
 800135c:	080013f9 	.word	0x080013f9
 8001360:	080013f9 	.word	0x080013f9
 8001364:	080013f9 	.word	0x080013f9
 8001368:	080013f9 	.word	0x080013f9
 800136c:	080013f9 	.word	0x080013f9
 8001370:	080013b1 	.word	0x080013b1
 8001374:	080013c9 	.word	0x080013c9
 8001378:	080013e1 	.word	0x080013e1
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 800137c:	2100      	movs	r1, #0
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fdc2 	bl	8000f08 <prv_parse_number>
 8001384:	4603      	mov	r3, r0
 8001386:	b2da      	uxtb	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
                break;
 800138e:	e122      	b.n	80015d6 <prv_parse_term+0x54a>
 8001390:	08006b08 	.word	0x08006b08
 8001394:	08006b10 	.word	0x08006b10
 8001398:	08006b18 	.word	0x08006b18
 800139c:	08006b20 	.word	0x08006b20
 80013a0:	08006b28 	.word	0x08006b28
 80013a4:	08006b30 	.word	0x08006b30
 80013a8:	08006b38 	.word	0x08006b38
 80013ac:	08006b40 	.word	0x08006b40
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80013b0:	2100      	movs	r1, #0
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fdf2 	bl	8000f9c <prv_parse_float_number>
 80013b8:	eeb0 7a40 	vmov.f32	s14, s0
 80013bc:	eef0 7a60 	vmov.f32	s15, s1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 80013c6:	e106      	b.n	80015d6 <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80013c8:	2100      	movs	r1, #0
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fde6 	bl	8000f9c <prv_parse_float_number>
 80013d0:	eeb0 7a40 	vmov.f32	s14, s0
 80013d4:	eef0 7a60 	vmov.f32	s15, s1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 80013de:	e0fa      	b.n	80015d6 <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80013e0:	2100      	movs	r1, #0
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fdda 	bl	8000f9c <prv_parse_float_number>
 80013e8:	eeb0 7a40 	vmov.f32	s14, s0
 80013ec:	eef0 7a60 	vmov.f32	s15, s1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80013f6:	e0ee      	b.n	80015d6 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80013fe:	2b02      	cmp	r3, #2
 8001400:	f240 80e4 	bls.w	80015cc <prv_parse_term+0x540>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800140a:	2b0e      	cmp	r3, #14
 800140c:	f200 80de 	bhi.w	80015cc <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8001410:	2100      	movs	r1, #0
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fd78 	bl	8000f08 <prv_parse_number>
 8001418:	4602      	mov	r2, r0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001420:	3b03      	subs	r3, #3
 8001422:	b2d1      	uxtb	r1, r2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	460a      	mov	r2, r1
 800142a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800142e:	e0cd      	b.n	80015cc <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001436:	2903      	cmp	r1, #3
 8001438:	d11b      	bne.n	8001472 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001440:	2b02      	cmp	r3, #2
 8001442:	d002      	beq.n	800144a <prv_parse_term+0x3be>
 8001444:	2b03      	cmp	r3, #3
 8001446:	d00a      	beq.n	800145e <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001448:	e0c5      	b.n	80015d6 <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 800144a:	2100      	movs	r1, #0
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fd5b 	bl	8000f08 <prv_parse_number>
 8001452:	4603      	mov	r3, r0
 8001454:	b2da      	uxtb	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 800145c:	e0bb      	b.n	80015d6 <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800145e:	2100      	movs	r1, #0
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fd51 	bl	8000f08 <prv_parse_number>
 8001466:	4603      	mov	r3, r0
 8001468:	b2da      	uxtb	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 8001470:	e0b1      	b.n	80015d6 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001478:	2904      	cmp	r1, #4
 800147a:	f040 80ac 	bne.w	80015d6 <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8001484:	3902      	subs	r1, #2
 8001486:	2909      	cmp	r1, #9
 8001488:	f200 80a2 	bhi.w	80015d0 <prv_parse_term+0x544>
 800148c:	a001      	add	r0, pc, #4	@ (adr r0, 8001494 <prv_parse_term+0x408>)
 800148e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014bd 	.word	0x080014bd
 8001498:	080015d1 	.word	0x080015d1
 800149c:	080015d1 	.word	0x080015d1
 80014a0:	080015d1 	.word	0x080015d1
 80014a4:	080015d1 	.word	0x080015d1
 80014a8:	080014d7 	.word	0x080014d7
 80014ac:	080014ef 	.word	0x080014ef
 80014b0:	08001507 	.word	0x08001507
 80014b4:	08001581 	.word	0x08001581
 80014b8:	08001599 	.word	0x08001599
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80014c2:	2b41      	cmp	r3, #65	@ 0x41
 80014c4:	bf0c      	ite	eq
 80014c6:	2301      	moveq	r3, #1
 80014c8:	2300      	movne	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 80014d4:	e07f      	b.n	80015d6 <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80014d6:	2100      	movs	r1, #0
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fd5f 	bl	8000f9c <prv_parse_float_number>
 80014de:	eeb0 7a40 	vmov.f32	s14, s0
 80014e2:	eef0 7a60 	vmov.f32	s15, s1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 80014ec:	e073      	b.n	80015d6 <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 80014ee:	2100      	movs	r1, #0
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fd53 	bl	8000f9c <prv_parse_float_number>
 80014f6:	eeb0 7a40 	vmov.f32	s14, s0
 80014fa:	eef0 7a60 	vmov.f32	s15, s1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 8001504:	e067      	b.n	80015d6 <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800150c:	3b30      	subs	r3, #48	@ 0x30
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4413      	add	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001520:	4413      	add	r3, r2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	3b30      	subs	r3, #48	@ 0x30
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001534:	3b30      	subs	r3, #48	@ 0x30
 8001536:	b2db      	uxtb	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	4413      	add	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	b2da      	uxtb	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001548:	4413      	add	r3, r2
 800154a:	b2db      	uxtb	r3, r3
 800154c:	3b30      	subs	r3, #48	@ 0x30
 800154e:	b2da      	uxtb	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800155c:	3b30      	subs	r3, #48	@ 0x30
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	4413      	add	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001570:	4413      	add	r3, r2
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3b30      	subs	r3, #48	@ 0x30
 8001576:	b2da      	uxtb	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 800157e:	e02a      	b.n	80015d6 <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8001580:	2100      	movs	r1, #0
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fd0a 	bl	8000f9c <prv_parse_float_number>
 8001588:	eeb0 7a40 	vmov.f32	s14, s0
 800158c:	eef0 7a60 	vmov.f32	s15, s1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8001596:	e01e      	b.n	80015d6 <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 800159e:	2957      	cmp	r1, #87	@ 0x57
 80015a0:	d004      	beq.n	80015ac <prv_parse_term+0x520>
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80015a8:	2977      	cmp	r1, #119	@ 0x77
 80015aa:	d113      	bne.n	80015d4 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 80015b2:	4602      	mov	r2, r0
 80015b4:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 80015be:	e009      	b.n	80015d4 <prv_parse_term+0x548>
                break;
 80015c0:	bf00      	nop
 80015c2:	e008      	b.n	80015d6 <prv_parse_term+0x54a>
                break;
 80015c4:	bf00      	nop
 80015c6:	e006      	b.n	80015d6 <prv_parse_term+0x54a>
                break;
 80015c8:	bf00      	nop
 80015ca:	e004      	b.n	80015d6 <prv_parse_term+0x54a>
                break;
 80015cc:	bf00      	nop
 80015ce:	e002      	b.n	80015d6 <prv_parse_term+0x54a>
            default:
                break;
 80015d0:	bf00      	nop
 80015d2:	e000      	b.n	80015d6 <prv_parse_term+0x54a>
                break;
 80015d4:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015e2:	bf00      	nop

080015e4 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80015f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80015f4:	d90d      	bls.n	8001612 <prv_check_crc+0x2e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80015fc:	2b39      	cmp	r3, #57	@ 0x39
 80015fe:	d808      	bhi.n	8001612 <prv_check_crc+0x2e>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001606:	3b30      	subs	r3, #48	@ 0x30
 8001608:	b2db      	uxtb	r3, r3
 800160a:	b25b      	sxtb	r3, r3
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	b25a      	sxtb	r2, r3
 8001610:	e026      	b.n	8001660 <prv_check_crc+0x7c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001618:	2b60      	cmp	r3, #96	@ 0x60
 800161a:	d90d      	bls.n	8001638 <prv_check_crc+0x54>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001622:	2b7a      	cmp	r3, #122	@ 0x7a
 8001624:	d808      	bhi.n	8001638 <prv_check_crc+0x54>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800162c:	3b57      	subs	r3, #87	@ 0x57
 800162e:	b2db      	uxtb	r3, r3
 8001630:	b25b      	sxtb	r3, r3
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	b25a      	sxtb	r2, r3
 8001636:	e013      	b.n	8001660 <prv_check_crc+0x7c>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800163e:	2b40      	cmp	r3, #64	@ 0x40
 8001640:	d90d      	bls.n	800165e <prv_check_crc+0x7a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001648:	2b5a      	cmp	r3, #90	@ 0x5a
 800164a:	d808      	bhi.n	800165e <prv_check_crc+0x7a>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001652:	3b37      	subs	r3, #55	@ 0x37
 8001654:	b2db      	uxtb	r3, r3
 8001656:	b25b      	sxtb	r3, r3
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	b25a      	sxtb	r2, r3
 800165c:	e000      	b.n	8001660 <prv_check_crc+0x7c>
 800165e:	2200      	movs	r2, #0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001666:	2b2f      	cmp	r3, #47	@ 0x2f
 8001668:	d90c      	bls.n	8001684 <prv_check_crc+0xa0>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001670:	2b39      	cmp	r3, #57	@ 0x39
 8001672:	d807      	bhi.n	8001684 <prv_check_crc+0xa0>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800167a:	b25b      	sxtb	r3, r3
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	b25b      	sxtb	r3, r3
 8001682:	e028      	b.n	80016d6 <prv_check_crc+0xf2>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800168a:	2b60      	cmp	r3, #96	@ 0x60
 800168c:	d90e      	bls.n	80016ac <prv_check_crc+0xc8>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001694:	2b7a      	cmp	r3, #122	@ 0x7a
 8001696:	d809      	bhi.n	80016ac <prv_check_crc+0xc8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800169e:	3b57      	subs	r3, #87	@ 0x57
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	e014      	b.n	80016d6 <prv_check_crc+0xf2>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80016b2:	2b40      	cmp	r3, #64	@ 0x40
 80016b4:	d90e      	bls.n	80016d4 <prv_check_crc+0xf0>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80016bc:	2b5a      	cmp	r3, #90	@ 0x5a
 80016be:	d809      	bhi.n	80016d4 <prv_check_crc+0xf0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80016c6:	3b37      	subs	r3, #55	@ 0x37
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	e000      	b.n	80016d6 <prv_check_crc+0xf2>
 80016d4:	2300      	movs	r3, #0
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001708:	2b01      	cmp	r3, #1
 800170a:	d136      	bne.n	800177a <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001778:	e061      	b.n	800183e <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001780:	2b02      	cmp	r3, #2
 8001782:	d121      	bne.n	80017c8 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	33a1      	adds	r3, #161	@ 0xa1
 80017be:	220c      	movs	r2, #12
 80017c0:	4619      	mov	r1, r3
 80017c2:	f003 fb3c 	bl	8004e3e <memcpy>
 80017c6:	e03a      	b.n	800183e <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d106      	bne.n	80017e0 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80017de:	e02e      	b.n	800183e <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d129      	bne.n	800183e <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001850:	22b0      	movs	r2, #176	@ 0xb0
 8001852:	2100      	movs	r1, #0
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f003 fa64 	bl	8004d22 <memset>
    return 1;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001874:	e0ad      	b.n	80019d2 <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b24      	cmp	r3, #36	@ 0x24
 800187c:	d128      	bne.n	80018d0 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3370      	adds	r3, #112	@ 0x70
 8001882:	2240      	movs	r2, #64	@ 0x40
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f003 fa4b 	bl	8004d22 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001892:	2b0b      	cmp	r3, #11
 8001894:	f200 8097 	bhi.w	80019c6 <lwgps_process+0x162>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800189e:	4619      	mov	r1, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80018ce:	e07a      	b.n	80019c6 <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b2c      	cmp	r3, #44	@ 0x2c
 80018d6:	d11d      	bne.n	8001914 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f7ff fbd7 	bl	800108c <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4053      	eors	r3, r2
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001908:	3301      	adds	r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001912:	e058      	b.n	80019c6 <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b2a      	cmp	r3, #42	@ 0x2a
 800191a:	d117      	bne.n	800194c <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fbb5 	bl	800108c <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001940:	3301      	adds	r3, #1
 8001942:	b2da      	uxtb	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 800194a:	e03c      	b.n	80019c6 <lwgps_process+0x162>
        } else if (*d == '\r') {
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b0d      	cmp	r3, #13
 8001952:	d109      	bne.n	8001968 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7ff fe45 	bl	80015e4 <prv_check_crc>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d032      	beq.n	80019c6 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7ff feca 	bl	80016fa <prv_copy_from_tmp_memory>
 8001966:	e02e      	b.n	80019c6 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4053      	eors	r3, r2
 800197e:	b2da      	uxtb	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800198c:	2b0b      	cmp	r3, #11
 800198e:	d81a      	bhi.n	80019c6 <lwgps_process+0x162>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001996:	4619      	mov	r1, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019aa:	3301      	adds	r3, #1
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f47f af4e 	bne.w	8001876 <lwgps_process+0x12>
        }
    }
    return 1;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_UART_RxCpltCallback>:
uint8_t rx_index = 0;
uint8_t rx_data = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a17      	ldr	r2, [pc, #92]	@ (8001a4c <HAL_UART_RxCpltCallback+0x68>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d127      	bne.n	8001a44 <HAL_UART_RxCpltCallback+0x60>
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80019f4:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <HAL_UART_RxCpltCallback+0x6c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b0a      	cmp	r3, #10
 80019fa:	d010      	beq.n	8001a1e <HAL_UART_RxCpltCallback+0x3a>
 80019fc:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <HAL_UART_RxCpltCallback+0x70>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 8001a06:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <HAL_UART_RxCpltCallback+0x70>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	b2d1      	uxtb	r1, r2
 8001a0e:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_UART_RxCpltCallback+0x70>)
 8001a10:	7011      	strb	r1, [r2, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_UART_RxCpltCallback+0x6c>)
 8001a16:	7819      	ldrb	r1, [r3, #0]
 8001a18:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <HAL_UART_RxCpltCallback+0x74>)
 8001a1a:	5499      	strb	r1, [r3, r2]
 8001a1c:	e00d      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index+1);
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <HAL_UART_RxCpltCallback+0x70>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	461a      	mov	r2, r3
 8001a26:	490c      	ldr	r1, [pc, #48]	@ (8001a58 <HAL_UART_RxCpltCallback+0x74>)
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <HAL_UART_RxCpltCallback+0x78>)
 8001a2a:	f7ff ff1b 	bl	8001864 <lwgps_process>
			rx_index = 0;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_UART_RxCpltCallback+0x70>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_UART_RxCpltCallback+0x6c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4904      	ldr	r1, [pc, #16]	@ (8001a50 <HAL_UART_RxCpltCallback+0x6c>)
 8001a3e:	4803      	ldr	r0, [pc, #12]	@ (8001a4c <HAL_UART_RxCpltCallback+0x68>)
 8001a40:	f001 fb38 	bl	80030b4 <HAL_UART_Receive_IT>
	}
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200001f4 	.word	0x200001f4
 8001a50:	20000371 	.word	0x20000371
 8001a54:	20000370 	.word	0x20000370
 8001a58:	200002f0 	.word	0x200002f0
 8001a5c:	20000240 	.word	0x20000240

08001a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a64:	f000 fa8c 	bl	8001f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a68:	f000 f814 	bl	8001a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6c:	f000 f8a6 	bl	8001bbc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001a70:	f000 f87a 	bl	8001b68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  	  lwgps_init(&gps);
 8001a74:	4804      	ldr	r0, [pc, #16]	@ (8001a88 <main+0x28>)
 8001a76:	f7ff fee7 	bl	8001848 <lwgps_init>
    HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4903      	ldr	r1, [pc, #12]	@ (8001a8c <main+0x2c>)
 8001a7e:	4804      	ldr	r0, [pc, #16]	@ (8001a90 <main+0x30>)
 8001a80:	f001 fb18 	bl	80030b4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <main+0x24>
 8001a88:	20000240 	.word	0x20000240
 8001a8c:	20000371 	.word	0x20000371
 8001a90:	200001f4 	.word	0x200001f4

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b094      	sub	sp, #80	@ 0x50
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	f107 0320 	add.w	r3, r7, #32
 8001a9e:	2230      	movs	r2, #48	@ 0x30
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 f93d 	bl	8004d22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	4b28      	ldr	r3, [pc, #160]	@ (8001b60 <SystemClock_Config+0xcc>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	4a27      	ldr	r2, [pc, #156]	@ (8001b60 <SystemClock_Config+0xcc>)
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac8:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <SystemClock_Config+0xcc>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <SystemClock_Config+0xd0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a21      	ldr	r2, [pc, #132]	@ (8001b64 <SystemClock_Config+0xd0>)
 8001ade:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <SystemClock_Config+0xd0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001af0:	2302      	movs	r3, #2
 8001af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af4:	2301      	movs	r3, #1
 8001af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af8:	2310      	movs	r3, #16
 8001afa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afc:	2302      	movs	r3, #2
 8001afe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b00:	2300      	movs	r3, #0
 8001b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b04:	2308      	movs	r3, #8
 8001b06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b08:	23a8      	movs	r3, #168	@ 0xa8
 8001b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b10:	2307      	movs	r3, #7
 8001b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 fde3 	bl	80026e4 <HAL_RCC_OscConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b24:	f000 f872 	bl	8001c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b28:	230f      	movs	r3, #15
 8001b2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b34:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2105      	movs	r1, #5
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 f844 	bl	8002bd4 <HAL_RCC_ClockConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b52:	f000 f85b 	bl	8001c0c <Error_Handler>
  }
}
 8001b56:	bf00      	nop
 8001b58:	3750      	adds	r7, #80	@ 0x50
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40007000 	.word	0x40007000

08001b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <MX_USART1_UART_Init+0x50>)
 8001b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b72:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b74:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b8e:	220c      	movs	r2, #12
 8001b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <MX_USART1_UART_Init+0x4c>)
 8001ba0:	f001 fa38 	bl	8003014 <HAL_UART_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001baa:	f000 f82f 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200001f4 	.word	0x200001f4
 8001bb8:	40011000 	.word	0x40011000

08001bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <MX_GPIO_Init+0x4c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	4a0f      	ldr	r2, [pc, #60]	@ (8001c08 <MX_GPIO_Init+0x4c>)
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <MX_GPIO_Init+0x4c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <MX_GPIO_Init+0x4c>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a08      	ldr	r2, [pc, #32]	@ (8001c08 <MX_GPIO_Init+0x4c>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <MX_GPIO_Init+0x4c>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c10:	b672      	cpsid	i
}
 8001c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <Error_Handler+0x8>

08001c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	4a0f      	ldr	r2, [pc, #60]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a08      	ldr	r2, [pc, #32]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c56:	2007      	movs	r0, #7
 8001c58:	f000 fad4 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800

08001c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	@ 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1d      	ldr	r2, [pc, #116]	@ (8001cfc <HAL_UART_MspInit+0x94>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d134      	bne.n	8001cf4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <HAL_UART_MspInit+0x98>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	4a1b      	ldr	r2, [pc, #108]	@ (8001d00 <HAL_UART_MspInit+0x98>)
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9a:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <HAL_UART_MspInit+0x98>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <HAL_UART_MspInit+0x98>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <HAL_UART_MspInit+0x98>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_UART_MspInit+0x98>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4809      	ldr	r0, [pc, #36]	@ (8001d04 <HAL_UART_MspInit+0x9c>)
 8001ce0:	f000 fb64 	bl	80023ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2025      	movs	r0, #37	@ 0x25
 8001cea:	f000 fa96 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cee:	2025      	movs	r0, #37	@ 0x25
 8001cf0:	f000 faaf 	bl	8002252 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	@ 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40011000 	.word	0x40011000
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000

08001d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <NMI_Handler+0x4>

08001d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <HardFault_Handler+0x4>

08001d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <MemManage_Handler+0x4>

08001d20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <BusFault_Handler+0x4>

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <UsageFault_Handler+0x4>

08001d30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5e:	f000 f961 	bl	8002024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <USART1_IRQHandler+0x10>)
 8001d6e:	f001 f9c7 	bl	8003100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200001f4 	.word	0x200001f4

08001d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return 1;
 8001d80:	2301      	movs	r3, #1
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <_kill>:

int _kill(int pid, int sig)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d96:	f003 f825 	bl	8004de4 <__errno>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2216      	movs	r2, #22
 8001d9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_exit>:

void _exit (int status)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ffe7 	bl	8001d8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dbe:	bf00      	nop
 8001dc0:	e7fd      	b.n	8001dbe <_exit+0x12>

08001dc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e00a      	b.n	8001dea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	4601      	mov	r1, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	60ba      	str	r2, [r7, #8]
 8001de0:	b2ca      	uxtb	r2, r1
 8001de2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3301      	adds	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dbf0      	blt.n	8001dd4 <_read+0x12>
  }

  return len;
 8001df2:	687b      	ldr	r3, [r7, #4]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e009      	b.n	8001e22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	60ba      	str	r2, [r7, #8]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	dbf1      	blt.n	8001e0e <_write+0x12>
  }
  return len;
 8001e2a:	687b      	ldr	r3, [r7, #4]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_close>:

int _close(int file)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e5c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_isatty>:

int _isatty(int file)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b085      	sub	sp, #20
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea4:	4a14      	ldr	r2, [pc, #80]	@ (8001ef8 <_sbrk+0x5c>)
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <_sbrk+0x60>)
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <_sbrk+0x64>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <_sbrk+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d207      	bcs.n	8001edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ecc:	f002 ff8a 	bl	8004de4 <__errno>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	e009      	b.n	8001ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001edc:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	@ (8001f00 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a05      	ldr	r2, [pc, #20]	@ (8001f00 <_sbrk+0x64>)
 8001eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20020000 	.word	0x20020000
 8001efc:	00000400 	.word	0x00000400
 8001f00:	20000374 	.word	0x20000374
 8001f04:	200004c8 	.word	0x200004c8

08001f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <SystemInit+0x20>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <SystemInit+0x20>)
 8001f14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f30:	f7ff ffea 	bl	8001f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f34:	480c      	ldr	r0, [pc, #48]	@ (8001f68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f36:	490d      	ldr	r1, [pc, #52]	@ (8001f6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f38:	4a0d      	ldr	r2, [pc, #52]	@ (8001f70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f3c:	e002      	b.n	8001f44 <LoopCopyDataInit>

08001f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f42:	3304      	adds	r3, #4

08001f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f48:	d3f9      	bcc.n	8001f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f50:	e001      	b.n	8001f56 <LoopFillZerobss>

08001f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f54:	3204      	adds	r2, #4

08001f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f5a:	f002 ff49 	bl	8004df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f5e:	f7ff fd7f 	bl	8001a60 <main>
  bx  lr    
 8001f62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f6c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f70:	08006f28 	.word	0x08006f28
  ldr r2, =_sbss
 8001f74:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f78:	200004c8 	.word	0x200004c8

08001f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f7c:	e7fe      	b.n	8001f7c <ADC_IRQHandler>
	...

08001f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f84:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc0 <HAL_Init+0x40>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc0 <HAL_Init+0x40>)
 8001f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <HAL_Init+0x40>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <HAL_Init+0x40>)
 8001f96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f9c:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <HAL_Init+0x40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a07      	ldr	r2, [pc, #28]	@ (8001fc0 <HAL_Init+0x40>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f000 f92b 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f000 f808 	bl	8001fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb4:	f7ff fe30 	bl	8001c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023c00 	.word	0x40023c00

08001fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fcc:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <HAL_InitTick+0x54>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <HAL_InitTick+0x58>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f943 	bl	800226e <HAL_SYSTICK_Config>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00e      	b.n	8002010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	d80a      	bhi.n	800200e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f000 f90b 	bl	800221a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002004:	4a06      	ldr	r2, [pc, #24]	@ (8002020 <HAL_InitTick+0x5c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000000 	.word	0x20000000
 800201c:	20000008 	.word	0x20000008
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <HAL_IncTick+0x20>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <HAL_IncTick+0x24>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4413      	add	r3, r2
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <HAL_IncTick+0x24>)
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000008 	.word	0x20000008
 8002048:	20000378 	.word	0x20000378

0800204c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <HAL_GetTick+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000378 	.word	0x20000378

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	@ (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	@ (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff8e 	bl	8002104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff29 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff3e 	bl	80020ac <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff8e 	bl	8002158 <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5d 	bl	8002104 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff31 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffa2 	bl	80021c0 <SysTick_Config>
 800227c:	4603      	mov	r3, r0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff feda 	bl	800204c <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d008      	beq.n	80022b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2280      	movs	r2, #128	@ 0x80
 80022aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e052      	b.n	800235e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0216 	bic.w	r2, r2, #22
 80022c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d103      	bne.n	80022e8 <HAL_DMA_Abort+0x62>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0208 	bic.w	r2, r2, #8
 80022f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002308:	e013      	b.n	8002332 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800230a:	f7ff fe9f 	bl	800204c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b05      	cmp	r3, #5
 8002316:	d90c      	bls.n	8002332 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2203      	movs	r2, #3
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e015      	b.n	800235e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e4      	bne.n	800230a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002344:	223f      	movs	r2, #63	@ 0x3f
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d004      	beq.n	8002384 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2280      	movs	r2, #128	@ 0x80
 800237e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e00c      	b.n	800239e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2205      	movs	r2, #5
 8002388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e16b      	b.n	80026a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 815a 	bne.w	800269a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d017      	beq.n	800249c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80b4 	beq.w	800269a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b60      	ldr	r3, [pc, #384]	@ (80026b8 <HAL_GPIO_Init+0x30c>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	4a5f      	ldr	r2, [pc, #380]	@ (80026b8 <HAL_GPIO_Init+0x30c>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002540:	6453      	str	r3, [r2, #68]	@ 0x44
 8002542:	4b5d      	ldr	r3, [pc, #372]	@ (80026b8 <HAL_GPIO_Init+0x30c>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254e:	4a5b      	ldr	r2, [pc, #364]	@ (80026bc <HAL_GPIO_Init+0x310>)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	220f      	movs	r2, #15
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a52      	ldr	r2, [pc, #328]	@ (80026c0 <HAL_GPIO_Init+0x314>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02b      	beq.n	80025d2 <HAL_GPIO_Init+0x226>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a51      	ldr	r2, [pc, #324]	@ (80026c4 <HAL_GPIO_Init+0x318>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d025      	beq.n	80025ce <HAL_GPIO_Init+0x222>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a50      	ldr	r2, [pc, #320]	@ (80026c8 <HAL_GPIO_Init+0x31c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01f      	beq.n	80025ca <HAL_GPIO_Init+0x21e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4f      	ldr	r2, [pc, #316]	@ (80026cc <HAL_GPIO_Init+0x320>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d019      	beq.n	80025c6 <HAL_GPIO_Init+0x21a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4e      	ldr	r2, [pc, #312]	@ (80026d0 <HAL_GPIO_Init+0x324>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0x216>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4d      	ldr	r2, [pc, #308]	@ (80026d4 <HAL_GPIO_Init+0x328>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_Init+0x212>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4c      	ldr	r2, [pc, #304]	@ (80026d8 <HAL_GPIO_Init+0x32c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x20e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4b      	ldr	r2, [pc, #300]	@ (80026dc <HAL_GPIO_Init+0x330>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_GPIO_Init+0x20a>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e00e      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025b6:	2308      	movs	r3, #8
 80025b8:	e00c      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ba:	2306      	movs	r3, #6
 80025bc:	e00a      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025be:	2305      	movs	r3, #5
 80025c0:	e008      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025c2:	2304      	movs	r3, #4
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025c6:	2303      	movs	r3, #3
 80025c8:	e004      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025d2:	2300      	movs	r3, #0
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f002 0203 	and.w	r2, r2, #3
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	4093      	lsls	r3, r2
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e4:	4935      	ldr	r1, [pc, #212]	@ (80026bc <HAL_GPIO_Init+0x310>)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f2:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002616:	4a32      	ldr	r2, [pc, #200]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800261c:	4b30      	ldr	r3, [pc, #192]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002640:	4a27      	ldr	r2, [pc, #156]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002646:	4b26      	ldr	r3, [pc, #152]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266a:	4a1d      	ldr	r2, [pc, #116]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002670:	4b1b      	ldr	r3, [pc, #108]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002694:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3301      	adds	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	f67f ae90 	bls.w	80023c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3724      	adds	r7, #36	@ 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40013800 	.word	0x40013800
 80026c0:	40020000 	.word	0x40020000
 80026c4:	40020400 	.word	0x40020400
 80026c8:	40020800 	.word	0x40020800
 80026cc:	40020c00 	.word	0x40020c00
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40021400 	.word	0x40021400
 80026d8:	40021800 	.word	0x40021800
 80026dc:	40021c00 	.word	0x40021c00
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e267      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d075      	beq.n	80027ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002702:	4b88      	ldr	r3, [pc, #544]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b04      	cmp	r3, #4
 800270c:	d00c      	beq.n	8002728 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270e:	4b85      	ldr	r3, [pc, #532]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002716:	2b08      	cmp	r3, #8
 8002718:	d112      	bne.n	8002740 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271a:	4b82      	ldr	r3, [pc, #520]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002722:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002726:	d10b      	bne.n	8002740 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	4b7e      	ldr	r3, [pc, #504]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d05b      	beq.n	80027ec <HAL_RCC_OscConfig+0x108>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d157      	bne.n	80027ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e242      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002748:	d106      	bne.n	8002758 <HAL_RCC_OscConfig+0x74>
 800274a:	4b76      	ldr	r3, [pc, #472]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a75      	ldr	r2, [pc, #468]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e01d      	b.n	8002794 <HAL_RCC_OscConfig+0xb0>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x98>
 8002762:	4b70      	ldr	r3, [pc, #448]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a6f      	ldr	r2, [pc, #444]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b6d      	ldr	r3, [pc, #436]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6c      	ldr	r2, [pc, #432]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0xb0>
 800277c:	4b69      	ldr	r3, [pc, #420]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a68      	ldr	r2, [pc, #416]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b66      	ldr	r3, [pc, #408]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a65      	ldr	r2, [pc, #404]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 800278e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d013      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff fc56 	bl	800204c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a4:	f7ff fc52 	bl	800204c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	@ 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e207      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0xc0>
 80027c2:	e014      	b.n	80027ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7ff fc42 	bl	800204c <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027cc:	f7ff fc3e 	bl	800204c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	@ 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e1f3      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	4b51      	ldr	r3, [pc, #324]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0xe8>
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d063      	beq.n	80028c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002806:	4b47      	ldr	r3, [pc, #284]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800280e:	2b08      	cmp	r3, #8
 8002810:	d11c      	bne.n	800284c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002812:	4b44      	ldr	r3, [pc, #272]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d116      	bne.n	800284c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	4b41      	ldr	r3, [pc, #260]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_RCC_OscConfig+0x152>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e1c7      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002836:	4b3b      	ldr	r3, [pc, #236]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4937      	ldr	r1, [pc, #220]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	e03a      	b.n	80028c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002854:	4b34      	ldr	r3, [pc, #208]	@ (8002928 <HAL_RCC_OscConfig+0x244>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285a:	f7ff fbf7 	bl	800204c <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002862:	f7ff fbf3 	bl	800204c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e1a8      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002874:	4b2b      	ldr	r3, [pc, #172]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	4b28      	ldr	r3, [pc, #160]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4925      	ldr	r1, [pc, #148]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]
 8002894:	e015      	b.n	80028c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002896:	4b24      	ldr	r3, [pc, #144]	@ (8002928 <HAL_RCC_OscConfig+0x244>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7ff fbd6 	bl	800204c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a4:	f7ff fbd2 	bl	800204c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e187      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d036      	beq.n	800293c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d016      	beq.n	8002904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d6:	4b15      	ldr	r3, [pc, #84]	@ (800292c <HAL_RCC_OscConfig+0x248>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7ff fbb6 	bl	800204c <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e4:	f7ff fbb2 	bl	800204c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e167      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 80028f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x200>
 8002902:	e01b      	b.n	800293c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002904:	4b09      	ldr	r3, [pc, #36]	@ (800292c <HAL_RCC_OscConfig+0x248>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290a:	f7ff fb9f 	bl	800204c <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	e00e      	b.n	8002930 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002912:	f7ff fb9b 	bl	800204c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d907      	bls.n	8002930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e150      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
 8002924:	40023800 	.word	0x40023800
 8002928:	42470000 	.word	0x42470000
 800292c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002930:	4b88      	ldr	r3, [pc, #544]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1ea      	bne.n	8002912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8097 	beq.w	8002a78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294e:	4b81      	ldr	r3, [pc, #516]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	4a7c      	ldr	r2, [pc, #496]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002968:	6413      	str	r3, [r2, #64]	@ 0x40
 800296a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002976:	2301      	movs	r3, #1
 8002978:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297a:	4b77      	ldr	r3, [pc, #476]	@ (8002b58 <HAL_RCC_OscConfig+0x474>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d118      	bne.n	80029b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002986:	4b74      	ldr	r3, [pc, #464]	@ (8002b58 <HAL_RCC_OscConfig+0x474>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a73      	ldr	r2, [pc, #460]	@ (8002b58 <HAL_RCC_OscConfig+0x474>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002992:	f7ff fb5b 	bl	800204c <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7ff fb57 	bl	800204c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e10c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002b58 <HAL_RCC_OscConfig+0x474>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x2ea>
 80029c0:	4b64      	ldr	r3, [pc, #400]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c4:	4a63      	ldr	r2, [pc, #396]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x324>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x30c>
 80029d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	4a5e      	ldr	r2, [pc, #376]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0x324>
 80029f0:	4b58      	ldr	r3, [pc, #352]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f4:	4a57      	ldr	r2, [pc, #348]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fc:	4b55      	ldr	r3, [pc, #340]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	4a54      	ldr	r2, [pc, #336]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a02:	f023 0304 	bic.w	r3, r3, #4
 8002a06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d015      	beq.n	8002a3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7ff fb1c 	bl	800204c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7ff fb18 	bl	800204c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0cb      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2e:	4b49      	ldr	r3, [pc, #292]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0ee      	beq.n	8002a18 <HAL_RCC_OscConfig+0x334>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3c:	f7ff fb06 	bl	800204c <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f7ff fb02 	bl	800204c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e0b5      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ee      	bne.n	8002a44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6c:	4b39      	ldr	r3, [pc, #228]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	4a38      	ldr	r2, [pc, #224]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80a1 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a82:	4b34      	ldr	r3, [pc, #208]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d05c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d141      	bne.n	8002b1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b31      	ldr	r3, [pc, #196]	@ (8002b5c <HAL_RCC_OscConfig+0x478>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fad6 	bl	800204c <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7ff fad2 	bl	800204c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e087      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	019b      	lsls	r3, r3, #6
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	3b01      	subs	r3, #1
 8002adc:	041b      	lsls	r3, r3, #16
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	061b      	lsls	r3, r3, #24
 8002ae6:	491b      	ldr	r1, [pc, #108]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aec:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <HAL_RCC_OscConfig+0x478>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7ff faab 	bl	800204c <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afa:	f7ff faa7 	bl	800204c <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e05c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0c:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x416>
 8002b18:	e054      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1a:	4b10      	ldr	r3, [pc, #64]	@ (8002b5c <HAL_RCC_OscConfig+0x478>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7ff fa94 	bl	800204c <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b28:	f7ff fa90 	bl	800204c <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e045      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x444>
 8002b46:	e03d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e038      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd0 <HAL_RCC_OscConfig+0x4ec>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d028      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d121      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d11a      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d111      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0cc      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b68      	ldr	r3, [pc, #416]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d90c      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b65      	ldr	r3, [pc, #404]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b63      	ldr	r3, [pc, #396]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b8      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c28:	4b59      	ldr	r3, [pc, #356]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a58      	ldr	r2, [pc, #352]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c40:	4b53      	ldr	r3, [pc, #332]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a52      	ldr	r2, [pc, #328]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b50      	ldr	r3, [pc, #320]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	494d      	ldr	r1, [pc, #308]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d044      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b47      	ldr	r3, [pc, #284]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d119      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c92:	4b3f      	ldr	r3, [pc, #252]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e06f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e067      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb2:	4b37      	ldr	r3, [pc, #220]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4934      	ldr	r1, [pc, #208]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7ff f9c2 	bl	800204c <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ccc:	f7ff f9be 	bl	800204c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e04f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 020c 	and.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d1eb      	bne.n	8002ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b25      	ldr	r3, [pc, #148]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d20c      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b22      	ldr	r3, [pc, #136]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b19      	ldr	r3, [pc, #100]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4916      	ldr	r1, [pc, #88]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d46:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	490e      	ldr	r1, [pc, #56]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d5a:	f000 f821 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	490a      	ldr	r1, [pc, #40]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	5ccb      	ldrb	r3, [r1, r3]
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	4a09      	ldr	r2, [pc, #36]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d76:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f922 	bl	8001fc4 <HAL_InitTick>

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023c00 	.word	0x40023c00
 8002d90:	40023800 	.word	0x40023800
 8002d94:	08006b48 	.word	0x08006b48
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	20000004 	.word	0x20000004

08002da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da4:	b094      	sub	sp, #80	@ 0x50
 8002da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db8:	4b79      	ldr	r3, [pc, #484]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d00d      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x40>
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	f200 80e1 	bhi.w	8002f8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d003      	beq.n	8002dda <HAL_RCC_GetSysClockFreq+0x3a>
 8002dd2:	e0db      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b73      	ldr	r3, [pc, #460]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dd8:	e0db      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dda:	4b73      	ldr	r3, [pc, #460]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dde:	e0d8      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de0:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002de8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dea:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d063      	beq.n	8002ebe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df6:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e12:	4622      	mov	r2, r4
 8002e14:	462b      	mov	r3, r5
 8002e16:	f04f 0000 	mov.w	r0, #0
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	0159      	lsls	r1, r3, #5
 8002e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e24:	0150      	lsls	r0, r2, #5
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	1a51      	subs	r1, r2, r1
 8002e2e:	6139      	str	r1, [r7, #16]
 8002e30:	4629      	mov	r1, r5
 8002e32:	eb63 0301 	sbc.w	r3, r3, r1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e44:	4659      	mov	r1, fp
 8002e46:	018b      	lsls	r3, r1, #6
 8002e48:	4651      	mov	r1, sl
 8002e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e4e:	4651      	mov	r1, sl
 8002e50:	018a      	lsls	r2, r1, #6
 8002e52:	4651      	mov	r1, sl
 8002e54:	ebb2 0801 	subs.w	r8, r2, r1
 8002e58:	4659      	mov	r1, fp
 8002e5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e72:	4690      	mov	r8, r2
 8002e74:	4699      	mov	r9, r3
 8002e76:	4623      	mov	r3, r4
 8002e78:	eb18 0303 	adds.w	r3, r8, r3
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	462b      	mov	r3, r5
 8002e80:	eb49 0303 	adc.w	r3, r9, r3
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e92:	4629      	mov	r1, r5
 8002e94:	024b      	lsls	r3, r1, #9
 8002e96:	4621      	mov	r1, r4
 8002e98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	024a      	lsls	r2, r1, #9
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002eb0:	f7fd fe7c 	bl	8000bac <__aeabi_uldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4613      	mov	r3, r2
 8002eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ebc:	e058      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ebe:	4b38      	ldr	r3, [pc, #224]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	099b      	lsrs	r3, r3, #6
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	4611      	mov	r1, r2
 8002eca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ed8:	4642      	mov	r2, r8
 8002eda:	464b      	mov	r3, r9
 8002edc:	f04f 0000 	mov.w	r0, #0
 8002ee0:	f04f 0100 	mov.w	r1, #0
 8002ee4:	0159      	lsls	r1, r3, #5
 8002ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eea:	0150      	lsls	r0, r2, #5
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f10:	ebb2 040a 	subs.w	r4, r2, sl
 8002f14:	eb63 050b 	sbc.w	r5, r3, fp
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	00eb      	lsls	r3, r5, #3
 8002f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f26:	00e2      	lsls	r2, r4, #3
 8002f28:	4614      	mov	r4, r2
 8002f2a:	461d      	mov	r5, r3
 8002f2c:	4643      	mov	r3, r8
 8002f2e:	18e3      	adds	r3, r4, r3
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	464b      	mov	r3, r9
 8002f34:	eb45 0303 	adc.w	r3, r5, r3
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f46:	4629      	mov	r1, r5
 8002f48:	028b      	lsls	r3, r1, #10
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f50:	4621      	mov	r1, r4
 8002f52:	028a      	lsls	r2, r1, #10
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	61fa      	str	r2, [r7, #28]
 8002f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f64:	f7fd fe22 	bl	8000bac <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f8a:	e002      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3750      	adds	r7, #80	@ 0x50
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	00f42400 	.word	0x00f42400
 8002fa8:	007a1200 	.word	0x007a1200

08002fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	@ (8002fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000000 	.word	0x20000000

08002fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fc8:	f7ff fff0 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b05      	ldr	r3, [pc, #20]	@ (8002fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	0a9b      	lsrs	r3, r3, #10
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	4903      	ldr	r1, [pc, #12]	@ (8002fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fda:	5ccb      	ldrb	r3, [r1, r3]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	08006b58 	.word	0x08006b58

08002fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ff0:	f7ff ffdc 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b05      	ldr	r3, [pc, #20]	@ (800300c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	0b5b      	lsrs	r3, r3, #13
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4903      	ldr	r1, [pc, #12]	@ (8003010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40023800 	.word	0x40023800
 8003010:	08006b58 	.word	0x08006b58

08003014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e042      	b.n	80030ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe fe14 	bl	8001c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	@ 0x24
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fcdb 	bl	8003a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800306c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800307c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800308c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d112      	bne.n	80030f4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_UART_Receive_IT+0x26>
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00b      	b.n	80030f6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 faba 	bl	8003664 <UART_Start_Receive_IT>
 80030f0:	4603      	mov	r3, r0
 80030f2:	e000      	b.n	80030f6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0ba      	sub	sp, #232	@ 0xe8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800313e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_UART_IRQHandler+0x66>
 8003152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fb99 	bl	8003896 <UART_Receive_IT>
      return;
 8003164:	e25b      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80de 	beq.w	800332c <HAL_UART_IRQHandler+0x22c>
 8003170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d106      	bne.n	800318a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003180:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80d1 	beq.w	800332c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <HAL_UART_IRQHandler+0xae>
 8003196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800319a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_UART_IRQHandler+0xd2>
 80031ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	f043 0202 	orr.w	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_UART_IRQHandler+0xf6>
 80031de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ee:	f043 0204 	orr.w	r2, r3, #4
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d011      	beq.n	8003226 <HAL_UART_IRQHandler+0x126>
 8003202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800320e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f043 0208 	orr.w	r2, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 81f2 	beq.w	8003614 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_UART_IRQHandler+0x14e>
 800323c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fb24 	bl	8003896 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003258:	2b40      	cmp	r3, #64	@ 0x40
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <HAL_UART_IRQHandler+0x17a>
 8003272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d04f      	beq.n	800331a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa2c 	bl	80036d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328a:	2b40      	cmp	r3, #64	@ 0x40
 800328c:	d141      	bne.n	8003312 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3314      	adds	r3, #20
 8003294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3314      	adds	r3, #20
 80032b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1d9      	bne.n	800328e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d013      	beq.n	800330a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e6:	4a7e      	ldr	r2, [pc, #504]	@ (80034e0 <HAL_UART_IRQHandler+0x3e0>)
 80032e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff f839 	bl	8002366 <HAL_DMA_Abort_IT>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003304:	4610      	mov	r0, r2
 8003306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	e00e      	b.n	8003328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f994 	bl	8003638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003310:	e00a      	b.n	8003328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f990 	bl	8003638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	e006      	b.n	8003328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f98c 	bl	8003638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003326:	e175      	b.n	8003614 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	bf00      	nop
    return;
 800332a:	e173      	b.n	8003614 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 814f 	bne.w	80035d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8148 	beq.w	80035d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8141 	beq.w	80035d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003372:	2b40      	cmp	r3, #64	@ 0x40
 8003374:	f040 80b6 	bne.w	80034e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003384:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8145 	beq.w	8003618 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003396:	429a      	cmp	r2, r3
 8003398:	f080 813e 	bcs.w	8003618 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ae:	f000 8088 	beq.w	80034c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	330c      	adds	r3, #12
 80033b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	330c      	adds	r3, #12
 80033da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1d9      	bne.n	80033b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3314      	adds	r3, #20
 8003404:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003406:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003408:	e853 3f00 	ldrex	r3, [r3]
 800340c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800340e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3314      	adds	r3, #20
 800341e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003422:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003426:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003428:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800342a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e1      	bne.n	80033fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3314      	adds	r3, #20
 8003440:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800344a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800344c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3314      	adds	r3, #20
 800345a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800345e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003460:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003464:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800346c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e3      	bne.n	800343a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003492:	f023 0310 	bic.w	r3, r3, #16
 8003496:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e3      	bne.n	8003480 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe fee2 	bl	8002286 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f8b7 	bl	800364c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034de:	e09b      	b.n	8003618 <HAL_UART_IRQHandler+0x518>
 80034e0:	0800379f 	.word	0x0800379f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 808e 	beq.w	800361c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8089 	beq.w	800361c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800351a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003520:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800352e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003530:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003534:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800353c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e3      	bne.n	800350a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3314      	adds	r3, #20
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	623b      	str	r3, [r7, #32]
   return(result);
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3314      	adds	r3, #20
 8003562:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003566:	633a      	str	r2, [r7, #48]	@ 0x30
 8003568:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800356c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e3      	bne.n	8003542 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	330c      	adds	r3, #12
 800358e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	60fb      	str	r3, [r7, #12]
   return(result);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035ac:	61fa      	str	r2, [r7, #28]
 80035ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	617b      	str	r3, [r7, #20]
   return(result);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e3      	bne.n	8003588 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035ca:	4619      	mov	r1, r3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f83d 	bl	800364c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035d2:	e023      	b.n	800361c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_UART_IRQHandler+0x4f4>
 80035e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8ea 	bl	80037c6 <UART_Transmit_IT>
    return;
 80035f2:	e014      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <HAL_UART_IRQHandler+0x51e>
 8003600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f92a 	bl	8003866 <UART_EndTransmit_IT>
    return;
 8003612:	e004      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
    return;
 8003614:	bf00      	nop
 8003616:	e002      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
      return;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
      return;
 800361c:	bf00      	nop
  }
}
 800361e:	37e8      	adds	r7, #232	@ 0xe8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	4613      	mov	r3, r2
 8003670:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	88fa      	ldrh	r2, [r7, #6]
 8003682:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2222      	movs	r2, #34	@ 0x22
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0220 	orr.w	r2, r2, #32
 80036c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b095      	sub	sp, #84	@ 0x54
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	330c      	adds	r3, #12
 80036e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003700:	643a      	str	r2, [r7, #64]	@ 0x40
 8003702:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e5      	bne.n	80036e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3314      	adds	r3, #20
 800371a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	61fb      	str	r3, [r7, #28]
   return(result);
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3314      	adds	r3, #20
 8003732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003734:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003736:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800373a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e5      	bne.n	8003714 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	2b01      	cmp	r3, #1
 800374e:	d119      	bne.n	8003784 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f023 0310 	bic.w	r3, r3, #16
 8003766:	647b      	str	r3, [r7, #68]	@ 0x44
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003770:	61ba      	str	r2, [r7, #24]
 8003772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6979      	ldr	r1, [r7, #20]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	613b      	str	r3, [r7, #16]
   return(result);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003792:	bf00      	nop
 8003794:	3754      	adds	r7, #84	@ 0x54
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff ff3d 	bl	8003638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b21      	cmp	r3, #33	@ 0x21
 80037d8:	d13e      	bne.n	8003858 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e2:	d114      	bne.n	800380e <UART_Transmit_IT+0x48>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d110      	bne.n	800380e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003800:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	1c9a      	adds	r2, r3, #2
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	621a      	str	r2, [r3, #32]
 800380c:	e008      	b.n	8003820 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6211      	str	r1, [r2, #32]
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29b      	uxth	r3, r3
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4619      	mov	r1, r3
 800382e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10f      	bne.n	8003854 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003842:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003852:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	e000      	b.n	800385a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
  }
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff fecc 	bl	8003624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b08c      	sub	sp, #48	@ 0x30
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b22      	cmp	r3, #34	@ 0x22
 80038a8:	f040 80ae 	bne.w	8003a08 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b4:	d117      	bne.n	80038e6 <UART_Receive_IT+0x50>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d113      	bne.n	80038e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038de:	1c9a      	adds	r2, r3, #2
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80038e4:	e026      	b.n	8003934 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f8:	d007      	beq.n	800390a <UART_Receive_IT+0x74>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <UART_Receive_IT+0x82>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e008      	b.n	800392a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003924:	b2da      	uxtb	r2, r3
 8003926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003928:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29b      	uxth	r3, r3
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4619      	mov	r1, r3
 8003942:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003944:	2b00      	cmp	r3, #0
 8003946:	d15d      	bne.n	8003a04 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0220 	bic.w	r2, r2, #32
 8003956:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003966:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	2b01      	cmp	r3, #1
 800398c:	d135      	bne.n	80039fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	613b      	str	r3, [r7, #16]
   return(result);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f023 0310 	bic.w	r3, r3, #16
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b4:	623a      	str	r2, [r7, #32]
 80039b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	69f9      	ldr	r1, [r7, #28]
 80039ba:	6a3a      	ldr	r2, [r7, #32]
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e5      	bne.n	8003994 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b10      	cmp	r3, #16
 80039d4:	d10a      	bne.n	80039ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fe2a 	bl	800364c <HAL_UARTEx_RxEventCallback>
 80039f8:	e002      	b.n	8003a00 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd fff2 	bl	80019e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e002      	b.n	8003a0a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e000      	b.n	8003a0a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
  }
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3730      	adds	r7, #48	@ 0x30
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a18:	b0c0      	sub	sp, #256	@ 0x100
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	68d9      	ldr	r1, [r3, #12]
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	ea40 0301 	orr.w	r3, r0, r1
 8003a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a6c:	f021 010c 	bic.w	r1, r1, #12
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8e:	6999      	ldr	r1, [r3, #24]
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	ea40 0301 	orr.w	r3, r0, r1
 8003a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b8f      	ldr	r3, [pc, #572]	@ (8003ce0 <UART_SetConfig+0x2cc>)
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d005      	beq.n	8003ab4 <UART_SetConfig+0xa0>
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4b8d      	ldr	r3, [pc, #564]	@ (8003ce4 <UART_SetConfig+0x2d0>)
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d104      	bne.n	8003abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ab4:	f7ff fa9a 	bl	8002fec <HAL_RCC_GetPCLK2Freq>
 8003ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003abc:	e003      	b.n	8003ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003abe:	f7ff fa81 	bl	8002fc4 <HAL_RCC_GetPCLK1Freq>
 8003ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad0:	f040 810c 	bne.w	8003cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ade:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	462b      	mov	r3, r5
 8003aea:	1891      	adds	r1, r2, r2
 8003aec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003aee:	415b      	adcs	r3, r3
 8003af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003af6:	4621      	mov	r1, r4
 8003af8:	eb12 0801 	adds.w	r8, r2, r1
 8003afc:	4629      	mov	r1, r5
 8003afe:	eb43 0901 	adc.w	r9, r3, r1
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b16:	4690      	mov	r8, r2
 8003b18:	4699      	mov	r9, r3
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	eb18 0303 	adds.w	r3, r8, r3
 8003b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b24:	462b      	mov	r3, r5
 8003b26:	eb49 0303 	adc.w	r3, r9, r3
 8003b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b42:	460b      	mov	r3, r1
 8003b44:	18db      	adds	r3, r3, r3
 8003b46:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b48:	4613      	mov	r3, r2
 8003b4a:	eb42 0303 	adc.w	r3, r2, r3
 8003b4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b58:	f7fd f828 	bl	8000bac <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4b61      	ldr	r3, [pc, #388]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003b62:	fba3 2302 	umull	r2, r3, r3, r2
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	011c      	lsls	r4, r3, #4
 8003b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	1891      	adds	r1, r2, r2
 8003b82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b84:	415b      	adcs	r3, r3
 8003b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8003b92:	4649      	mov	r1, r9
 8003b94:	eb43 0b01 	adc.w	fp, r3, r1
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bac:	4692      	mov	sl, r2
 8003bae:	469b      	mov	fp, r3
 8003bb0:	4643      	mov	r3, r8
 8003bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8003bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bba:	464b      	mov	r3, r9
 8003bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8003bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	18db      	adds	r3, r3, r3
 8003bdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bde:	4613      	mov	r3, r2
 8003be0:	eb42 0303 	adc.w	r3, r2, r3
 8003be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bee:	f7fc ffdd 	bl	8000bac <__aeabi_uldivmod>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	2264      	movs	r2, #100	@ 0x64
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	1acb      	subs	r3, r1, r3
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c0e:	4b36      	ldr	r3, [pc, #216]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003c10:	fba3 2302 	umull	r2, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c1c:	441c      	add	r4, r3
 8003c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c30:	4642      	mov	r2, r8
 8003c32:	464b      	mov	r3, r9
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c40:	4641      	mov	r1, r8
 8003c42:	1851      	adds	r1, r2, r1
 8003c44:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c46:	4649      	mov	r1, r9
 8003c48:	414b      	adcs	r3, r1
 8003c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c58:	4659      	mov	r1, fp
 8003c5a:	00cb      	lsls	r3, r1, #3
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c62:	4651      	mov	r1, sl
 8003c64:	00ca      	lsls	r2, r1, #3
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	189b      	adds	r3, r3, r2
 8003c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c74:	464b      	mov	r3, r9
 8003c76:	460a      	mov	r2, r1
 8003c78:	eb42 0303 	adc.w	r3, r2, r3
 8003c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c94:	460b      	mov	r3, r1
 8003c96:	18db      	adds	r3, r3, r3
 8003c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003caa:	f7fc ff7f 	bl	8000bac <__aeabi_uldivmod>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	2164      	movs	r1, #100	@ 0x64
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	3332      	adds	r3, #50	@ 0x32
 8003cc6:	4a08      	ldr	r2, [pc, #32]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	f003 0207 	and.w	r2, r3, #7
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4422      	add	r2, r4
 8003cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cdc:	e106      	b.n	8003eec <UART_SetConfig+0x4d8>
 8003cde:	bf00      	nop
 8003ce0:	40011000 	.word	0x40011000
 8003ce4:	40011400 	.word	0x40011400
 8003ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003cfe:	4642      	mov	r2, r8
 8003d00:	464b      	mov	r3, r9
 8003d02:	1891      	adds	r1, r2, r2
 8003d04:	6239      	str	r1, [r7, #32]
 8003d06:	415b      	adcs	r3, r3
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d0e:	4641      	mov	r1, r8
 8003d10:	1854      	adds	r4, r2, r1
 8003d12:	4649      	mov	r1, r9
 8003d14:	eb43 0501 	adc.w	r5, r3, r1
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	00eb      	lsls	r3, r5, #3
 8003d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d26:	00e2      	lsls	r2, r4, #3
 8003d28:	4614      	mov	r4, r2
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	18e3      	adds	r3, r4, r3
 8003d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d34:	464b      	mov	r3, r9
 8003d36:	eb45 0303 	adc.w	r3, r5, r3
 8003d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	008b      	lsls	r3, r1, #2
 8003d5e:	4621      	mov	r1, r4
 8003d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d64:	4621      	mov	r1, r4
 8003d66:	008a      	lsls	r2, r1, #2
 8003d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d6c:	f7fc ff1e 	bl	8000bac <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4b60      	ldr	r3, [pc, #384]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003d76:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	011c      	lsls	r4, r3, #4
 8003d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d90:	4642      	mov	r2, r8
 8003d92:	464b      	mov	r3, r9
 8003d94:	1891      	adds	r1, r2, r2
 8003d96:	61b9      	str	r1, [r7, #24]
 8003d98:	415b      	adcs	r3, r3
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da0:	4641      	mov	r1, r8
 8003da2:	1851      	adds	r1, r2, r1
 8003da4:	6139      	str	r1, [r7, #16]
 8003da6:	4649      	mov	r1, r9
 8003da8:	414b      	adcs	r3, r1
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003db8:	4659      	mov	r1, fp
 8003dba:	00cb      	lsls	r3, r1, #3
 8003dbc:	4651      	mov	r1, sl
 8003dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc2:	4651      	mov	r1, sl
 8003dc4:	00ca      	lsls	r2, r1, #3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4642      	mov	r2, r8
 8003dce:	189b      	adds	r3, r3, r2
 8003dd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	460a      	mov	r2, r1
 8003dd8:	eb42 0303 	adc.w	r3, r2, r3
 8003ddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003df8:	4649      	mov	r1, r9
 8003dfa:	008b      	lsls	r3, r1, #2
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e02:	4641      	mov	r1, r8
 8003e04:	008a      	lsls	r2, r1, #2
 8003e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e0a:	f7fc fecf 	bl	8000bac <__aeabi_uldivmod>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4611      	mov	r1, r2
 8003e14:	4b38      	ldr	r3, [pc, #224]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003e16:	fba3 2301 	umull	r2, r3, r3, r1
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	2264      	movs	r2, #100	@ 0x64
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	1acb      	subs	r3, r1, r3
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	3332      	adds	r3, #50	@ 0x32
 8003e28:	4a33      	ldr	r2, [pc, #204]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e34:	441c      	add	r4, r3
 8003e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e44:	4642      	mov	r2, r8
 8003e46:	464b      	mov	r3, r9
 8003e48:	1891      	adds	r1, r2, r2
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	415b      	adcs	r3, r3
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e54:	4641      	mov	r1, r8
 8003e56:	1851      	adds	r1, r2, r1
 8003e58:	6039      	str	r1, [r7, #0]
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	414b      	adcs	r3, r1
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e6c:	4659      	mov	r1, fp
 8003e6e:	00cb      	lsls	r3, r1, #3
 8003e70:	4651      	mov	r1, sl
 8003e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e76:	4651      	mov	r1, sl
 8003e78:	00ca      	lsls	r2, r1, #3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4642      	mov	r2, r8
 8003e82:	189b      	adds	r3, r3, r2
 8003e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e86:	464b      	mov	r3, r9
 8003e88:	460a      	mov	r2, r1
 8003e8a:	eb42 0303 	adc.w	r3, r2, r3
 8003e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	008b      	lsls	r3, r1, #2
 8003eac:	4641      	mov	r1, r8
 8003eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	008a      	lsls	r2, r1, #2
 8003eb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003eba:	f7fc fe77 	bl	8000bac <__aeabi_uldivmod>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	2164      	movs	r1, #100	@ 0x64
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	3332      	adds	r3, #50	@ 0x32
 8003ed6:	4a08      	ldr	r2, [pc, #32]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4422      	add	r2, r4
 8003eea:	609a      	str	r2, [r3, #8]
}
 8003eec:	bf00      	nop
 8003eee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef8:	51eb851f 	.word	0x51eb851f

08003efc <sulp>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	4604      	mov	r4, r0
 8003f00:	460d      	mov	r5, r1
 8003f02:	ec45 4b10 	vmov	d0, r4, r5
 8003f06:	4616      	mov	r6, r2
 8003f08:	f001 ff6a 	bl	8005de0 <__ulp>
 8003f0c:	ec51 0b10 	vmov	r0, r1, d0
 8003f10:	b17e      	cbz	r6, 8003f32 <sulp+0x36>
 8003f12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003f16:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	dd09      	ble.n	8003f32 <sulp+0x36>
 8003f1e:	051b      	lsls	r3, r3, #20
 8003f20:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8003f24:	2400      	movs	r4, #0
 8003f26:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	462b      	mov	r3, r5
 8003f2e:	f7fc fb5b 	bl	80005e8 <__aeabi_dmul>
 8003f32:	ec41 0b10 	vmov	d0, r0, r1
 8003f36:	bd70      	pop	{r4, r5, r6, pc}

08003f38 <_strtod_l>:
 8003f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3c:	b09f      	sub	sp, #124	@ 0x7c
 8003f3e:	460c      	mov	r4, r1
 8003f40:	9217      	str	r2, [sp, #92]	@ 0x5c
 8003f42:	2200      	movs	r2, #0
 8003f44:	921a      	str	r2, [sp, #104]	@ 0x68
 8003f46:	9005      	str	r0, [sp, #20]
 8003f48:	f04f 0a00 	mov.w	sl, #0
 8003f4c:	f04f 0b00 	mov.w	fp, #0
 8003f50:	460a      	mov	r2, r1
 8003f52:	9219      	str	r2, [sp, #100]	@ 0x64
 8003f54:	7811      	ldrb	r1, [r2, #0]
 8003f56:	292b      	cmp	r1, #43	@ 0x2b
 8003f58:	d04a      	beq.n	8003ff0 <_strtod_l+0xb8>
 8003f5a:	d838      	bhi.n	8003fce <_strtod_l+0x96>
 8003f5c:	290d      	cmp	r1, #13
 8003f5e:	d832      	bhi.n	8003fc6 <_strtod_l+0x8e>
 8003f60:	2908      	cmp	r1, #8
 8003f62:	d832      	bhi.n	8003fca <_strtod_l+0x92>
 8003f64:	2900      	cmp	r1, #0
 8003f66:	d03b      	beq.n	8003fe0 <_strtod_l+0xa8>
 8003f68:	2200      	movs	r2, #0
 8003f6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8003f6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8003f6e:	782a      	ldrb	r2, [r5, #0]
 8003f70:	2a30      	cmp	r2, #48	@ 0x30
 8003f72:	f040 80b3 	bne.w	80040dc <_strtod_l+0x1a4>
 8003f76:	786a      	ldrb	r2, [r5, #1]
 8003f78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003f7c:	2a58      	cmp	r2, #88	@ 0x58
 8003f7e:	d16e      	bne.n	800405e <_strtod_l+0x126>
 8003f80:	9302      	str	r3, [sp, #8]
 8003f82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	ab1a      	add	r3, sp, #104	@ 0x68
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	4a8e      	ldr	r2, [pc, #568]	@ (80041c4 <_strtod_l+0x28c>)
 8003f8c:	9805      	ldr	r0, [sp, #20]
 8003f8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8003f90:	a919      	add	r1, sp, #100	@ 0x64
 8003f92:	f001 f81f 	bl	8004fd4 <__gethex>
 8003f96:	f010 060f 	ands.w	r6, r0, #15
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	d005      	beq.n	8003faa <_strtod_l+0x72>
 8003f9e:	2e06      	cmp	r6, #6
 8003fa0:	d128      	bne.n	8003ff4 <_strtod_l+0xbc>
 8003fa2:	3501      	adds	r5, #1
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9519      	str	r5, [sp, #100]	@ 0x64
 8003fa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003faa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f040 858e 	bne.w	8004ace <_strtod_l+0xb96>
 8003fb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003fb4:	b1cb      	cbz	r3, 8003fea <_strtod_l+0xb2>
 8003fb6:	4652      	mov	r2, sl
 8003fb8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8003fbc:	ec43 2b10 	vmov	d0, r2, r3
 8003fc0:	b01f      	add	sp, #124	@ 0x7c
 8003fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc6:	2920      	cmp	r1, #32
 8003fc8:	d1ce      	bne.n	8003f68 <_strtod_l+0x30>
 8003fca:	3201      	adds	r2, #1
 8003fcc:	e7c1      	b.n	8003f52 <_strtod_l+0x1a>
 8003fce:	292d      	cmp	r1, #45	@ 0x2d
 8003fd0:	d1ca      	bne.n	8003f68 <_strtod_l+0x30>
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003fd6:	1c51      	adds	r1, r2, #1
 8003fd8:	9119      	str	r1, [sp, #100]	@ 0x64
 8003fda:	7852      	ldrb	r2, [r2, #1]
 8003fdc:	2a00      	cmp	r2, #0
 8003fde:	d1c5      	bne.n	8003f6c <_strtod_l+0x34>
 8003fe0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003fe2:	9419      	str	r4, [sp, #100]	@ 0x64
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f040 8570 	bne.w	8004aca <_strtod_l+0xb92>
 8003fea:	4652      	mov	r2, sl
 8003fec:	465b      	mov	r3, fp
 8003fee:	e7e5      	b.n	8003fbc <_strtod_l+0x84>
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	e7ef      	b.n	8003fd4 <_strtod_l+0x9c>
 8003ff4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003ff6:	b13a      	cbz	r2, 8004008 <_strtod_l+0xd0>
 8003ff8:	2135      	movs	r1, #53	@ 0x35
 8003ffa:	a81c      	add	r0, sp, #112	@ 0x70
 8003ffc:	f001 ffea 	bl	8005fd4 <__copybits>
 8004000:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004002:	9805      	ldr	r0, [sp, #20]
 8004004:	f001 fbb8 	bl	8005778 <_Bfree>
 8004008:	3e01      	subs	r6, #1
 800400a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800400c:	2e04      	cmp	r6, #4
 800400e:	d806      	bhi.n	800401e <_strtod_l+0xe6>
 8004010:	e8df f006 	tbb	[pc, r6]
 8004014:	201d0314 	.word	0x201d0314
 8004018:	14          	.byte	0x14
 8004019:	00          	.byte	0x00
 800401a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800401e:	05e1      	lsls	r1, r4, #23
 8004020:	bf48      	it	mi
 8004022:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004026:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800402a:	0d1b      	lsrs	r3, r3, #20
 800402c:	051b      	lsls	r3, r3, #20
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1bb      	bne.n	8003faa <_strtod_l+0x72>
 8004032:	f000 fed7 	bl	8004de4 <__errno>
 8004036:	2322      	movs	r3, #34	@ 0x22
 8004038:	6003      	str	r3, [r0, #0]
 800403a:	e7b6      	b.n	8003faa <_strtod_l+0x72>
 800403c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004040:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004044:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004048:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800404c:	e7e7      	b.n	800401e <_strtod_l+0xe6>
 800404e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80041cc <_strtod_l+0x294>
 8004052:	e7e4      	b.n	800401e <_strtod_l+0xe6>
 8004054:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004058:	f04f 3aff 	mov.w	sl, #4294967295
 800405c:	e7df      	b.n	800401e <_strtod_l+0xe6>
 800405e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	9219      	str	r2, [sp, #100]	@ 0x64
 8004064:	785b      	ldrb	r3, [r3, #1]
 8004066:	2b30      	cmp	r3, #48	@ 0x30
 8004068:	d0f9      	beq.n	800405e <_strtod_l+0x126>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d09d      	beq.n	8003faa <_strtod_l+0x72>
 800406e:	2301      	movs	r3, #1
 8004070:	9309      	str	r3, [sp, #36]	@ 0x24
 8004072:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004074:	930c      	str	r3, [sp, #48]	@ 0x30
 8004076:	2300      	movs	r3, #0
 8004078:	9308      	str	r3, [sp, #32]
 800407a:	930a      	str	r3, [sp, #40]	@ 0x28
 800407c:	461f      	mov	r7, r3
 800407e:	220a      	movs	r2, #10
 8004080:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004082:	7805      	ldrb	r5, [r0, #0]
 8004084:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004088:	b2d9      	uxtb	r1, r3
 800408a:	2909      	cmp	r1, #9
 800408c:	d928      	bls.n	80040e0 <_strtod_l+0x1a8>
 800408e:	494e      	ldr	r1, [pc, #312]	@ (80041c8 <_strtod_l+0x290>)
 8004090:	2201      	movs	r2, #1
 8004092:	f000 fe4e 	bl	8004d32 <strncmp>
 8004096:	2800      	cmp	r0, #0
 8004098:	d032      	beq.n	8004100 <_strtod_l+0x1c8>
 800409a:	2000      	movs	r0, #0
 800409c:	462a      	mov	r2, r5
 800409e:	4681      	mov	r9, r0
 80040a0:	463d      	mov	r5, r7
 80040a2:	4603      	mov	r3, r0
 80040a4:	2a65      	cmp	r2, #101	@ 0x65
 80040a6:	d001      	beq.n	80040ac <_strtod_l+0x174>
 80040a8:	2a45      	cmp	r2, #69	@ 0x45
 80040aa:	d114      	bne.n	80040d6 <_strtod_l+0x19e>
 80040ac:	b91d      	cbnz	r5, 80040b6 <_strtod_l+0x17e>
 80040ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040b0:	4302      	orrs	r2, r0
 80040b2:	d095      	beq.n	8003fe0 <_strtod_l+0xa8>
 80040b4:	2500      	movs	r5, #0
 80040b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80040b8:	1c62      	adds	r2, r4, #1
 80040ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80040bc:	7862      	ldrb	r2, [r4, #1]
 80040be:	2a2b      	cmp	r2, #43	@ 0x2b
 80040c0:	d077      	beq.n	80041b2 <_strtod_l+0x27a>
 80040c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80040c4:	d07b      	beq.n	80041be <_strtod_l+0x286>
 80040c6:	f04f 0c00 	mov.w	ip, #0
 80040ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80040ce:	2909      	cmp	r1, #9
 80040d0:	f240 8082 	bls.w	80041d8 <_strtod_l+0x2a0>
 80040d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80040d6:	f04f 0800 	mov.w	r8, #0
 80040da:	e0a2      	b.n	8004222 <_strtod_l+0x2ea>
 80040dc:	2300      	movs	r3, #0
 80040de:	e7c7      	b.n	8004070 <_strtod_l+0x138>
 80040e0:	2f08      	cmp	r7, #8
 80040e2:	bfd5      	itete	le
 80040e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80040e6:	9908      	ldrgt	r1, [sp, #32]
 80040e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80040ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80040f0:	f100 0001 	add.w	r0, r0, #1
 80040f4:	bfd4      	ite	le
 80040f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80040f8:	9308      	strgt	r3, [sp, #32]
 80040fa:	3701      	adds	r7, #1
 80040fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80040fe:	e7bf      	b.n	8004080 <_strtod_l+0x148>
 8004100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	9219      	str	r2, [sp, #100]	@ 0x64
 8004106:	785a      	ldrb	r2, [r3, #1]
 8004108:	b37f      	cbz	r7, 800416a <_strtod_l+0x232>
 800410a:	4681      	mov	r9, r0
 800410c:	463d      	mov	r5, r7
 800410e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004112:	2b09      	cmp	r3, #9
 8004114:	d912      	bls.n	800413c <_strtod_l+0x204>
 8004116:	2301      	movs	r3, #1
 8004118:	e7c4      	b.n	80040a4 <_strtod_l+0x16c>
 800411a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004120:	785a      	ldrb	r2, [r3, #1]
 8004122:	3001      	adds	r0, #1
 8004124:	2a30      	cmp	r2, #48	@ 0x30
 8004126:	d0f8      	beq.n	800411a <_strtod_l+0x1e2>
 8004128:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800412c:	2b08      	cmp	r3, #8
 800412e:	f200 84d3 	bhi.w	8004ad8 <_strtod_l+0xba0>
 8004132:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004134:	930c      	str	r3, [sp, #48]	@ 0x30
 8004136:	4681      	mov	r9, r0
 8004138:	2000      	movs	r0, #0
 800413a:	4605      	mov	r5, r0
 800413c:	3a30      	subs	r2, #48	@ 0x30
 800413e:	f100 0301 	add.w	r3, r0, #1
 8004142:	d02a      	beq.n	800419a <_strtod_l+0x262>
 8004144:	4499      	add	r9, r3
 8004146:	eb00 0c05 	add.w	ip, r0, r5
 800414a:	462b      	mov	r3, r5
 800414c:	210a      	movs	r1, #10
 800414e:	4563      	cmp	r3, ip
 8004150:	d10d      	bne.n	800416e <_strtod_l+0x236>
 8004152:	1c69      	adds	r1, r5, #1
 8004154:	4401      	add	r1, r0
 8004156:	4428      	add	r0, r5
 8004158:	2808      	cmp	r0, #8
 800415a:	dc16      	bgt.n	800418a <_strtod_l+0x252>
 800415c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800415e:	230a      	movs	r3, #10
 8004160:	fb03 2300 	mla	r3, r3, r0, r2
 8004164:	930a      	str	r3, [sp, #40]	@ 0x28
 8004166:	2300      	movs	r3, #0
 8004168:	e018      	b.n	800419c <_strtod_l+0x264>
 800416a:	4638      	mov	r0, r7
 800416c:	e7da      	b.n	8004124 <_strtod_l+0x1ec>
 800416e:	2b08      	cmp	r3, #8
 8004170:	f103 0301 	add.w	r3, r3, #1
 8004174:	dc03      	bgt.n	800417e <_strtod_l+0x246>
 8004176:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004178:	434e      	muls	r6, r1
 800417a:	960a      	str	r6, [sp, #40]	@ 0x28
 800417c:	e7e7      	b.n	800414e <_strtod_l+0x216>
 800417e:	2b10      	cmp	r3, #16
 8004180:	bfde      	ittt	le
 8004182:	9e08      	ldrle	r6, [sp, #32]
 8004184:	434e      	mulle	r6, r1
 8004186:	9608      	strle	r6, [sp, #32]
 8004188:	e7e1      	b.n	800414e <_strtod_l+0x216>
 800418a:	280f      	cmp	r0, #15
 800418c:	dceb      	bgt.n	8004166 <_strtod_l+0x22e>
 800418e:	9808      	ldr	r0, [sp, #32]
 8004190:	230a      	movs	r3, #10
 8004192:	fb03 2300 	mla	r3, r3, r0, r2
 8004196:	9308      	str	r3, [sp, #32]
 8004198:	e7e5      	b.n	8004166 <_strtod_l+0x22e>
 800419a:	4629      	mov	r1, r5
 800419c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800419e:	1c50      	adds	r0, r2, #1
 80041a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80041a2:	7852      	ldrb	r2, [r2, #1]
 80041a4:	4618      	mov	r0, r3
 80041a6:	460d      	mov	r5, r1
 80041a8:	e7b1      	b.n	800410e <_strtod_l+0x1d6>
 80041aa:	f04f 0900 	mov.w	r9, #0
 80041ae:	2301      	movs	r3, #1
 80041b0:	e77d      	b.n	80040ae <_strtod_l+0x176>
 80041b2:	f04f 0c00 	mov.w	ip, #0
 80041b6:	1ca2      	adds	r2, r4, #2
 80041b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80041ba:	78a2      	ldrb	r2, [r4, #2]
 80041bc:	e785      	b.n	80040ca <_strtod_l+0x192>
 80041be:	f04f 0c01 	mov.w	ip, #1
 80041c2:	e7f8      	b.n	80041b6 <_strtod_l+0x27e>
 80041c4:	08006b84 	.word	0x08006b84
 80041c8:	08006b60 	.word	0x08006b60
 80041cc:	7ff00000 	.word	0x7ff00000
 80041d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80041d2:	1c51      	adds	r1, r2, #1
 80041d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80041d6:	7852      	ldrb	r2, [r2, #1]
 80041d8:	2a30      	cmp	r2, #48	@ 0x30
 80041da:	d0f9      	beq.n	80041d0 <_strtod_l+0x298>
 80041dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80041e0:	2908      	cmp	r1, #8
 80041e2:	f63f af78 	bhi.w	80040d6 <_strtod_l+0x19e>
 80041e6:	3a30      	subs	r2, #48	@ 0x30
 80041e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80041ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80041ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80041ee:	f04f 080a 	mov.w	r8, #10
 80041f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80041f4:	1c56      	adds	r6, r2, #1
 80041f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80041f8:	7852      	ldrb	r2, [r2, #1]
 80041fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80041fe:	f1be 0f09 	cmp.w	lr, #9
 8004202:	d939      	bls.n	8004278 <_strtod_l+0x340>
 8004204:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004206:	1a76      	subs	r6, r6, r1
 8004208:	2e08      	cmp	r6, #8
 800420a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800420e:	dc03      	bgt.n	8004218 <_strtod_l+0x2e0>
 8004210:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004212:	4588      	cmp	r8, r1
 8004214:	bfa8      	it	ge
 8004216:	4688      	movge	r8, r1
 8004218:	f1bc 0f00 	cmp.w	ip, #0
 800421c:	d001      	beq.n	8004222 <_strtod_l+0x2ea>
 800421e:	f1c8 0800 	rsb	r8, r8, #0
 8004222:	2d00      	cmp	r5, #0
 8004224:	d14e      	bne.n	80042c4 <_strtod_l+0x38c>
 8004226:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004228:	4308      	orrs	r0, r1
 800422a:	f47f aebe 	bne.w	8003faa <_strtod_l+0x72>
 800422e:	2b00      	cmp	r3, #0
 8004230:	f47f aed6 	bne.w	8003fe0 <_strtod_l+0xa8>
 8004234:	2a69      	cmp	r2, #105	@ 0x69
 8004236:	d028      	beq.n	800428a <_strtod_l+0x352>
 8004238:	dc25      	bgt.n	8004286 <_strtod_l+0x34e>
 800423a:	2a49      	cmp	r2, #73	@ 0x49
 800423c:	d025      	beq.n	800428a <_strtod_l+0x352>
 800423e:	2a4e      	cmp	r2, #78	@ 0x4e
 8004240:	f47f aece 	bne.w	8003fe0 <_strtod_l+0xa8>
 8004244:	499b      	ldr	r1, [pc, #620]	@ (80044b4 <_strtod_l+0x57c>)
 8004246:	a819      	add	r0, sp, #100	@ 0x64
 8004248:	f001 f8e6 	bl	8005418 <__match>
 800424c:	2800      	cmp	r0, #0
 800424e:	f43f aec7 	beq.w	8003fe0 <_strtod_l+0xa8>
 8004252:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b28      	cmp	r3, #40	@ 0x28
 8004258:	d12e      	bne.n	80042b8 <_strtod_l+0x380>
 800425a:	4997      	ldr	r1, [pc, #604]	@ (80044b8 <_strtod_l+0x580>)
 800425c:	aa1c      	add	r2, sp, #112	@ 0x70
 800425e:	a819      	add	r0, sp, #100	@ 0x64
 8004260:	f001 f8ee 	bl	8005440 <__hexnan>
 8004264:	2805      	cmp	r0, #5
 8004266:	d127      	bne.n	80042b8 <_strtod_l+0x380>
 8004268:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800426a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800426e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004272:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004276:	e698      	b.n	8003faa <_strtod_l+0x72>
 8004278:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800427a:	fb08 2101 	mla	r1, r8, r1, r2
 800427e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004282:	920e      	str	r2, [sp, #56]	@ 0x38
 8004284:	e7b5      	b.n	80041f2 <_strtod_l+0x2ba>
 8004286:	2a6e      	cmp	r2, #110	@ 0x6e
 8004288:	e7da      	b.n	8004240 <_strtod_l+0x308>
 800428a:	498c      	ldr	r1, [pc, #560]	@ (80044bc <_strtod_l+0x584>)
 800428c:	a819      	add	r0, sp, #100	@ 0x64
 800428e:	f001 f8c3 	bl	8005418 <__match>
 8004292:	2800      	cmp	r0, #0
 8004294:	f43f aea4 	beq.w	8003fe0 <_strtod_l+0xa8>
 8004298:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800429a:	4989      	ldr	r1, [pc, #548]	@ (80044c0 <_strtod_l+0x588>)
 800429c:	3b01      	subs	r3, #1
 800429e:	a819      	add	r0, sp, #100	@ 0x64
 80042a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80042a2:	f001 f8b9 	bl	8005418 <__match>
 80042a6:	b910      	cbnz	r0, 80042ae <_strtod_l+0x376>
 80042a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80042aa:	3301      	adds	r3, #1
 80042ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80042ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80044d0 <_strtod_l+0x598>
 80042b2:	f04f 0a00 	mov.w	sl, #0
 80042b6:	e678      	b.n	8003faa <_strtod_l+0x72>
 80042b8:	4882      	ldr	r0, [pc, #520]	@ (80044c4 <_strtod_l+0x58c>)
 80042ba:	f000 fdd1 	bl	8004e60 <nan>
 80042be:	ec5b ab10 	vmov	sl, fp, d0
 80042c2:	e672      	b.n	8003faa <_strtod_l+0x72>
 80042c4:	eba8 0309 	sub.w	r3, r8, r9
 80042c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80042ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80042cc:	2f00      	cmp	r7, #0
 80042ce:	bf08      	it	eq
 80042d0:	462f      	moveq	r7, r5
 80042d2:	2d10      	cmp	r5, #16
 80042d4:	462c      	mov	r4, r5
 80042d6:	bfa8      	it	ge
 80042d8:	2410      	movge	r4, #16
 80042da:	f7fc f90b 	bl	80004f4 <__aeabi_ui2d>
 80042de:	2d09      	cmp	r5, #9
 80042e0:	4682      	mov	sl, r0
 80042e2:	468b      	mov	fp, r1
 80042e4:	dc13      	bgt.n	800430e <_strtod_l+0x3d6>
 80042e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f43f ae5e 	beq.w	8003faa <_strtod_l+0x72>
 80042ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042f0:	dd78      	ble.n	80043e4 <_strtod_l+0x4ac>
 80042f2:	2b16      	cmp	r3, #22
 80042f4:	dc5f      	bgt.n	80043b6 <_strtod_l+0x47e>
 80042f6:	4974      	ldr	r1, [pc, #464]	@ (80044c8 <_strtod_l+0x590>)
 80042f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80042fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004300:	4652      	mov	r2, sl
 8004302:	465b      	mov	r3, fp
 8004304:	f7fc f970 	bl	80005e8 <__aeabi_dmul>
 8004308:	4682      	mov	sl, r0
 800430a:	468b      	mov	fp, r1
 800430c:	e64d      	b.n	8003faa <_strtod_l+0x72>
 800430e:	4b6e      	ldr	r3, [pc, #440]	@ (80044c8 <_strtod_l+0x590>)
 8004310:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004314:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004318:	f7fc f966 	bl	80005e8 <__aeabi_dmul>
 800431c:	4682      	mov	sl, r0
 800431e:	9808      	ldr	r0, [sp, #32]
 8004320:	468b      	mov	fp, r1
 8004322:	f7fc f8e7 	bl	80004f4 <__aeabi_ui2d>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4650      	mov	r0, sl
 800432c:	4659      	mov	r1, fp
 800432e:	f7fb ffa5 	bl	800027c <__adddf3>
 8004332:	2d0f      	cmp	r5, #15
 8004334:	4682      	mov	sl, r0
 8004336:	468b      	mov	fp, r1
 8004338:	ddd5      	ble.n	80042e6 <_strtod_l+0x3ae>
 800433a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800433c:	1b2c      	subs	r4, r5, r4
 800433e:	441c      	add	r4, r3
 8004340:	2c00      	cmp	r4, #0
 8004342:	f340 8096 	ble.w	8004472 <_strtod_l+0x53a>
 8004346:	f014 030f 	ands.w	r3, r4, #15
 800434a:	d00a      	beq.n	8004362 <_strtod_l+0x42a>
 800434c:	495e      	ldr	r1, [pc, #376]	@ (80044c8 <_strtod_l+0x590>)
 800434e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004352:	4652      	mov	r2, sl
 8004354:	465b      	mov	r3, fp
 8004356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800435a:	f7fc f945 	bl	80005e8 <__aeabi_dmul>
 800435e:	4682      	mov	sl, r0
 8004360:	468b      	mov	fp, r1
 8004362:	f034 040f 	bics.w	r4, r4, #15
 8004366:	d073      	beq.n	8004450 <_strtod_l+0x518>
 8004368:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800436c:	dd48      	ble.n	8004400 <_strtod_l+0x4c8>
 800436e:	2400      	movs	r4, #0
 8004370:	46a0      	mov	r8, r4
 8004372:	940a      	str	r4, [sp, #40]	@ 0x28
 8004374:	46a1      	mov	r9, r4
 8004376:	9a05      	ldr	r2, [sp, #20]
 8004378:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80044d0 <_strtod_l+0x598>
 800437c:	2322      	movs	r3, #34	@ 0x22
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	f04f 0a00 	mov.w	sl, #0
 8004384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	f43f ae0f 	beq.w	8003faa <_strtod_l+0x72>
 800438c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800438e:	9805      	ldr	r0, [sp, #20]
 8004390:	f001 f9f2 	bl	8005778 <_Bfree>
 8004394:	9805      	ldr	r0, [sp, #20]
 8004396:	4649      	mov	r1, r9
 8004398:	f001 f9ee 	bl	8005778 <_Bfree>
 800439c:	9805      	ldr	r0, [sp, #20]
 800439e:	4641      	mov	r1, r8
 80043a0:	f001 f9ea 	bl	8005778 <_Bfree>
 80043a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80043a6:	9805      	ldr	r0, [sp, #20]
 80043a8:	f001 f9e6 	bl	8005778 <_Bfree>
 80043ac:	9805      	ldr	r0, [sp, #20]
 80043ae:	4621      	mov	r1, r4
 80043b0:	f001 f9e2 	bl	8005778 <_Bfree>
 80043b4:	e5f9      	b.n	8003faa <_strtod_l+0x72>
 80043b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80043bc:	4293      	cmp	r3, r2
 80043be:	dbbc      	blt.n	800433a <_strtod_l+0x402>
 80043c0:	4c41      	ldr	r4, [pc, #260]	@ (80044c8 <_strtod_l+0x590>)
 80043c2:	f1c5 050f 	rsb	r5, r5, #15
 80043c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80043ca:	4652      	mov	r2, sl
 80043cc:	465b      	mov	r3, fp
 80043ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043d2:	f7fc f909 	bl	80005e8 <__aeabi_dmul>
 80043d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043d8:	1b5d      	subs	r5, r3, r5
 80043da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80043de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80043e2:	e78f      	b.n	8004304 <_strtod_l+0x3cc>
 80043e4:	3316      	adds	r3, #22
 80043e6:	dba8      	blt.n	800433a <_strtod_l+0x402>
 80043e8:	4b37      	ldr	r3, [pc, #220]	@ (80044c8 <_strtod_l+0x590>)
 80043ea:	eba9 0808 	sub.w	r8, r9, r8
 80043ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80043f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80043f6:	4650      	mov	r0, sl
 80043f8:	4659      	mov	r1, fp
 80043fa:	f7fc fa1f 	bl	800083c <__aeabi_ddiv>
 80043fe:	e783      	b.n	8004308 <_strtod_l+0x3d0>
 8004400:	4b32      	ldr	r3, [pc, #200]	@ (80044cc <_strtod_l+0x594>)
 8004402:	9308      	str	r3, [sp, #32]
 8004404:	2300      	movs	r3, #0
 8004406:	1124      	asrs	r4, r4, #4
 8004408:	4650      	mov	r0, sl
 800440a:	4659      	mov	r1, fp
 800440c:	461e      	mov	r6, r3
 800440e:	2c01      	cmp	r4, #1
 8004410:	dc21      	bgt.n	8004456 <_strtod_l+0x51e>
 8004412:	b10b      	cbz	r3, 8004418 <_strtod_l+0x4e0>
 8004414:	4682      	mov	sl, r0
 8004416:	468b      	mov	fp, r1
 8004418:	492c      	ldr	r1, [pc, #176]	@ (80044cc <_strtod_l+0x594>)
 800441a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800441e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004422:	4652      	mov	r2, sl
 8004424:	465b      	mov	r3, fp
 8004426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800442a:	f7fc f8dd 	bl	80005e8 <__aeabi_dmul>
 800442e:	4b28      	ldr	r3, [pc, #160]	@ (80044d0 <_strtod_l+0x598>)
 8004430:	460a      	mov	r2, r1
 8004432:	400b      	ands	r3, r1
 8004434:	4927      	ldr	r1, [pc, #156]	@ (80044d4 <_strtod_l+0x59c>)
 8004436:	428b      	cmp	r3, r1
 8004438:	4682      	mov	sl, r0
 800443a:	d898      	bhi.n	800436e <_strtod_l+0x436>
 800443c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004440:	428b      	cmp	r3, r1
 8004442:	bf86      	itte	hi
 8004444:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80044d8 <_strtod_l+0x5a0>
 8004448:	f04f 3aff 	movhi.w	sl, #4294967295
 800444c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004450:	2300      	movs	r3, #0
 8004452:	9308      	str	r3, [sp, #32]
 8004454:	e07a      	b.n	800454c <_strtod_l+0x614>
 8004456:	07e2      	lsls	r2, r4, #31
 8004458:	d505      	bpl.n	8004466 <_strtod_l+0x52e>
 800445a:	9b08      	ldr	r3, [sp, #32]
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	f7fc f8c2 	bl	80005e8 <__aeabi_dmul>
 8004464:	2301      	movs	r3, #1
 8004466:	9a08      	ldr	r2, [sp, #32]
 8004468:	3208      	adds	r2, #8
 800446a:	3601      	adds	r6, #1
 800446c:	1064      	asrs	r4, r4, #1
 800446e:	9208      	str	r2, [sp, #32]
 8004470:	e7cd      	b.n	800440e <_strtod_l+0x4d6>
 8004472:	d0ed      	beq.n	8004450 <_strtod_l+0x518>
 8004474:	4264      	negs	r4, r4
 8004476:	f014 020f 	ands.w	r2, r4, #15
 800447a:	d00a      	beq.n	8004492 <_strtod_l+0x55a>
 800447c:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <_strtod_l+0x590>)
 800447e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004482:	4650      	mov	r0, sl
 8004484:	4659      	mov	r1, fp
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f7fc f9d7 	bl	800083c <__aeabi_ddiv>
 800448e:	4682      	mov	sl, r0
 8004490:	468b      	mov	fp, r1
 8004492:	1124      	asrs	r4, r4, #4
 8004494:	d0dc      	beq.n	8004450 <_strtod_l+0x518>
 8004496:	2c1f      	cmp	r4, #31
 8004498:	dd20      	ble.n	80044dc <_strtod_l+0x5a4>
 800449a:	2400      	movs	r4, #0
 800449c:	46a0      	mov	r8, r4
 800449e:	940a      	str	r4, [sp, #40]	@ 0x28
 80044a0:	46a1      	mov	r9, r4
 80044a2:	9a05      	ldr	r2, [sp, #20]
 80044a4:	2322      	movs	r3, #34	@ 0x22
 80044a6:	f04f 0a00 	mov.w	sl, #0
 80044aa:	f04f 0b00 	mov.w	fp, #0
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	e768      	b.n	8004384 <_strtod_l+0x44c>
 80044b2:	bf00      	nop
 80044b4:	08006b6b 	.word	0x08006b6b
 80044b8:	08006b70 	.word	0x08006b70
 80044bc:	08006b62 	.word	0x08006b62
 80044c0:	08006b65 	.word	0x08006b65
 80044c4:	08006ee4 	.word	0x08006ee4
 80044c8:	08006ce0 	.word	0x08006ce0
 80044cc:	08006cb8 	.word	0x08006cb8
 80044d0:	7ff00000 	.word	0x7ff00000
 80044d4:	7ca00000 	.word	0x7ca00000
 80044d8:	7fefffff 	.word	0x7fefffff
 80044dc:	f014 0310 	ands.w	r3, r4, #16
 80044e0:	bf18      	it	ne
 80044e2:	236a      	movne	r3, #106	@ 0x6a
 80044e4:	4ea9      	ldr	r6, [pc, #676]	@ (800478c <_strtod_l+0x854>)
 80044e6:	9308      	str	r3, [sp, #32]
 80044e8:	4650      	mov	r0, sl
 80044ea:	4659      	mov	r1, fp
 80044ec:	2300      	movs	r3, #0
 80044ee:	07e2      	lsls	r2, r4, #31
 80044f0:	d504      	bpl.n	80044fc <_strtod_l+0x5c4>
 80044f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80044f6:	f7fc f877 	bl	80005e8 <__aeabi_dmul>
 80044fa:	2301      	movs	r3, #1
 80044fc:	1064      	asrs	r4, r4, #1
 80044fe:	f106 0608 	add.w	r6, r6, #8
 8004502:	d1f4      	bne.n	80044ee <_strtod_l+0x5b6>
 8004504:	b10b      	cbz	r3, 800450a <_strtod_l+0x5d2>
 8004506:	4682      	mov	sl, r0
 8004508:	468b      	mov	fp, r1
 800450a:	9b08      	ldr	r3, [sp, #32]
 800450c:	b1b3      	cbz	r3, 800453c <_strtod_l+0x604>
 800450e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004512:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004516:	2b00      	cmp	r3, #0
 8004518:	4659      	mov	r1, fp
 800451a:	dd0f      	ble.n	800453c <_strtod_l+0x604>
 800451c:	2b1f      	cmp	r3, #31
 800451e:	dd55      	ble.n	80045cc <_strtod_l+0x694>
 8004520:	2b34      	cmp	r3, #52	@ 0x34
 8004522:	bfde      	ittt	le
 8004524:	f04f 33ff 	movle.w	r3, #4294967295
 8004528:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800452c:	4093      	lslle	r3, r2
 800452e:	f04f 0a00 	mov.w	sl, #0
 8004532:	bfcc      	ite	gt
 8004534:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004538:	ea03 0b01 	andle.w	fp, r3, r1
 800453c:	2200      	movs	r2, #0
 800453e:	2300      	movs	r3, #0
 8004540:	4650      	mov	r0, sl
 8004542:	4659      	mov	r1, fp
 8004544:	f7fc fab8 	bl	8000ab8 <__aeabi_dcmpeq>
 8004548:	2800      	cmp	r0, #0
 800454a:	d1a6      	bne.n	800449a <_strtod_l+0x562>
 800454c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004552:	9805      	ldr	r0, [sp, #20]
 8004554:	462b      	mov	r3, r5
 8004556:	463a      	mov	r2, r7
 8004558:	f001 f976 	bl	8005848 <__s2b>
 800455c:	900a      	str	r0, [sp, #40]	@ 0x28
 800455e:	2800      	cmp	r0, #0
 8004560:	f43f af05 	beq.w	800436e <_strtod_l+0x436>
 8004564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004566:	2a00      	cmp	r2, #0
 8004568:	eba9 0308 	sub.w	r3, r9, r8
 800456c:	bfa8      	it	ge
 800456e:	2300      	movge	r3, #0
 8004570:	9312      	str	r3, [sp, #72]	@ 0x48
 8004572:	2400      	movs	r4, #0
 8004574:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004578:	9316      	str	r3, [sp, #88]	@ 0x58
 800457a:	46a0      	mov	r8, r4
 800457c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800457e:	9805      	ldr	r0, [sp, #20]
 8004580:	6859      	ldr	r1, [r3, #4]
 8004582:	f001 f8b9 	bl	80056f8 <_Balloc>
 8004586:	4681      	mov	r9, r0
 8004588:	2800      	cmp	r0, #0
 800458a:	f43f aef4 	beq.w	8004376 <_strtod_l+0x43e>
 800458e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	3202      	adds	r2, #2
 8004594:	f103 010c 	add.w	r1, r3, #12
 8004598:	0092      	lsls	r2, r2, #2
 800459a:	300c      	adds	r0, #12
 800459c:	f000 fc4f 	bl	8004e3e <memcpy>
 80045a0:	ec4b ab10 	vmov	d0, sl, fp
 80045a4:	9805      	ldr	r0, [sp, #20]
 80045a6:	aa1c      	add	r2, sp, #112	@ 0x70
 80045a8:	a91b      	add	r1, sp, #108	@ 0x6c
 80045aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80045ae:	f001 fc87 	bl	8005ec0 <__d2b>
 80045b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80045b4:	2800      	cmp	r0, #0
 80045b6:	f43f aede 	beq.w	8004376 <_strtod_l+0x43e>
 80045ba:	9805      	ldr	r0, [sp, #20]
 80045bc:	2101      	movs	r1, #1
 80045be:	f001 f9d9 	bl	8005974 <__i2b>
 80045c2:	4680      	mov	r8, r0
 80045c4:	b948      	cbnz	r0, 80045da <_strtod_l+0x6a2>
 80045c6:	f04f 0800 	mov.w	r8, #0
 80045ca:	e6d4      	b.n	8004376 <_strtod_l+0x43e>
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	ea03 0a0a 	and.w	sl, r3, sl
 80045d8:	e7b0      	b.n	800453c <_strtod_l+0x604>
 80045da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80045dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80045de:	2d00      	cmp	r5, #0
 80045e0:	bfab      	itete	ge
 80045e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80045e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80045e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80045e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80045ea:	bfac      	ite	ge
 80045ec:	18ef      	addge	r7, r5, r3
 80045ee:	1b5e      	sublt	r6, r3, r5
 80045f0:	9b08      	ldr	r3, [sp, #32]
 80045f2:	1aed      	subs	r5, r5, r3
 80045f4:	4415      	add	r5, r2
 80045f6:	4b66      	ldr	r3, [pc, #408]	@ (8004790 <_strtod_l+0x858>)
 80045f8:	3d01      	subs	r5, #1
 80045fa:	429d      	cmp	r5, r3
 80045fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004600:	da50      	bge.n	80046a4 <_strtod_l+0x76c>
 8004602:	1b5b      	subs	r3, r3, r5
 8004604:	2b1f      	cmp	r3, #31
 8004606:	eba2 0203 	sub.w	r2, r2, r3
 800460a:	f04f 0101 	mov.w	r1, #1
 800460e:	dc3d      	bgt.n	800468c <_strtod_l+0x754>
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004616:	2300      	movs	r3, #0
 8004618:	9310      	str	r3, [sp, #64]	@ 0x40
 800461a:	18bd      	adds	r5, r7, r2
 800461c:	9b08      	ldr	r3, [sp, #32]
 800461e:	42af      	cmp	r7, r5
 8004620:	4416      	add	r6, r2
 8004622:	441e      	add	r6, r3
 8004624:	463b      	mov	r3, r7
 8004626:	bfa8      	it	ge
 8004628:	462b      	movge	r3, r5
 800462a:	42b3      	cmp	r3, r6
 800462c:	bfa8      	it	ge
 800462e:	4633      	movge	r3, r6
 8004630:	2b00      	cmp	r3, #0
 8004632:	bfc2      	ittt	gt
 8004634:	1aed      	subgt	r5, r5, r3
 8004636:	1af6      	subgt	r6, r6, r3
 8004638:	1aff      	subgt	r7, r7, r3
 800463a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800463c:	2b00      	cmp	r3, #0
 800463e:	dd16      	ble.n	800466e <_strtod_l+0x736>
 8004640:	4641      	mov	r1, r8
 8004642:	9805      	ldr	r0, [sp, #20]
 8004644:	461a      	mov	r2, r3
 8004646:	f001 fa55 	bl	8005af4 <__pow5mult>
 800464a:	4680      	mov	r8, r0
 800464c:	2800      	cmp	r0, #0
 800464e:	d0ba      	beq.n	80045c6 <_strtod_l+0x68e>
 8004650:	4601      	mov	r1, r0
 8004652:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004654:	9805      	ldr	r0, [sp, #20]
 8004656:	f001 f9a3 	bl	80059a0 <__multiply>
 800465a:	900e      	str	r0, [sp, #56]	@ 0x38
 800465c:	2800      	cmp	r0, #0
 800465e:	f43f ae8a 	beq.w	8004376 <_strtod_l+0x43e>
 8004662:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004664:	9805      	ldr	r0, [sp, #20]
 8004666:	f001 f887 	bl	8005778 <_Bfree>
 800466a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800466c:	931a      	str	r3, [sp, #104]	@ 0x68
 800466e:	2d00      	cmp	r5, #0
 8004670:	dc1d      	bgt.n	80046ae <_strtod_l+0x776>
 8004672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004674:	2b00      	cmp	r3, #0
 8004676:	dd23      	ble.n	80046c0 <_strtod_l+0x788>
 8004678:	4649      	mov	r1, r9
 800467a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800467c:	9805      	ldr	r0, [sp, #20]
 800467e:	f001 fa39 	bl	8005af4 <__pow5mult>
 8004682:	4681      	mov	r9, r0
 8004684:	b9e0      	cbnz	r0, 80046c0 <_strtod_l+0x788>
 8004686:	f04f 0900 	mov.w	r9, #0
 800468a:	e674      	b.n	8004376 <_strtod_l+0x43e>
 800468c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8004690:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8004694:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8004698:	35e2      	adds	r5, #226	@ 0xe2
 800469a:	fa01 f305 	lsl.w	r3, r1, r5
 800469e:	9310      	str	r3, [sp, #64]	@ 0x40
 80046a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80046a2:	e7ba      	b.n	800461a <_strtod_l+0x6e2>
 80046a4:	2300      	movs	r3, #0
 80046a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80046a8:	2301      	movs	r3, #1
 80046aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80046ac:	e7b5      	b.n	800461a <_strtod_l+0x6e2>
 80046ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80046b0:	9805      	ldr	r0, [sp, #20]
 80046b2:	462a      	mov	r2, r5
 80046b4:	f001 fa78 	bl	8005ba8 <__lshift>
 80046b8:	901a      	str	r0, [sp, #104]	@ 0x68
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d1d9      	bne.n	8004672 <_strtod_l+0x73a>
 80046be:	e65a      	b.n	8004376 <_strtod_l+0x43e>
 80046c0:	2e00      	cmp	r6, #0
 80046c2:	dd07      	ble.n	80046d4 <_strtod_l+0x79c>
 80046c4:	4649      	mov	r1, r9
 80046c6:	9805      	ldr	r0, [sp, #20]
 80046c8:	4632      	mov	r2, r6
 80046ca:	f001 fa6d 	bl	8005ba8 <__lshift>
 80046ce:	4681      	mov	r9, r0
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d0d8      	beq.n	8004686 <_strtod_l+0x74e>
 80046d4:	2f00      	cmp	r7, #0
 80046d6:	dd08      	ble.n	80046ea <_strtod_l+0x7b2>
 80046d8:	4641      	mov	r1, r8
 80046da:	9805      	ldr	r0, [sp, #20]
 80046dc:	463a      	mov	r2, r7
 80046de:	f001 fa63 	bl	8005ba8 <__lshift>
 80046e2:	4680      	mov	r8, r0
 80046e4:	2800      	cmp	r0, #0
 80046e6:	f43f ae46 	beq.w	8004376 <_strtod_l+0x43e>
 80046ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80046ec:	9805      	ldr	r0, [sp, #20]
 80046ee:	464a      	mov	r2, r9
 80046f0:	f001 fae2 	bl	8005cb8 <__mdiff>
 80046f4:	4604      	mov	r4, r0
 80046f6:	2800      	cmp	r0, #0
 80046f8:	f43f ae3d 	beq.w	8004376 <_strtod_l+0x43e>
 80046fc:	68c3      	ldr	r3, [r0, #12]
 80046fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004700:	2300      	movs	r3, #0
 8004702:	60c3      	str	r3, [r0, #12]
 8004704:	4641      	mov	r1, r8
 8004706:	f001 fabb 	bl	8005c80 <__mcmp>
 800470a:	2800      	cmp	r0, #0
 800470c:	da46      	bge.n	800479c <_strtod_l+0x864>
 800470e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004710:	ea53 030a 	orrs.w	r3, r3, sl
 8004714:	d16c      	bne.n	80047f0 <_strtod_l+0x8b8>
 8004716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800471a:	2b00      	cmp	r3, #0
 800471c:	d168      	bne.n	80047f0 <_strtod_l+0x8b8>
 800471e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004722:	0d1b      	lsrs	r3, r3, #20
 8004724:	051b      	lsls	r3, r3, #20
 8004726:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800472a:	d961      	bls.n	80047f0 <_strtod_l+0x8b8>
 800472c:	6963      	ldr	r3, [r4, #20]
 800472e:	b913      	cbnz	r3, 8004736 <_strtod_l+0x7fe>
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	2b01      	cmp	r3, #1
 8004734:	dd5c      	ble.n	80047f0 <_strtod_l+0x8b8>
 8004736:	4621      	mov	r1, r4
 8004738:	2201      	movs	r2, #1
 800473a:	9805      	ldr	r0, [sp, #20]
 800473c:	f001 fa34 	bl	8005ba8 <__lshift>
 8004740:	4641      	mov	r1, r8
 8004742:	4604      	mov	r4, r0
 8004744:	f001 fa9c 	bl	8005c80 <__mcmp>
 8004748:	2800      	cmp	r0, #0
 800474a:	dd51      	ble.n	80047f0 <_strtod_l+0x8b8>
 800474c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004750:	9a08      	ldr	r2, [sp, #32]
 8004752:	0d1b      	lsrs	r3, r3, #20
 8004754:	051b      	lsls	r3, r3, #20
 8004756:	2a00      	cmp	r2, #0
 8004758:	d06b      	beq.n	8004832 <_strtod_l+0x8fa>
 800475a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800475e:	d868      	bhi.n	8004832 <_strtod_l+0x8fa>
 8004760:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8004764:	f67f ae9d 	bls.w	80044a2 <_strtod_l+0x56a>
 8004768:	4b0a      	ldr	r3, [pc, #40]	@ (8004794 <_strtod_l+0x85c>)
 800476a:	4650      	mov	r0, sl
 800476c:	4659      	mov	r1, fp
 800476e:	2200      	movs	r2, #0
 8004770:	f7fb ff3a 	bl	80005e8 <__aeabi_dmul>
 8004774:	4b08      	ldr	r3, [pc, #32]	@ (8004798 <_strtod_l+0x860>)
 8004776:	400b      	ands	r3, r1
 8004778:	4682      	mov	sl, r0
 800477a:	468b      	mov	fp, r1
 800477c:	2b00      	cmp	r3, #0
 800477e:	f47f ae05 	bne.w	800438c <_strtod_l+0x454>
 8004782:	9a05      	ldr	r2, [sp, #20]
 8004784:	2322      	movs	r3, #34	@ 0x22
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e600      	b.n	800438c <_strtod_l+0x454>
 800478a:	bf00      	nop
 800478c:	08006b98 	.word	0x08006b98
 8004790:	fffffc02 	.word	0xfffffc02
 8004794:	39500000 	.word	0x39500000
 8004798:	7ff00000 	.word	0x7ff00000
 800479c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80047a0:	d165      	bne.n	800486e <_strtod_l+0x936>
 80047a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80047a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80047a8:	b35a      	cbz	r2, 8004802 <_strtod_l+0x8ca>
 80047aa:	4a9f      	ldr	r2, [pc, #636]	@ (8004a28 <_strtod_l+0xaf0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d12b      	bne.n	8004808 <_strtod_l+0x8d0>
 80047b0:	9b08      	ldr	r3, [sp, #32]
 80047b2:	4651      	mov	r1, sl
 80047b4:	b303      	cbz	r3, 80047f8 <_strtod_l+0x8c0>
 80047b6:	4b9d      	ldr	r3, [pc, #628]	@ (8004a2c <_strtod_l+0xaf4>)
 80047b8:	465a      	mov	r2, fp
 80047ba:	4013      	ands	r3, r2
 80047bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80047c0:	f04f 32ff 	mov.w	r2, #4294967295
 80047c4:	d81b      	bhi.n	80047fe <_strtod_l+0x8c6>
 80047c6:	0d1b      	lsrs	r3, r3, #20
 80047c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	4299      	cmp	r1, r3
 80047d2:	d119      	bne.n	8004808 <_strtod_l+0x8d0>
 80047d4:	4b96      	ldr	r3, [pc, #600]	@ (8004a30 <_strtod_l+0xaf8>)
 80047d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047d8:	429a      	cmp	r2, r3
 80047da:	d102      	bne.n	80047e2 <_strtod_l+0x8aa>
 80047dc:	3101      	adds	r1, #1
 80047de:	f43f adca 	beq.w	8004376 <_strtod_l+0x43e>
 80047e2:	4b92      	ldr	r3, [pc, #584]	@ (8004a2c <_strtod_l+0xaf4>)
 80047e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047e6:	401a      	ands	r2, r3
 80047e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80047ec:	f04f 0a00 	mov.w	sl, #0
 80047f0:	9b08      	ldr	r3, [sp, #32]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1b8      	bne.n	8004768 <_strtod_l+0x830>
 80047f6:	e5c9      	b.n	800438c <_strtod_l+0x454>
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295
 80047fc:	e7e8      	b.n	80047d0 <_strtod_l+0x898>
 80047fe:	4613      	mov	r3, r2
 8004800:	e7e6      	b.n	80047d0 <_strtod_l+0x898>
 8004802:	ea53 030a 	orrs.w	r3, r3, sl
 8004806:	d0a1      	beq.n	800474c <_strtod_l+0x814>
 8004808:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800480a:	b1db      	cbz	r3, 8004844 <_strtod_l+0x90c>
 800480c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800480e:	4213      	tst	r3, r2
 8004810:	d0ee      	beq.n	80047f0 <_strtod_l+0x8b8>
 8004812:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004814:	9a08      	ldr	r2, [sp, #32]
 8004816:	4650      	mov	r0, sl
 8004818:	4659      	mov	r1, fp
 800481a:	b1bb      	cbz	r3, 800484c <_strtod_l+0x914>
 800481c:	f7ff fb6e 	bl	8003efc <sulp>
 8004820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004824:	ec53 2b10 	vmov	r2, r3, d0
 8004828:	f7fb fd28 	bl	800027c <__adddf3>
 800482c:	4682      	mov	sl, r0
 800482e:	468b      	mov	fp, r1
 8004830:	e7de      	b.n	80047f0 <_strtod_l+0x8b8>
 8004832:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8004836:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800483a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800483e:	f04f 3aff 	mov.w	sl, #4294967295
 8004842:	e7d5      	b.n	80047f0 <_strtod_l+0x8b8>
 8004844:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004846:	ea13 0f0a 	tst.w	r3, sl
 800484a:	e7e1      	b.n	8004810 <_strtod_l+0x8d8>
 800484c:	f7ff fb56 	bl	8003efc <sulp>
 8004850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004854:	ec53 2b10 	vmov	r2, r3, d0
 8004858:	f7fb fd0e 	bl	8000278 <__aeabi_dsub>
 800485c:	2200      	movs	r2, #0
 800485e:	2300      	movs	r3, #0
 8004860:	4682      	mov	sl, r0
 8004862:	468b      	mov	fp, r1
 8004864:	f7fc f928 	bl	8000ab8 <__aeabi_dcmpeq>
 8004868:	2800      	cmp	r0, #0
 800486a:	d0c1      	beq.n	80047f0 <_strtod_l+0x8b8>
 800486c:	e619      	b.n	80044a2 <_strtod_l+0x56a>
 800486e:	4641      	mov	r1, r8
 8004870:	4620      	mov	r0, r4
 8004872:	f001 fb7d 	bl	8005f70 <__ratio>
 8004876:	ec57 6b10 	vmov	r6, r7, d0
 800487a:	2200      	movs	r2, #0
 800487c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004880:	4630      	mov	r0, r6
 8004882:	4639      	mov	r1, r7
 8004884:	f7fc f92c 	bl	8000ae0 <__aeabi_dcmple>
 8004888:	2800      	cmp	r0, #0
 800488a:	d06f      	beq.n	800496c <_strtod_l+0xa34>
 800488c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d17a      	bne.n	8004988 <_strtod_l+0xa50>
 8004892:	f1ba 0f00 	cmp.w	sl, #0
 8004896:	d158      	bne.n	800494a <_strtod_l+0xa12>
 8004898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800489a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d15a      	bne.n	8004958 <_strtod_l+0xa20>
 80048a2:	4b64      	ldr	r3, [pc, #400]	@ (8004a34 <_strtod_l+0xafc>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	4630      	mov	r0, r6
 80048a8:	4639      	mov	r1, r7
 80048aa:	f7fc f90f 	bl	8000acc <__aeabi_dcmplt>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d159      	bne.n	8004966 <_strtod_l+0xa2e>
 80048b2:	4630      	mov	r0, r6
 80048b4:	4639      	mov	r1, r7
 80048b6:	4b60      	ldr	r3, [pc, #384]	@ (8004a38 <_strtod_l+0xb00>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	f7fb fe95 	bl	80005e8 <__aeabi_dmul>
 80048be:	4606      	mov	r6, r0
 80048c0:	460f      	mov	r7, r1
 80048c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80048c6:	9606      	str	r6, [sp, #24]
 80048c8:	9307      	str	r3, [sp, #28]
 80048ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048ce:	4d57      	ldr	r5, [pc, #348]	@ (8004a2c <_strtod_l+0xaf4>)
 80048d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80048d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048d6:	401d      	ands	r5, r3
 80048d8:	4b58      	ldr	r3, [pc, #352]	@ (8004a3c <_strtod_l+0xb04>)
 80048da:	429d      	cmp	r5, r3
 80048dc:	f040 80b2 	bne.w	8004a44 <_strtod_l+0xb0c>
 80048e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80048e6:	ec4b ab10 	vmov	d0, sl, fp
 80048ea:	f001 fa79 	bl	8005de0 <__ulp>
 80048ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048f2:	ec51 0b10 	vmov	r0, r1, d0
 80048f6:	f7fb fe77 	bl	80005e8 <__aeabi_dmul>
 80048fa:	4652      	mov	r2, sl
 80048fc:	465b      	mov	r3, fp
 80048fe:	f7fb fcbd 	bl	800027c <__adddf3>
 8004902:	460b      	mov	r3, r1
 8004904:	4949      	ldr	r1, [pc, #292]	@ (8004a2c <_strtod_l+0xaf4>)
 8004906:	4a4e      	ldr	r2, [pc, #312]	@ (8004a40 <_strtod_l+0xb08>)
 8004908:	4019      	ands	r1, r3
 800490a:	4291      	cmp	r1, r2
 800490c:	4682      	mov	sl, r0
 800490e:	d942      	bls.n	8004996 <_strtod_l+0xa5e>
 8004910:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004912:	4b47      	ldr	r3, [pc, #284]	@ (8004a30 <_strtod_l+0xaf8>)
 8004914:	429a      	cmp	r2, r3
 8004916:	d103      	bne.n	8004920 <_strtod_l+0x9e8>
 8004918:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800491a:	3301      	adds	r3, #1
 800491c:	f43f ad2b 	beq.w	8004376 <_strtod_l+0x43e>
 8004920:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8004a30 <_strtod_l+0xaf8>
 8004924:	f04f 3aff 	mov.w	sl, #4294967295
 8004928:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800492a:	9805      	ldr	r0, [sp, #20]
 800492c:	f000 ff24 	bl	8005778 <_Bfree>
 8004930:	9805      	ldr	r0, [sp, #20]
 8004932:	4649      	mov	r1, r9
 8004934:	f000 ff20 	bl	8005778 <_Bfree>
 8004938:	9805      	ldr	r0, [sp, #20]
 800493a:	4641      	mov	r1, r8
 800493c:	f000 ff1c 	bl	8005778 <_Bfree>
 8004940:	9805      	ldr	r0, [sp, #20]
 8004942:	4621      	mov	r1, r4
 8004944:	f000 ff18 	bl	8005778 <_Bfree>
 8004948:	e618      	b.n	800457c <_strtod_l+0x644>
 800494a:	f1ba 0f01 	cmp.w	sl, #1
 800494e:	d103      	bne.n	8004958 <_strtod_l+0xa20>
 8004950:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004952:	2b00      	cmp	r3, #0
 8004954:	f43f ada5 	beq.w	80044a2 <_strtod_l+0x56a>
 8004958:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8004a08 <_strtod_l+0xad0>
 800495c:	4f35      	ldr	r7, [pc, #212]	@ (8004a34 <_strtod_l+0xafc>)
 800495e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004962:	2600      	movs	r6, #0
 8004964:	e7b1      	b.n	80048ca <_strtod_l+0x992>
 8004966:	4f34      	ldr	r7, [pc, #208]	@ (8004a38 <_strtod_l+0xb00>)
 8004968:	2600      	movs	r6, #0
 800496a:	e7aa      	b.n	80048c2 <_strtod_l+0x98a>
 800496c:	4b32      	ldr	r3, [pc, #200]	@ (8004a38 <_strtod_l+0xb00>)
 800496e:	4630      	mov	r0, r6
 8004970:	4639      	mov	r1, r7
 8004972:	2200      	movs	r2, #0
 8004974:	f7fb fe38 	bl	80005e8 <__aeabi_dmul>
 8004978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800497a:	4606      	mov	r6, r0
 800497c:	460f      	mov	r7, r1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d09f      	beq.n	80048c2 <_strtod_l+0x98a>
 8004982:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004986:	e7a0      	b.n	80048ca <_strtod_l+0x992>
 8004988:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8004a10 <_strtod_l+0xad8>
 800498c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004990:	ec57 6b17 	vmov	r6, r7, d7
 8004994:	e799      	b.n	80048ca <_strtod_l+0x992>
 8004996:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800499a:	9b08      	ldr	r3, [sp, #32]
 800499c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1c1      	bne.n	8004928 <_strtod_l+0x9f0>
 80049a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80049a8:	0d1b      	lsrs	r3, r3, #20
 80049aa:	051b      	lsls	r3, r3, #20
 80049ac:	429d      	cmp	r5, r3
 80049ae:	d1bb      	bne.n	8004928 <_strtod_l+0x9f0>
 80049b0:	4630      	mov	r0, r6
 80049b2:	4639      	mov	r1, r7
 80049b4:	f7fc f912 	bl	8000bdc <__aeabi_d2lz>
 80049b8:	f7fb fde8 	bl	800058c <__aeabi_l2d>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4630      	mov	r0, r6
 80049c2:	4639      	mov	r1, r7
 80049c4:	f7fb fc58 	bl	8000278 <__aeabi_dsub>
 80049c8:	460b      	mov	r3, r1
 80049ca:	4602      	mov	r2, r0
 80049cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80049d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80049d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80049d6:	ea46 060a 	orr.w	r6, r6, sl
 80049da:	431e      	orrs	r6, r3
 80049dc:	d06f      	beq.n	8004abe <_strtod_l+0xb86>
 80049de:	a30e      	add	r3, pc, #56	@ (adr r3, 8004a18 <_strtod_l+0xae0>)
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f7fc f872 	bl	8000acc <__aeabi_dcmplt>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	f47f accf 	bne.w	800438c <_strtod_l+0x454>
 80049ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8004a20 <_strtod_l+0xae8>)
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049f8:	f7fc f886 	bl	8000b08 <__aeabi_dcmpgt>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d093      	beq.n	8004928 <_strtod_l+0x9f0>
 8004a00:	e4c4      	b.n	800438c <_strtod_l+0x454>
 8004a02:	bf00      	nop
 8004a04:	f3af 8000 	nop.w
 8004a08:	00000000 	.word	0x00000000
 8004a0c:	bff00000 	.word	0xbff00000
 8004a10:	00000000 	.word	0x00000000
 8004a14:	3ff00000 	.word	0x3ff00000
 8004a18:	94a03595 	.word	0x94a03595
 8004a1c:	3fdfffff 	.word	0x3fdfffff
 8004a20:	35afe535 	.word	0x35afe535
 8004a24:	3fe00000 	.word	0x3fe00000
 8004a28:	000fffff 	.word	0x000fffff
 8004a2c:	7ff00000 	.word	0x7ff00000
 8004a30:	7fefffff 	.word	0x7fefffff
 8004a34:	3ff00000 	.word	0x3ff00000
 8004a38:	3fe00000 	.word	0x3fe00000
 8004a3c:	7fe00000 	.word	0x7fe00000
 8004a40:	7c9fffff 	.word	0x7c9fffff
 8004a44:	9b08      	ldr	r3, [sp, #32]
 8004a46:	b323      	cbz	r3, 8004a92 <_strtod_l+0xb5a>
 8004a48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8004a4c:	d821      	bhi.n	8004a92 <_strtod_l+0xb5a>
 8004a4e:	a328      	add	r3, pc, #160	@ (adr r3, 8004af0 <_strtod_l+0xbb8>)
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	4630      	mov	r0, r6
 8004a56:	4639      	mov	r1, r7
 8004a58:	f7fc f842 	bl	8000ae0 <__aeabi_dcmple>
 8004a5c:	b1a0      	cbz	r0, 8004a88 <_strtod_l+0xb50>
 8004a5e:	4639      	mov	r1, r7
 8004a60:	4630      	mov	r0, r6
 8004a62:	f7fc f883 	bl	8000b6c <__aeabi_d2uiz>
 8004a66:	2801      	cmp	r0, #1
 8004a68:	bf38      	it	cc
 8004a6a:	2001      	movcc	r0, #1
 8004a6c:	f7fb fd42 	bl	80004f4 <__aeabi_ui2d>
 8004a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a72:	4606      	mov	r6, r0
 8004a74:	460f      	mov	r7, r1
 8004a76:	b9fb      	cbnz	r3, 8004ab8 <_strtod_l+0xb80>
 8004a78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a7c:	9014      	str	r0, [sp, #80]	@ 0x50
 8004a7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8004a80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8004a84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004a88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004a8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8004a8e:	1b5b      	subs	r3, r3, r5
 8004a90:	9311      	str	r3, [sp, #68]	@ 0x44
 8004a92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004a96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8004a9a:	f001 f9a1 	bl	8005de0 <__ulp>
 8004a9e:	4650      	mov	r0, sl
 8004aa0:	ec53 2b10 	vmov	r2, r3, d0
 8004aa4:	4659      	mov	r1, fp
 8004aa6:	f7fb fd9f 	bl	80005e8 <__aeabi_dmul>
 8004aaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004aae:	f7fb fbe5 	bl	800027c <__adddf3>
 8004ab2:	4682      	mov	sl, r0
 8004ab4:	468b      	mov	fp, r1
 8004ab6:	e770      	b.n	800499a <_strtod_l+0xa62>
 8004ab8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8004abc:	e7e0      	b.n	8004a80 <_strtod_l+0xb48>
 8004abe:	a30e      	add	r3, pc, #56	@ (adr r3, 8004af8 <_strtod_l+0xbc0>)
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f7fc f802 	bl	8000acc <__aeabi_dcmplt>
 8004ac8:	e798      	b.n	80049fc <_strtod_l+0xac4>
 8004aca:	2300      	movs	r3, #0
 8004acc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ace:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8004ad0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	f7ff ba6d 	b.w	8003fb2 <_strtod_l+0x7a>
 8004ad8:	2a65      	cmp	r2, #101	@ 0x65
 8004ada:	f43f ab66 	beq.w	80041aa <_strtod_l+0x272>
 8004ade:	2a45      	cmp	r2, #69	@ 0x45
 8004ae0:	f43f ab63 	beq.w	80041aa <_strtod_l+0x272>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f7ff bb9e 	b.w	8004226 <_strtod_l+0x2ee>
 8004aea:	bf00      	nop
 8004aec:	f3af 8000 	nop.w
 8004af0:	ffc00000 	.word	0xffc00000
 8004af4:	41dfffff 	.word	0x41dfffff
 8004af8:	94a03595 	.word	0x94a03595
 8004afc:	3fcfffff 	.word	0x3fcfffff

08004b00 <strtod>:
 8004b00:	460a      	mov	r2, r1
 8004b02:	4601      	mov	r1, r0
 8004b04:	4802      	ldr	r0, [pc, #8]	@ (8004b10 <strtod+0x10>)
 8004b06:	4b03      	ldr	r3, [pc, #12]	@ (8004b14 <strtod+0x14>)
 8004b08:	6800      	ldr	r0, [r0, #0]
 8004b0a:	f7ff ba15 	b.w	8003f38 <_strtod_l>
 8004b0e:	bf00      	nop
 8004b10:	20000184 	.word	0x20000184
 8004b14:	20000018 	.word	0x20000018

08004b18 <std>:
 8004b18:	2300      	movs	r3, #0
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b26:	6083      	str	r3, [r0, #8]
 8004b28:	8181      	strh	r1, [r0, #12]
 8004b2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b2c:	81c2      	strh	r2, [r0, #14]
 8004b2e:	6183      	str	r3, [r0, #24]
 8004b30:	4619      	mov	r1, r3
 8004b32:	2208      	movs	r2, #8
 8004b34:	305c      	adds	r0, #92	@ 0x5c
 8004b36:	f000 f8f4 	bl	8004d22 <memset>
 8004b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b70 <std+0x58>)
 8004b3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b74 <std+0x5c>)
 8004b40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b42:	4b0d      	ldr	r3, [pc, #52]	@ (8004b78 <std+0x60>)
 8004b44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b46:	4b0d      	ldr	r3, [pc, #52]	@ (8004b7c <std+0x64>)
 8004b48:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <std+0x68>)
 8004b4c:	6224      	str	r4, [r4, #32]
 8004b4e:	429c      	cmp	r4, r3
 8004b50:	d006      	beq.n	8004b60 <std+0x48>
 8004b52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b56:	4294      	cmp	r4, r2
 8004b58:	d002      	beq.n	8004b60 <std+0x48>
 8004b5a:	33d0      	adds	r3, #208	@ 0xd0
 8004b5c:	429c      	cmp	r4, r3
 8004b5e:	d105      	bne.n	8004b6c <std+0x54>
 8004b60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b68:	f000 b966 	b.w	8004e38 <__retarget_lock_init_recursive>
 8004b6c:	bd10      	pop	{r4, pc}
 8004b6e:	bf00      	nop
 8004b70:	08004c9d 	.word	0x08004c9d
 8004b74:	08004cbf 	.word	0x08004cbf
 8004b78:	08004cf7 	.word	0x08004cf7
 8004b7c:	08004d1b 	.word	0x08004d1b
 8004b80:	2000037c 	.word	0x2000037c

08004b84 <stdio_exit_handler>:
 8004b84:	4a02      	ldr	r2, [pc, #8]	@ (8004b90 <stdio_exit_handler+0xc>)
 8004b86:	4903      	ldr	r1, [pc, #12]	@ (8004b94 <stdio_exit_handler+0x10>)
 8004b88:	4803      	ldr	r0, [pc, #12]	@ (8004b98 <stdio_exit_handler+0x14>)
 8004b8a:	f000 b869 	b.w	8004c60 <_fwalk_sglue>
 8004b8e:	bf00      	nop
 8004b90:	2000000c 	.word	0x2000000c
 8004b94:	08006181 	.word	0x08006181
 8004b98:	20000188 	.word	0x20000188

08004b9c <cleanup_stdio>:
 8004b9c:	6841      	ldr	r1, [r0, #4]
 8004b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <cleanup_stdio+0x34>)
 8004ba0:	4299      	cmp	r1, r3
 8004ba2:	b510      	push	{r4, lr}
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	d001      	beq.n	8004bac <cleanup_stdio+0x10>
 8004ba8:	f001 faea 	bl	8006180 <_fflush_r>
 8004bac:	68a1      	ldr	r1, [r4, #8]
 8004bae:	4b09      	ldr	r3, [pc, #36]	@ (8004bd4 <cleanup_stdio+0x38>)
 8004bb0:	4299      	cmp	r1, r3
 8004bb2:	d002      	beq.n	8004bba <cleanup_stdio+0x1e>
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f001 fae3 	bl	8006180 <_fflush_r>
 8004bba:	68e1      	ldr	r1, [r4, #12]
 8004bbc:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <cleanup_stdio+0x3c>)
 8004bbe:	4299      	cmp	r1, r3
 8004bc0:	d004      	beq.n	8004bcc <cleanup_stdio+0x30>
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc8:	f001 bada 	b.w	8006180 <_fflush_r>
 8004bcc:	bd10      	pop	{r4, pc}
 8004bce:	bf00      	nop
 8004bd0:	2000037c 	.word	0x2000037c
 8004bd4:	200003e4 	.word	0x200003e4
 8004bd8:	2000044c 	.word	0x2000044c

08004bdc <global_stdio_init.part.0>:
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	4b0b      	ldr	r3, [pc, #44]	@ (8004c0c <global_stdio_init.part.0+0x30>)
 8004be0:	4c0b      	ldr	r4, [pc, #44]	@ (8004c10 <global_stdio_init.part.0+0x34>)
 8004be2:	4a0c      	ldr	r2, [pc, #48]	@ (8004c14 <global_stdio_init.part.0+0x38>)
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	4620      	mov	r0, r4
 8004be8:	2200      	movs	r2, #0
 8004bea:	2104      	movs	r1, #4
 8004bec:	f7ff ff94 	bl	8004b18 <std>
 8004bf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	2109      	movs	r1, #9
 8004bf8:	f7ff ff8e 	bl	8004b18 <std>
 8004bfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c00:	2202      	movs	r2, #2
 8004c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c06:	2112      	movs	r1, #18
 8004c08:	f7ff bf86 	b.w	8004b18 <std>
 8004c0c:	200004b4 	.word	0x200004b4
 8004c10:	2000037c 	.word	0x2000037c
 8004c14:	08004b85 	.word	0x08004b85

08004c18 <__sfp_lock_acquire>:
 8004c18:	4801      	ldr	r0, [pc, #4]	@ (8004c20 <__sfp_lock_acquire+0x8>)
 8004c1a:	f000 b90e 	b.w	8004e3a <__retarget_lock_acquire_recursive>
 8004c1e:	bf00      	nop
 8004c20:	200004bd 	.word	0x200004bd

08004c24 <__sfp_lock_release>:
 8004c24:	4801      	ldr	r0, [pc, #4]	@ (8004c2c <__sfp_lock_release+0x8>)
 8004c26:	f000 b909 	b.w	8004e3c <__retarget_lock_release_recursive>
 8004c2a:	bf00      	nop
 8004c2c:	200004bd 	.word	0x200004bd

08004c30 <__sinit>:
 8004c30:	b510      	push	{r4, lr}
 8004c32:	4604      	mov	r4, r0
 8004c34:	f7ff fff0 	bl	8004c18 <__sfp_lock_acquire>
 8004c38:	6a23      	ldr	r3, [r4, #32]
 8004c3a:	b11b      	cbz	r3, 8004c44 <__sinit+0x14>
 8004c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c40:	f7ff bff0 	b.w	8004c24 <__sfp_lock_release>
 8004c44:	4b04      	ldr	r3, [pc, #16]	@ (8004c58 <__sinit+0x28>)
 8004c46:	6223      	str	r3, [r4, #32]
 8004c48:	4b04      	ldr	r3, [pc, #16]	@ (8004c5c <__sinit+0x2c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f5      	bne.n	8004c3c <__sinit+0xc>
 8004c50:	f7ff ffc4 	bl	8004bdc <global_stdio_init.part.0>
 8004c54:	e7f2      	b.n	8004c3c <__sinit+0xc>
 8004c56:	bf00      	nop
 8004c58:	08004b9d 	.word	0x08004b9d
 8004c5c:	200004b4 	.word	0x200004b4

08004c60 <_fwalk_sglue>:
 8004c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c64:	4607      	mov	r7, r0
 8004c66:	4688      	mov	r8, r1
 8004c68:	4614      	mov	r4, r2
 8004c6a:	2600      	movs	r6, #0
 8004c6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c70:	f1b9 0901 	subs.w	r9, r9, #1
 8004c74:	d505      	bpl.n	8004c82 <_fwalk_sglue+0x22>
 8004c76:	6824      	ldr	r4, [r4, #0]
 8004c78:	2c00      	cmp	r4, #0
 8004c7a:	d1f7      	bne.n	8004c6c <_fwalk_sglue+0xc>
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c82:	89ab      	ldrh	r3, [r5, #12]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d907      	bls.n	8004c98 <_fwalk_sglue+0x38>
 8004c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	d003      	beq.n	8004c98 <_fwalk_sglue+0x38>
 8004c90:	4629      	mov	r1, r5
 8004c92:	4638      	mov	r0, r7
 8004c94:	47c0      	blx	r8
 8004c96:	4306      	orrs	r6, r0
 8004c98:	3568      	adds	r5, #104	@ 0x68
 8004c9a:	e7e9      	b.n	8004c70 <_fwalk_sglue+0x10>

08004c9c <__sread>:
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca4:	f000 f87a 	bl	8004d9c <_read_r>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	bfab      	itete	ge
 8004cac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cae:	89a3      	ldrhlt	r3, [r4, #12]
 8004cb0:	181b      	addge	r3, r3, r0
 8004cb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cb6:	bfac      	ite	ge
 8004cb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004cba:	81a3      	strhlt	r3, [r4, #12]
 8004cbc:	bd10      	pop	{r4, pc}

08004cbe <__swrite>:
 8004cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc2:	461f      	mov	r7, r3
 8004cc4:	898b      	ldrh	r3, [r1, #12]
 8004cc6:	05db      	lsls	r3, r3, #23
 8004cc8:	4605      	mov	r5, r0
 8004cca:	460c      	mov	r4, r1
 8004ccc:	4616      	mov	r6, r2
 8004cce:	d505      	bpl.n	8004cdc <__swrite+0x1e>
 8004cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f000 f84e 	bl	8004d78 <_lseek_r>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ce2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ce6:	81a3      	strh	r3, [r4, #12]
 8004ce8:	4632      	mov	r2, r6
 8004cea:	463b      	mov	r3, r7
 8004cec:	4628      	mov	r0, r5
 8004cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf2:	f000 b865 	b.w	8004dc0 <_write_r>

08004cf6 <__sseek>:
 8004cf6:	b510      	push	{r4, lr}
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfe:	f000 f83b 	bl	8004d78 <_lseek_r>
 8004d02:	1c43      	adds	r3, r0, #1
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	bf15      	itete	ne
 8004d08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d12:	81a3      	strheq	r3, [r4, #12]
 8004d14:	bf18      	it	ne
 8004d16:	81a3      	strhne	r3, [r4, #12]
 8004d18:	bd10      	pop	{r4, pc}

08004d1a <__sclose>:
 8004d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1e:	f000 b81b 	b.w	8004d58 <_close_r>

08004d22 <memset>:
 8004d22:	4402      	add	r2, r0
 8004d24:	4603      	mov	r3, r0
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d100      	bne.n	8004d2c <memset+0xa>
 8004d2a:	4770      	bx	lr
 8004d2c:	f803 1b01 	strb.w	r1, [r3], #1
 8004d30:	e7f9      	b.n	8004d26 <memset+0x4>

08004d32 <strncmp>:
 8004d32:	b510      	push	{r4, lr}
 8004d34:	b16a      	cbz	r2, 8004d52 <strncmp+0x20>
 8004d36:	3901      	subs	r1, #1
 8004d38:	1884      	adds	r4, r0, r2
 8004d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d3e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d103      	bne.n	8004d4e <strncmp+0x1c>
 8004d46:	42a0      	cmp	r0, r4
 8004d48:	d001      	beq.n	8004d4e <strncmp+0x1c>
 8004d4a:	2a00      	cmp	r2, #0
 8004d4c:	d1f5      	bne.n	8004d3a <strncmp+0x8>
 8004d4e:	1ad0      	subs	r0, r2, r3
 8004d50:	bd10      	pop	{r4, pc}
 8004d52:	4610      	mov	r0, r2
 8004d54:	e7fc      	b.n	8004d50 <strncmp+0x1e>
	...

08004d58 <_close_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	4d06      	ldr	r5, [pc, #24]	@ (8004d74 <_close_r+0x1c>)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	4604      	mov	r4, r0
 8004d60:	4608      	mov	r0, r1
 8004d62:	602b      	str	r3, [r5, #0]
 8004d64:	f7fd f866 	bl	8001e34 <_close>
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d102      	bne.n	8004d72 <_close_r+0x1a>
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	b103      	cbz	r3, 8004d72 <_close_r+0x1a>
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	200004b8 	.word	0x200004b8

08004d78 <_lseek_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4d07      	ldr	r5, [pc, #28]	@ (8004d98 <_lseek_r+0x20>)
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	4608      	mov	r0, r1
 8004d80:	4611      	mov	r1, r2
 8004d82:	2200      	movs	r2, #0
 8004d84:	602a      	str	r2, [r5, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	f7fd f87b 	bl	8001e82 <_lseek>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d102      	bne.n	8004d96 <_lseek_r+0x1e>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	b103      	cbz	r3, 8004d96 <_lseek_r+0x1e>
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	bd38      	pop	{r3, r4, r5, pc}
 8004d98:	200004b8 	.word	0x200004b8

08004d9c <_read_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	4d07      	ldr	r5, [pc, #28]	@ (8004dbc <_read_r+0x20>)
 8004da0:	4604      	mov	r4, r0
 8004da2:	4608      	mov	r0, r1
 8004da4:	4611      	mov	r1, r2
 8004da6:	2200      	movs	r2, #0
 8004da8:	602a      	str	r2, [r5, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	f7fd f809 	bl	8001dc2 <_read>
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	d102      	bne.n	8004dba <_read_r+0x1e>
 8004db4:	682b      	ldr	r3, [r5, #0]
 8004db6:	b103      	cbz	r3, 8004dba <_read_r+0x1e>
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
 8004dbc:	200004b8 	.word	0x200004b8

08004dc0 <_write_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4d07      	ldr	r5, [pc, #28]	@ (8004de0 <_write_r+0x20>)
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	4608      	mov	r0, r1
 8004dc8:	4611      	mov	r1, r2
 8004dca:	2200      	movs	r2, #0
 8004dcc:	602a      	str	r2, [r5, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f7fd f814 	bl	8001dfc <_write>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_write_r+0x1e>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_write_r+0x1e>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	200004b8 	.word	0x200004b8

08004de4 <__errno>:
 8004de4:	4b01      	ldr	r3, [pc, #4]	@ (8004dec <__errno+0x8>)
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000184 	.word	0x20000184

08004df0 <__libc_init_array>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	4d0d      	ldr	r5, [pc, #52]	@ (8004e28 <__libc_init_array+0x38>)
 8004df4:	4c0d      	ldr	r4, [pc, #52]	@ (8004e2c <__libc_init_array+0x3c>)
 8004df6:	1b64      	subs	r4, r4, r5
 8004df8:	10a4      	asrs	r4, r4, #2
 8004dfa:	2600      	movs	r6, #0
 8004dfc:	42a6      	cmp	r6, r4
 8004dfe:	d109      	bne.n	8004e14 <__libc_init_array+0x24>
 8004e00:	4d0b      	ldr	r5, [pc, #44]	@ (8004e30 <__libc_init_array+0x40>)
 8004e02:	4c0c      	ldr	r4, [pc, #48]	@ (8004e34 <__libc_init_array+0x44>)
 8004e04:	f001 fe72 	bl	8006aec <_init>
 8004e08:	1b64      	subs	r4, r4, r5
 8004e0a:	10a4      	asrs	r4, r4, #2
 8004e0c:	2600      	movs	r6, #0
 8004e0e:	42a6      	cmp	r6, r4
 8004e10:	d105      	bne.n	8004e1e <__libc_init_array+0x2e>
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e18:	4798      	blx	r3
 8004e1a:	3601      	adds	r6, #1
 8004e1c:	e7ee      	b.n	8004dfc <__libc_init_array+0xc>
 8004e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e22:	4798      	blx	r3
 8004e24:	3601      	adds	r6, #1
 8004e26:	e7f2      	b.n	8004e0e <__libc_init_array+0x1e>
 8004e28:	08006f20 	.word	0x08006f20
 8004e2c:	08006f20 	.word	0x08006f20
 8004e30:	08006f20 	.word	0x08006f20
 8004e34:	08006f24 	.word	0x08006f24

08004e38 <__retarget_lock_init_recursive>:
 8004e38:	4770      	bx	lr

08004e3a <__retarget_lock_acquire_recursive>:
 8004e3a:	4770      	bx	lr

08004e3c <__retarget_lock_release_recursive>:
 8004e3c:	4770      	bx	lr

08004e3e <memcpy>:
 8004e3e:	440a      	add	r2, r1
 8004e40:	4291      	cmp	r1, r2
 8004e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e46:	d100      	bne.n	8004e4a <memcpy+0xc>
 8004e48:	4770      	bx	lr
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e54:	4291      	cmp	r1, r2
 8004e56:	d1f9      	bne.n	8004e4c <memcpy+0xe>
 8004e58:	bd10      	pop	{r4, pc}
 8004e5a:	0000      	movs	r0, r0
 8004e5c:	0000      	movs	r0, r0
	...

08004e60 <nan>:
 8004e60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004e68 <nan+0x8>
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	00000000 	.word	0x00000000
 8004e6c:	7ff80000 	.word	0x7ff80000

08004e70 <_free_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4605      	mov	r5, r0
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d041      	beq.n	8004efc <_free_r+0x8c>
 8004e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7c:	1f0c      	subs	r4, r1, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfb8      	it	lt
 8004e82:	18e4      	addlt	r4, r4, r3
 8004e84:	f000 fc2c 	bl	80056e0 <__malloc_lock>
 8004e88:	4a1d      	ldr	r2, [pc, #116]	@ (8004f00 <_free_r+0x90>)
 8004e8a:	6813      	ldr	r3, [r2, #0]
 8004e8c:	b933      	cbnz	r3, 8004e9c <_free_r+0x2c>
 8004e8e:	6063      	str	r3, [r4, #4]
 8004e90:	6014      	str	r4, [r2, #0]
 8004e92:	4628      	mov	r0, r5
 8004e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e98:	f000 bc28 	b.w	80056ec <__malloc_unlock>
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	d908      	bls.n	8004eb2 <_free_r+0x42>
 8004ea0:	6820      	ldr	r0, [r4, #0]
 8004ea2:	1821      	adds	r1, r4, r0
 8004ea4:	428b      	cmp	r3, r1
 8004ea6:	bf01      	itttt	eq
 8004ea8:	6819      	ldreq	r1, [r3, #0]
 8004eaa:	685b      	ldreq	r3, [r3, #4]
 8004eac:	1809      	addeq	r1, r1, r0
 8004eae:	6021      	streq	r1, [r4, #0]
 8004eb0:	e7ed      	b.n	8004e8e <_free_r+0x1e>
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	b10b      	cbz	r3, 8004ebc <_free_r+0x4c>
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d9fa      	bls.n	8004eb2 <_free_r+0x42>
 8004ebc:	6811      	ldr	r1, [r2, #0]
 8004ebe:	1850      	adds	r0, r2, r1
 8004ec0:	42a0      	cmp	r0, r4
 8004ec2:	d10b      	bne.n	8004edc <_free_r+0x6c>
 8004ec4:	6820      	ldr	r0, [r4, #0]
 8004ec6:	4401      	add	r1, r0
 8004ec8:	1850      	adds	r0, r2, r1
 8004eca:	4283      	cmp	r3, r0
 8004ecc:	6011      	str	r1, [r2, #0]
 8004ece:	d1e0      	bne.n	8004e92 <_free_r+0x22>
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	6053      	str	r3, [r2, #4]
 8004ed6:	4408      	add	r0, r1
 8004ed8:	6010      	str	r0, [r2, #0]
 8004eda:	e7da      	b.n	8004e92 <_free_r+0x22>
 8004edc:	d902      	bls.n	8004ee4 <_free_r+0x74>
 8004ede:	230c      	movs	r3, #12
 8004ee0:	602b      	str	r3, [r5, #0]
 8004ee2:	e7d6      	b.n	8004e92 <_free_r+0x22>
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	1821      	adds	r1, r4, r0
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	bf04      	itt	eq
 8004eec:	6819      	ldreq	r1, [r3, #0]
 8004eee:	685b      	ldreq	r3, [r3, #4]
 8004ef0:	6063      	str	r3, [r4, #4]
 8004ef2:	bf04      	itt	eq
 8004ef4:	1809      	addeq	r1, r1, r0
 8004ef6:	6021      	streq	r1, [r4, #0]
 8004ef8:	6054      	str	r4, [r2, #4]
 8004efa:	e7ca      	b.n	8004e92 <_free_r+0x22>
 8004efc:	bd38      	pop	{r3, r4, r5, pc}
 8004efe:	bf00      	nop
 8004f00:	200004c4 	.word	0x200004c4

08004f04 <rshift>:
 8004f04:	6903      	ldr	r3, [r0, #16]
 8004f06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004f0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004f12:	f100 0414 	add.w	r4, r0, #20
 8004f16:	dd45      	ble.n	8004fa4 <rshift+0xa0>
 8004f18:	f011 011f 	ands.w	r1, r1, #31
 8004f1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004f20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004f24:	d10c      	bne.n	8004f40 <rshift+0x3c>
 8004f26:	f100 0710 	add.w	r7, r0, #16
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	42b1      	cmp	r1, r6
 8004f2e:	d334      	bcc.n	8004f9a <rshift+0x96>
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	1eea      	subs	r2, r5, #3
 8004f36:	4296      	cmp	r6, r2
 8004f38:	bf38      	it	cc
 8004f3a:	2300      	movcc	r3, #0
 8004f3c:	4423      	add	r3, r4
 8004f3e:	e015      	b.n	8004f6c <rshift+0x68>
 8004f40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004f44:	f1c1 0820 	rsb	r8, r1, #32
 8004f48:	40cf      	lsrs	r7, r1
 8004f4a:	f105 0e04 	add.w	lr, r5, #4
 8004f4e:	46a1      	mov	r9, r4
 8004f50:	4576      	cmp	r6, lr
 8004f52:	46f4      	mov	ip, lr
 8004f54:	d815      	bhi.n	8004f82 <rshift+0x7e>
 8004f56:	1a9a      	subs	r2, r3, r2
 8004f58:	0092      	lsls	r2, r2, #2
 8004f5a:	3a04      	subs	r2, #4
 8004f5c:	3501      	adds	r5, #1
 8004f5e:	42ae      	cmp	r6, r5
 8004f60:	bf38      	it	cc
 8004f62:	2200      	movcc	r2, #0
 8004f64:	18a3      	adds	r3, r4, r2
 8004f66:	50a7      	str	r7, [r4, r2]
 8004f68:	b107      	cbz	r7, 8004f6c <rshift+0x68>
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	1b1a      	subs	r2, r3, r4
 8004f6e:	42a3      	cmp	r3, r4
 8004f70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004f74:	bf08      	it	eq
 8004f76:	2300      	moveq	r3, #0
 8004f78:	6102      	str	r2, [r0, #16]
 8004f7a:	bf08      	it	eq
 8004f7c:	6143      	streq	r3, [r0, #20]
 8004f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f82:	f8dc c000 	ldr.w	ip, [ip]
 8004f86:	fa0c fc08 	lsl.w	ip, ip, r8
 8004f8a:	ea4c 0707 	orr.w	r7, ip, r7
 8004f8e:	f849 7b04 	str.w	r7, [r9], #4
 8004f92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004f96:	40cf      	lsrs	r7, r1
 8004f98:	e7da      	b.n	8004f50 <rshift+0x4c>
 8004f9a:	f851 cb04 	ldr.w	ip, [r1], #4
 8004f9e:	f847 cf04 	str.w	ip, [r7, #4]!
 8004fa2:	e7c3      	b.n	8004f2c <rshift+0x28>
 8004fa4:	4623      	mov	r3, r4
 8004fa6:	e7e1      	b.n	8004f6c <rshift+0x68>

08004fa8 <__hexdig_fun>:
 8004fa8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8004fac:	2b09      	cmp	r3, #9
 8004fae:	d802      	bhi.n	8004fb6 <__hexdig_fun+0xe>
 8004fb0:	3820      	subs	r0, #32
 8004fb2:	b2c0      	uxtb	r0, r0
 8004fb4:	4770      	bx	lr
 8004fb6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	d801      	bhi.n	8004fc2 <__hexdig_fun+0x1a>
 8004fbe:	3847      	subs	r0, #71	@ 0x47
 8004fc0:	e7f7      	b.n	8004fb2 <__hexdig_fun+0xa>
 8004fc2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8004fc6:	2b05      	cmp	r3, #5
 8004fc8:	d801      	bhi.n	8004fce <__hexdig_fun+0x26>
 8004fca:	3827      	subs	r0, #39	@ 0x27
 8004fcc:	e7f1      	b.n	8004fb2 <__hexdig_fun+0xa>
 8004fce:	2000      	movs	r0, #0
 8004fd0:	4770      	bx	lr
	...

08004fd4 <__gethex>:
 8004fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	468a      	mov	sl, r1
 8004fdc:	9302      	str	r3, [sp, #8]
 8004fde:	680b      	ldr	r3, [r1, #0]
 8004fe0:	9001      	str	r0, [sp, #4]
 8004fe2:	4690      	mov	r8, r2
 8004fe4:	1c9c      	adds	r4, r3, #2
 8004fe6:	46a1      	mov	r9, r4
 8004fe8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004fec:	2830      	cmp	r0, #48	@ 0x30
 8004fee:	d0fa      	beq.n	8004fe6 <__gethex+0x12>
 8004ff0:	eba9 0303 	sub.w	r3, r9, r3
 8004ff4:	f1a3 0b02 	sub.w	fp, r3, #2
 8004ff8:	f7ff ffd6 	bl	8004fa8 <__hexdig_fun>
 8004ffc:	4605      	mov	r5, r0
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d168      	bne.n	80050d4 <__gethex+0x100>
 8005002:	49a0      	ldr	r1, [pc, #640]	@ (8005284 <__gethex+0x2b0>)
 8005004:	2201      	movs	r2, #1
 8005006:	4648      	mov	r0, r9
 8005008:	f7ff fe93 	bl	8004d32 <strncmp>
 800500c:	4607      	mov	r7, r0
 800500e:	2800      	cmp	r0, #0
 8005010:	d167      	bne.n	80050e2 <__gethex+0x10e>
 8005012:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005016:	4626      	mov	r6, r4
 8005018:	f7ff ffc6 	bl	8004fa8 <__hexdig_fun>
 800501c:	2800      	cmp	r0, #0
 800501e:	d062      	beq.n	80050e6 <__gethex+0x112>
 8005020:	4623      	mov	r3, r4
 8005022:	7818      	ldrb	r0, [r3, #0]
 8005024:	2830      	cmp	r0, #48	@ 0x30
 8005026:	4699      	mov	r9, r3
 8005028:	f103 0301 	add.w	r3, r3, #1
 800502c:	d0f9      	beq.n	8005022 <__gethex+0x4e>
 800502e:	f7ff ffbb 	bl	8004fa8 <__hexdig_fun>
 8005032:	fab0 f580 	clz	r5, r0
 8005036:	096d      	lsrs	r5, r5, #5
 8005038:	f04f 0b01 	mov.w	fp, #1
 800503c:	464a      	mov	r2, r9
 800503e:	4616      	mov	r6, r2
 8005040:	3201      	adds	r2, #1
 8005042:	7830      	ldrb	r0, [r6, #0]
 8005044:	f7ff ffb0 	bl	8004fa8 <__hexdig_fun>
 8005048:	2800      	cmp	r0, #0
 800504a:	d1f8      	bne.n	800503e <__gethex+0x6a>
 800504c:	498d      	ldr	r1, [pc, #564]	@ (8005284 <__gethex+0x2b0>)
 800504e:	2201      	movs	r2, #1
 8005050:	4630      	mov	r0, r6
 8005052:	f7ff fe6e 	bl	8004d32 <strncmp>
 8005056:	2800      	cmp	r0, #0
 8005058:	d13f      	bne.n	80050da <__gethex+0x106>
 800505a:	b944      	cbnz	r4, 800506e <__gethex+0x9a>
 800505c:	1c74      	adds	r4, r6, #1
 800505e:	4622      	mov	r2, r4
 8005060:	4616      	mov	r6, r2
 8005062:	3201      	adds	r2, #1
 8005064:	7830      	ldrb	r0, [r6, #0]
 8005066:	f7ff ff9f 	bl	8004fa8 <__hexdig_fun>
 800506a:	2800      	cmp	r0, #0
 800506c:	d1f8      	bne.n	8005060 <__gethex+0x8c>
 800506e:	1ba4      	subs	r4, r4, r6
 8005070:	00a7      	lsls	r7, r4, #2
 8005072:	7833      	ldrb	r3, [r6, #0]
 8005074:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005078:	2b50      	cmp	r3, #80	@ 0x50
 800507a:	d13e      	bne.n	80050fa <__gethex+0x126>
 800507c:	7873      	ldrb	r3, [r6, #1]
 800507e:	2b2b      	cmp	r3, #43	@ 0x2b
 8005080:	d033      	beq.n	80050ea <__gethex+0x116>
 8005082:	2b2d      	cmp	r3, #45	@ 0x2d
 8005084:	d034      	beq.n	80050f0 <__gethex+0x11c>
 8005086:	1c71      	adds	r1, r6, #1
 8005088:	2400      	movs	r4, #0
 800508a:	7808      	ldrb	r0, [r1, #0]
 800508c:	f7ff ff8c 	bl	8004fa8 <__hexdig_fun>
 8005090:	1e43      	subs	r3, r0, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b18      	cmp	r3, #24
 8005096:	d830      	bhi.n	80050fa <__gethex+0x126>
 8005098:	f1a0 0210 	sub.w	r2, r0, #16
 800509c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80050a0:	f7ff ff82 	bl	8004fa8 <__hexdig_fun>
 80050a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80050a8:	fa5f fc8c 	uxtb.w	ip, ip
 80050ac:	f1bc 0f18 	cmp.w	ip, #24
 80050b0:	f04f 030a 	mov.w	r3, #10
 80050b4:	d91e      	bls.n	80050f4 <__gethex+0x120>
 80050b6:	b104      	cbz	r4, 80050ba <__gethex+0xe6>
 80050b8:	4252      	negs	r2, r2
 80050ba:	4417      	add	r7, r2
 80050bc:	f8ca 1000 	str.w	r1, [sl]
 80050c0:	b1ed      	cbz	r5, 80050fe <__gethex+0x12a>
 80050c2:	f1bb 0f00 	cmp.w	fp, #0
 80050c6:	bf0c      	ite	eq
 80050c8:	2506      	moveq	r5, #6
 80050ca:	2500      	movne	r5, #0
 80050cc:	4628      	mov	r0, r5
 80050ce:	b005      	add	sp, #20
 80050d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d4:	2500      	movs	r5, #0
 80050d6:	462c      	mov	r4, r5
 80050d8:	e7b0      	b.n	800503c <__gethex+0x68>
 80050da:	2c00      	cmp	r4, #0
 80050dc:	d1c7      	bne.n	800506e <__gethex+0x9a>
 80050de:	4627      	mov	r7, r4
 80050e0:	e7c7      	b.n	8005072 <__gethex+0x9e>
 80050e2:	464e      	mov	r6, r9
 80050e4:	462f      	mov	r7, r5
 80050e6:	2501      	movs	r5, #1
 80050e8:	e7c3      	b.n	8005072 <__gethex+0x9e>
 80050ea:	2400      	movs	r4, #0
 80050ec:	1cb1      	adds	r1, r6, #2
 80050ee:	e7cc      	b.n	800508a <__gethex+0xb6>
 80050f0:	2401      	movs	r4, #1
 80050f2:	e7fb      	b.n	80050ec <__gethex+0x118>
 80050f4:	fb03 0002 	mla	r0, r3, r2, r0
 80050f8:	e7ce      	b.n	8005098 <__gethex+0xc4>
 80050fa:	4631      	mov	r1, r6
 80050fc:	e7de      	b.n	80050bc <__gethex+0xe8>
 80050fe:	eba6 0309 	sub.w	r3, r6, r9
 8005102:	3b01      	subs	r3, #1
 8005104:	4629      	mov	r1, r5
 8005106:	2b07      	cmp	r3, #7
 8005108:	dc0a      	bgt.n	8005120 <__gethex+0x14c>
 800510a:	9801      	ldr	r0, [sp, #4]
 800510c:	f000 faf4 	bl	80056f8 <_Balloc>
 8005110:	4604      	mov	r4, r0
 8005112:	b940      	cbnz	r0, 8005126 <__gethex+0x152>
 8005114:	4b5c      	ldr	r3, [pc, #368]	@ (8005288 <__gethex+0x2b4>)
 8005116:	4602      	mov	r2, r0
 8005118:	21e4      	movs	r1, #228	@ 0xe4
 800511a:	485c      	ldr	r0, [pc, #368]	@ (800528c <__gethex+0x2b8>)
 800511c:	f001 f868 	bl	80061f0 <__assert_func>
 8005120:	3101      	adds	r1, #1
 8005122:	105b      	asrs	r3, r3, #1
 8005124:	e7ef      	b.n	8005106 <__gethex+0x132>
 8005126:	f100 0a14 	add.w	sl, r0, #20
 800512a:	2300      	movs	r3, #0
 800512c:	4655      	mov	r5, sl
 800512e:	469b      	mov	fp, r3
 8005130:	45b1      	cmp	r9, r6
 8005132:	d337      	bcc.n	80051a4 <__gethex+0x1d0>
 8005134:	f845 bb04 	str.w	fp, [r5], #4
 8005138:	eba5 050a 	sub.w	r5, r5, sl
 800513c:	10ad      	asrs	r5, r5, #2
 800513e:	6125      	str	r5, [r4, #16]
 8005140:	4658      	mov	r0, fp
 8005142:	f000 fbcb 	bl	80058dc <__hi0bits>
 8005146:	016d      	lsls	r5, r5, #5
 8005148:	f8d8 6000 	ldr.w	r6, [r8]
 800514c:	1a2d      	subs	r5, r5, r0
 800514e:	42b5      	cmp	r5, r6
 8005150:	dd54      	ble.n	80051fc <__gethex+0x228>
 8005152:	1bad      	subs	r5, r5, r6
 8005154:	4629      	mov	r1, r5
 8005156:	4620      	mov	r0, r4
 8005158:	f000 ff5f 	bl	800601a <__any_on>
 800515c:	4681      	mov	r9, r0
 800515e:	b178      	cbz	r0, 8005180 <__gethex+0x1ac>
 8005160:	1e6b      	subs	r3, r5, #1
 8005162:	1159      	asrs	r1, r3, #5
 8005164:	f003 021f 	and.w	r2, r3, #31
 8005168:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800516c:	f04f 0901 	mov.w	r9, #1
 8005170:	fa09 f202 	lsl.w	r2, r9, r2
 8005174:	420a      	tst	r2, r1
 8005176:	d003      	beq.n	8005180 <__gethex+0x1ac>
 8005178:	454b      	cmp	r3, r9
 800517a:	dc36      	bgt.n	80051ea <__gethex+0x216>
 800517c:	f04f 0902 	mov.w	r9, #2
 8005180:	4629      	mov	r1, r5
 8005182:	4620      	mov	r0, r4
 8005184:	f7ff febe 	bl	8004f04 <rshift>
 8005188:	442f      	add	r7, r5
 800518a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800518e:	42bb      	cmp	r3, r7
 8005190:	da42      	bge.n	8005218 <__gethex+0x244>
 8005192:	9801      	ldr	r0, [sp, #4]
 8005194:	4621      	mov	r1, r4
 8005196:	f000 faef 	bl	8005778 <_Bfree>
 800519a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800519c:	2300      	movs	r3, #0
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	25a3      	movs	r5, #163	@ 0xa3
 80051a2:	e793      	b.n	80050cc <__gethex+0xf8>
 80051a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80051a8:	2a2e      	cmp	r2, #46	@ 0x2e
 80051aa:	d012      	beq.n	80051d2 <__gethex+0x1fe>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d104      	bne.n	80051ba <__gethex+0x1e6>
 80051b0:	f845 bb04 	str.w	fp, [r5], #4
 80051b4:	f04f 0b00 	mov.w	fp, #0
 80051b8:	465b      	mov	r3, fp
 80051ba:	7830      	ldrb	r0, [r6, #0]
 80051bc:	9303      	str	r3, [sp, #12]
 80051be:	f7ff fef3 	bl	8004fa8 <__hexdig_fun>
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	f000 000f 	and.w	r0, r0, #15
 80051c8:	4098      	lsls	r0, r3
 80051ca:	ea4b 0b00 	orr.w	fp, fp, r0
 80051ce:	3304      	adds	r3, #4
 80051d0:	e7ae      	b.n	8005130 <__gethex+0x15c>
 80051d2:	45b1      	cmp	r9, r6
 80051d4:	d8ea      	bhi.n	80051ac <__gethex+0x1d8>
 80051d6:	492b      	ldr	r1, [pc, #172]	@ (8005284 <__gethex+0x2b0>)
 80051d8:	9303      	str	r3, [sp, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	4630      	mov	r0, r6
 80051de:	f7ff fda8 	bl	8004d32 <strncmp>
 80051e2:	9b03      	ldr	r3, [sp, #12]
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d1e1      	bne.n	80051ac <__gethex+0x1d8>
 80051e8:	e7a2      	b.n	8005130 <__gethex+0x15c>
 80051ea:	1ea9      	subs	r1, r5, #2
 80051ec:	4620      	mov	r0, r4
 80051ee:	f000 ff14 	bl	800601a <__any_on>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d0c2      	beq.n	800517c <__gethex+0x1a8>
 80051f6:	f04f 0903 	mov.w	r9, #3
 80051fa:	e7c1      	b.n	8005180 <__gethex+0x1ac>
 80051fc:	da09      	bge.n	8005212 <__gethex+0x23e>
 80051fe:	1b75      	subs	r5, r6, r5
 8005200:	4621      	mov	r1, r4
 8005202:	9801      	ldr	r0, [sp, #4]
 8005204:	462a      	mov	r2, r5
 8005206:	f000 fccf 	bl	8005ba8 <__lshift>
 800520a:	1b7f      	subs	r7, r7, r5
 800520c:	4604      	mov	r4, r0
 800520e:	f100 0a14 	add.w	sl, r0, #20
 8005212:	f04f 0900 	mov.w	r9, #0
 8005216:	e7b8      	b.n	800518a <__gethex+0x1b6>
 8005218:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800521c:	42bd      	cmp	r5, r7
 800521e:	dd6f      	ble.n	8005300 <__gethex+0x32c>
 8005220:	1bed      	subs	r5, r5, r7
 8005222:	42ae      	cmp	r6, r5
 8005224:	dc34      	bgt.n	8005290 <__gethex+0x2bc>
 8005226:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d022      	beq.n	8005274 <__gethex+0x2a0>
 800522e:	2b03      	cmp	r3, #3
 8005230:	d024      	beq.n	800527c <__gethex+0x2a8>
 8005232:	2b01      	cmp	r3, #1
 8005234:	d115      	bne.n	8005262 <__gethex+0x28e>
 8005236:	42ae      	cmp	r6, r5
 8005238:	d113      	bne.n	8005262 <__gethex+0x28e>
 800523a:	2e01      	cmp	r6, #1
 800523c:	d10b      	bne.n	8005256 <__gethex+0x282>
 800523e:	9a02      	ldr	r2, [sp, #8]
 8005240:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	2301      	movs	r3, #1
 8005248:	6123      	str	r3, [r4, #16]
 800524a:	f8ca 3000 	str.w	r3, [sl]
 800524e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005250:	2562      	movs	r5, #98	@ 0x62
 8005252:	601c      	str	r4, [r3, #0]
 8005254:	e73a      	b.n	80050cc <__gethex+0xf8>
 8005256:	1e71      	subs	r1, r6, #1
 8005258:	4620      	mov	r0, r4
 800525a:	f000 fede 	bl	800601a <__any_on>
 800525e:	2800      	cmp	r0, #0
 8005260:	d1ed      	bne.n	800523e <__gethex+0x26a>
 8005262:	9801      	ldr	r0, [sp, #4]
 8005264:	4621      	mov	r1, r4
 8005266:	f000 fa87 	bl	8005778 <_Bfree>
 800526a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800526c:	2300      	movs	r3, #0
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	2550      	movs	r5, #80	@ 0x50
 8005272:	e72b      	b.n	80050cc <__gethex+0xf8>
 8005274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f3      	bne.n	8005262 <__gethex+0x28e>
 800527a:	e7e0      	b.n	800523e <__gethex+0x26a>
 800527c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1dd      	bne.n	800523e <__gethex+0x26a>
 8005282:	e7ee      	b.n	8005262 <__gethex+0x28e>
 8005284:	08006b60 	.word	0x08006b60
 8005288:	08006bc8 	.word	0x08006bc8
 800528c:	08006bd9 	.word	0x08006bd9
 8005290:	1e6f      	subs	r7, r5, #1
 8005292:	f1b9 0f00 	cmp.w	r9, #0
 8005296:	d130      	bne.n	80052fa <__gethex+0x326>
 8005298:	b127      	cbz	r7, 80052a4 <__gethex+0x2d0>
 800529a:	4639      	mov	r1, r7
 800529c:	4620      	mov	r0, r4
 800529e:	f000 febc 	bl	800601a <__any_on>
 80052a2:	4681      	mov	r9, r0
 80052a4:	117a      	asrs	r2, r7, #5
 80052a6:	2301      	movs	r3, #1
 80052a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80052ac:	f007 071f 	and.w	r7, r7, #31
 80052b0:	40bb      	lsls	r3, r7
 80052b2:	4213      	tst	r3, r2
 80052b4:	4629      	mov	r1, r5
 80052b6:	4620      	mov	r0, r4
 80052b8:	bf18      	it	ne
 80052ba:	f049 0902 	orrne.w	r9, r9, #2
 80052be:	f7ff fe21 	bl	8004f04 <rshift>
 80052c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80052c6:	1b76      	subs	r6, r6, r5
 80052c8:	2502      	movs	r5, #2
 80052ca:	f1b9 0f00 	cmp.w	r9, #0
 80052ce:	d047      	beq.n	8005360 <__gethex+0x38c>
 80052d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d015      	beq.n	8005304 <__gethex+0x330>
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d017      	beq.n	800530c <__gethex+0x338>
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d109      	bne.n	80052f4 <__gethex+0x320>
 80052e0:	f019 0f02 	tst.w	r9, #2
 80052e4:	d006      	beq.n	80052f4 <__gethex+0x320>
 80052e6:	f8da 3000 	ldr.w	r3, [sl]
 80052ea:	ea49 0903 	orr.w	r9, r9, r3
 80052ee:	f019 0f01 	tst.w	r9, #1
 80052f2:	d10e      	bne.n	8005312 <__gethex+0x33e>
 80052f4:	f045 0510 	orr.w	r5, r5, #16
 80052f8:	e032      	b.n	8005360 <__gethex+0x38c>
 80052fa:	f04f 0901 	mov.w	r9, #1
 80052fe:	e7d1      	b.n	80052a4 <__gethex+0x2d0>
 8005300:	2501      	movs	r5, #1
 8005302:	e7e2      	b.n	80052ca <__gethex+0x2f6>
 8005304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005306:	f1c3 0301 	rsb	r3, r3, #1
 800530a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800530c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <__gethex+0x320>
 8005312:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005316:	f104 0314 	add.w	r3, r4, #20
 800531a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800531e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005322:	f04f 0c00 	mov.w	ip, #0
 8005326:	4618      	mov	r0, r3
 8005328:	f853 2b04 	ldr.w	r2, [r3], #4
 800532c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005330:	d01b      	beq.n	800536a <__gethex+0x396>
 8005332:	3201      	adds	r2, #1
 8005334:	6002      	str	r2, [r0, #0]
 8005336:	2d02      	cmp	r5, #2
 8005338:	f104 0314 	add.w	r3, r4, #20
 800533c:	d13c      	bne.n	80053b8 <__gethex+0x3e4>
 800533e:	f8d8 2000 	ldr.w	r2, [r8]
 8005342:	3a01      	subs	r2, #1
 8005344:	42b2      	cmp	r2, r6
 8005346:	d109      	bne.n	800535c <__gethex+0x388>
 8005348:	1171      	asrs	r1, r6, #5
 800534a:	2201      	movs	r2, #1
 800534c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005350:	f006 061f 	and.w	r6, r6, #31
 8005354:	fa02 f606 	lsl.w	r6, r2, r6
 8005358:	421e      	tst	r6, r3
 800535a:	d13a      	bne.n	80053d2 <__gethex+0x3fe>
 800535c:	f045 0520 	orr.w	r5, r5, #32
 8005360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005362:	601c      	str	r4, [r3, #0]
 8005364:	9b02      	ldr	r3, [sp, #8]
 8005366:	601f      	str	r7, [r3, #0]
 8005368:	e6b0      	b.n	80050cc <__gethex+0xf8>
 800536a:	4299      	cmp	r1, r3
 800536c:	f843 cc04 	str.w	ip, [r3, #-4]
 8005370:	d8d9      	bhi.n	8005326 <__gethex+0x352>
 8005372:	68a3      	ldr	r3, [r4, #8]
 8005374:	459b      	cmp	fp, r3
 8005376:	db17      	blt.n	80053a8 <__gethex+0x3d4>
 8005378:	6861      	ldr	r1, [r4, #4]
 800537a:	9801      	ldr	r0, [sp, #4]
 800537c:	3101      	adds	r1, #1
 800537e:	f000 f9bb 	bl	80056f8 <_Balloc>
 8005382:	4681      	mov	r9, r0
 8005384:	b918      	cbnz	r0, 800538e <__gethex+0x3ba>
 8005386:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <__gethex+0x41c>)
 8005388:	4602      	mov	r2, r0
 800538a:	2184      	movs	r1, #132	@ 0x84
 800538c:	e6c5      	b.n	800511a <__gethex+0x146>
 800538e:	6922      	ldr	r2, [r4, #16]
 8005390:	3202      	adds	r2, #2
 8005392:	f104 010c 	add.w	r1, r4, #12
 8005396:	0092      	lsls	r2, r2, #2
 8005398:	300c      	adds	r0, #12
 800539a:	f7ff fd50 	bl	8004e3e <memcpy>
 800539e:	4621      	mov	r1, r4
 80053a0:	9801      	ldr	r0, [sp, #4]
 80053a2:	f000 f9e9 	bl	8005778 <_Bfree>
 80053a6:	464c      	mov	r4, r9
 80053a8:	6923      	ldr	r3, [r4, #16]
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80053b0:	6122      	str	r2, [r4, #16]
 80053b2:	2201      	movs	r2, #1
 80053b4:	615a      	str	r2, [r3, #20]
 80053b6:	e7be      	b.n	8005336 <__gethex+0x362>
 80053b8:	6922      	ldr	r2, [r4, #16]
 80053ba:	455a      	cmp	r2, fp
 80053bc:	dd0b      	ble.n	80053d6 <__gethex+0x402>
 80053be:	2101      	movs	r1, #1
 80053c0:	4620      	mov	r0, r4
 80053c2:	f7ff fd9f 	bl	8004f04 <rshift>
 80053c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80053ca:	3701      	adds	r7, #1
 80053cc:	42bb      	cmp	r3, r7
 80053ce:	f6ff aee0 	blt.w	8005192 <__gethex+0x1be>
 80053d2:	2501      	movs	r5, #1
 80053d4:	e7c2      	b.n	800535c <__gethex+0x388>
 80053d6:	f016 061f 	ands.w	r6, r6, #31
 80053da:	d0fa      	beq.n	80053d2 <__gethex+0x3fe>
 80053dc:	4453      	add	r3, sl
 80053de:	f1c6 0620 	rsb	r6, r6, #32
 80053e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80053e6:	f000 fa79 	bl	80058dc <__hi0bits>
 80053ea:	42b0      	cmp	r0, r6
 80053ec:	dbe7      	blt.n	80053be <__gethex+0x3ea>
 80053ee:	e7f0      	b.n	80053d2 <__gethex+0x3fe>
 80053f0:	08006bc8 	.word	0x08006bc8

080053f4 <L_shift>:
 80053f4:	f1c2 0208 	rsb	r2, r2, #8
 80053f8:	0092      	lsls	r2, r2, #2
 80053fa:	b570      	push	{r4, r5, r6, lr}
 80053fc:	f1c2 0620 	rsb	r6, r2, #32
 8005400:	6843      	ldr	r3, [r0, #4]
 8005402:	6804      	ldr	r4, [r0, #0]
 8005404:	fa03 f506 	lsl.w	r5, r3, r6
 8005408:	432c      	orrs	r4, r5
 800540a:	40d3      	lsrs	r3, r2
 800540c:	6004      	str	r4, [r0, #0]
 800540e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005412:	4288      	cmp	r0, r1
 8005414:	d3f4      	bcc.n	8005400 <L_shift+0xc>
 8005416:	bd70      	pop	{r4, r5, r6, pc}

08005418 <__match>:
 8005418:	b530      	push	{r4, r5, lr}
 800541a:	6803      	ldr	r3, [r0, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005422:	b914      	cbnz	r4, 800542a <__match+0x12>
 8005424:	6003      	str	r3, [r0, #0]
 8005426:	2001      	movs	r0, #1
 8005428:	bd30      	pop	{r4, r5, pc}
 800542a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800542e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8005432:	2d19      	cmp	r5, #25
 8005434:	bf98      	it	ls
 8005436:	3220      	addls	r2, #32
 8005438:	42a2      	cmp	r2, r4
 800543a:	d0f0      	beq.n	800541e <__match+0x6>
 800543c:	2000      	movs	r0, #0
 800543e:	e7f3      	b.n	8005428 <__match+0x10>

08005440 <__hexnan>:
 8005440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	680b      	ldr	r3, [r1, #0]
 8005446:	6801      	ldr	r1, [r0, #0]
 8005448:	115e      	asrs	r6, r3, #5
 800544a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800544e:	f013 031f 	ands.w	r3, r3, #31
 8005452:	b087      	sub	sp, #28
 8005454:	bf18      	it	ne
 8005456:	3604      	addne	r6, #4
 8005458:	2500      	movs	r5, #0
 800545a:	1f37      	subs	r7, r6, #4
 800545c:	4682      	mov	sl, r0
 800545e:	4690      	mov	r8, r2
 8005460:	9301      	str	r3, [sp, #4]
 8005462:	f846 5c04 	str.w	r5, [r6, #-4]
 8005466:	46b9      	mov	r9, r7
 8005468:	463c      	mov	r4, r7
 800546a:	9502      	str	r5, [sp, #8]
 800546c:	46ab      	mov	fp, r5
 800546e:	784a      	ldrb	r2, [r1, #1]
 8005470:	1c4b      	adds	r3, r1, #1
 8005472:	9303      	str	r3, [sp, #12]
 8005474:	b342      	cbz	r2, 80054c8 <__hexnan+0x88>
 8005476:	4610      	mov	r0, r2
 8005478:	9105      	str	r1, [sp, #20]
 800547a:	9204      	str	r2, [sp, #16]
 800547c:	f7ff fd94 	bl	8004fa8 <__hexdig_fun>
 8005480:	2800      	cmp	r0, #0
 8005482:	d151      	bne.n	8005528 <__hexnan+0xe8>
 8005484:	9a04      	ldr	r2, [sp, #16]
 8005486:	9905      	ldr	r1, [sp, #20]
 8005488:	2a20      	cmp	r2, #32
 800548a:	d818      	bhi.n	80054be <__hexnan+0x7e>
 800548c:	9b02      	ldr	r3, [sp, #8]
 800548e:	459b      	cmp	fp, r3
 8005490:	dd13      	ble.n	80054ba <__hexnan+0x7a>
 8005492:	454c      	cmp	r4, r9
 8005494:	d206      	bcs.n	80054a4 <__hexnan+0x64>
 8005496:	2d07      	cmp	r5, #7
 8005498:	dc04      	bgt.n	80054a4 <__hexnan+0x64>
 800549a:	462a      	mov	r2, r5
 800549c:	4649      	mov	r1, r9
 800549e:	4620      	mov	r0, r4
 80054a0:	f7ff ffa8 	bl	80053f4 <L_shift>
 80054a4:	4544      	cmp	r4, r8
 80054a6:	d952      	bls.n	800554e <__hexnan+0x10e>
 80054a8:	2300      	movs	r3, #0
 80054aa:	f1a4 0904 	sub.w	r9, r4, #4
 80054ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80054b2:	f8cd b008 	str.w	fp, [sp, #8]
 80054b6:	464c      	mov	r4, r9
 80054b8:	461d      	mov	r5, r3
 80054ba:	9903      	ldr	r1, [sp, #12]
 80054bc:	e7d7      	b.n	800546e <__hexnan+0x2e>
 80054be:	2a29      	cmp	r2, #41	@ 0x29
 80054c0:	d157      	bne.n	8005572 <__hexnan+0x132>
 80054c2:	3102      	adds	r1, #2
 80054c4:	f8ca 1000 	str.w	r1, [sl]
 80054c8:	f1bb 0f00 	cmp.w	fp, #0
 80054cc:	d051      	beq.n	8005572 <__hexnan+0x132>
 80054ce:	454c      	cmp	r4, r9
 80054d0:	d206      	bcs.n	80054e0 <__hexnan+0xa0>
 80054d2:	2d07      	cmp	r5, #7
 80054d4:	dc04      	bgt.n	80054e0 <__hexnan+0xa0>
 80054d6:	462a      	mov	r2, r5
 80054d8:	4649      	mov	r1, r9
 80054da:	4620      	mov	r0, r4
 80054dc:	f7ff ff8a 	bl	80053f4 <L_shift>
 80054e0:	4544      	cmp	r4, r8
 80054e2:	d936      	bls.n	8005552 <__hexnan+0x112>
 80054e4:	f1a8 0204 	sub.w	r2, r8, #4
 80054e8:	4623      	mov	r3, r4
 80054ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80054ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80054f2:	429f      	cmp	r7, r3
 80054f4:	d2f9      	bcs.n	80054ea <__hexnan+0xaa>
 80054f6:	1b3b      	subs	r3, r7, r4
 80054f8:	f023 0303 	bic.w	r3, r3, #3
 80054fc:	3304      	adds	r3, #4
 80054fe:	3401      	adds	r4, #1
 8005500:	3e03      	subs	r6, #3
 8005502:	42b4      	cmp	r4, r6
 8005504:	bf88      	it	hi
 8005506:	2304      	movhi	r3, #4
 8005508:	4443      	add	r3, r8
 800550a:	2200      	movs	r2, #0
 800550c:	f843 2b04 	str.w	r2, [r3], #4
 8005510:	429f      	cmp	r7, r3
 8005512:	d2fb      	bcs.n	800550c <__hexnan+0xcc>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	b91b      	cbnz	r3, 8005520 <__hexnan+0xe0>
 8005518:	4547      	cmp	r7, r8
 800551a:	d128      	bne.n	800556e <__hexnan+0x12e>
 800551c:	2301      	movs	r3, #1
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	2005      	movs	r0, #5
 8005522:	b007      	add	sp, #28
 8005524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005528:	3501      	adds	r5, #1
 800552a:	2d08      	cmp	r5, #8
 800552c:	f10b 0b01 	add.w	fp, fp, #1
 8005530:	dd06      	ble.n	8005540 <__hexnan+0x100>
 8005532:	4544      	cmp	r4, r8
 8005534:	d9c1      	bls.n	80054ba <__hexnan+0x7a>
 8005536:	2300      	movs	r3, #0
 8005538:	f844 3c04 	str.w	r3, [r4, #-4]
 800553c:	2501      	movs	r5, #1
 800553e:	3c04      	subs	r4, #4
 8005540:	6822      	ldr	r2, [r4, #0]
 8005542:	f000 000f 	and.w	r0, r0, #15
 8005546:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800554a:	6020      	str	r0, [r4, #0]
 800554c:	e7b5      	b.n	80054ba <__hexnan+0x7a>
 800554e:	2508      	movs	r5, #8
 8005550:	e7b3      	b.n	80054ba <__hexnan+0x7a>
 8005552:	9b01      	ldr	r3, [sp, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0dd      	beq.n	8005514 <__hexnan+0xd4>
 8005558:	f1c3 0320 	rsb	r3, r3, #32
 800555c:	f04f 32ff 	mov.w	r2, #4294967295
 8005560:	40da      	lsrs	r2, r3
 8005562:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005566:	4013      	ands	r3, r2
 8005568:	f846 3c04 	str.w	r3, [r6, #-4]
 800556c:	e7d2      	b.n	8005514 <__hexnan+0xd4>
 800556e:	3f04      	subs	r7, #4
 8005570:	e7d0      	b.n	8005514 <__hexnan+0xd4>
 8005572:	2004      	movs	r0, #4
 8005574:	e7d5      	b.n	8005522 <__hexnan+0xe2>
	...

08005578 <sbrk_aligned>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	4e0f      	ldr	r6, [pc, #60]	@ (80055b8 <sbrk_aligned+0x40>)
 800557c:	460c      	mov	r4, r1
 800557e:	6831      	ldr	r1, [r6, #0]
 8005580:	4605      	mov	r5, r0
 8005582:	b911      	cbnz	r1, 800558a <sbrk_aligned+0x12>
 8005584:	f000 fe24 	bl	80061d0 <_sbrk_r>
 8005588:	6030      	str	r0, [r6, #0]
 800558a:	4621      	mov	r1, r4
 800558c:	4628      	mov	r0, r5
 800558e:	f000 fe1f 	bl	80061d0 <_sbrk_r>
 8005592:	1c43      	adds	r3, r0, #1
 8005594:	d103      	bne.n	800559e <sbrk_aligned+0x26>
 8005596:	f04f 34ff 	mov.w	r4, #4294967295
 800559a:	4620      	mov	r0, r4
 800559c:	bd70      	pop	{r4, r5, r6, pc}
 800559e:	1cc4      	adds	r4, r0, #3
 80055a0:	f024 0403 	bic.w	r4, r4, #3
 80055a4:	42a0      	cmp	r0, r4
 80055a6:	d0f8      	beq.n	800559a <sbrk_aligned+0x22>
 80055a8:	1a21      	subs	r1, r4, r0
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 fe10 	bl	80061d0 <_sbrk_r>
 80055b0:	3001      	adds	r0, #1
 80055b2:	d1f2      	bne.n	800559a <sbrk_aligned+0x22>
 80055b4:	e7ef      	b.n	8005596 <sbrk_aligned+0x1e>
 80055b6:	bf00      	nop
 80055b8:	200004c0 	.word	0x200004c0

080055bc <_malloc_r>:
 80055bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c0:	1ccd      	adds	r5, r1, #3
 80055c2:	f025 0503 	bic.w	r5, r5, #3
 80055c6:	3508      	adds	r5, #8
 80055c8:	2d0c      	cmp	r5, #12
 80055ca:	bf38      	it	cc
 80055cc:	250c      	movcc	r5, #12
 80055ce:	2d00      	cmp	r5, #0
 80055d0:	4606      	mov	r6, r0
 80055d2:	db01      	blt.n	80055d8 <_malloc_r+0x1c>
 80055d4:	42a9      	cmp	r1, r5
 80055d6:	d904      	bls.n	80055e2 <_malloc_r+0x26>
 80055d8:	230c      	movs	r3, #12
 80055da:	6033      	str	r3, [r6, #0]
 80055dc:	2000      	movs	r0, #0
 80055de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056b8 <_malloc_r+0xfc>
 80055e6:	f000 f87b 	bl	80056e0 <__malloc_lock>
 80055ea:	f8d8 3000 	ldr.w	r3, [r8]
 80055ee:	461c      	mov	r4, r3
 80055f0:	bb44      	cbnz	r4, 8005644 <_malloc_r+0x88>
 80055f2:	4629      	mov	r1, r5
 80055f4:	4630      	mov	r0, r6
 80055f6:	f7ff ffbf 	bl	8005578 <sbrk_aligned>
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	4604      	mov	r4, r0
 80055fe:	d158      	bne.n	80056b2 <_malloc_r+0xf6>
 8005600:	f8d8 4000 	ldr.w	r4, [r8]
 8005604:	4627      	mov	r7, r4
 8005606:	2f00      	cmp	r7, #0
 8005608:	d143      	bne.n	8005692 <_malloc_r+0xd6>
 800560a:	2c00      	cmp	r4, #0
 800560c:	d04b      	beq.n	80056a6 <_malloc_r+0xea>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	4639      	mov	r1, r7
 8005612:	4630      	mov	r0, r6
 8005614:	eb04 0903 	add.w	r9, r4, r3
 8005618:	f000 fdda 	bl	80061d0 <_sbrk_r>
 800561c:	4581      	cmp	r9, r0
 800561e:	d142      	bne.n	80056a6 <_malloc_r+0xea>
 8005620:	6821      	ldr	r1, [r4, #0]
 8005622:	1a6d      	subs	r5, r5, r1
 8005624:	4629      	mov	r1, r5
 8005626:	4630      	mov	r0, r6
 8005628:	f7ff ffa6 	bl	8005578 <sbrk_aligned>
 800562c:	3001      	adds	r0, #1
 800562e:	d03a      	beq.n	80056a6 <_malloc_r+0xea>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	442b      	add	r3, r5
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	f8d8 3000 	ldr.w	r3, [r8]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	bb62      	cbnz	r2, 8005698 <_malloc_r+0xdc>
 800563e:	f8c8 7000 	str.w	r7, [r8]
 8005642:	e00f      	b.n	8005664 <_malloc_r+0xa8>
 8005644:	6822      	ldr	r2, [r4, #0]
 8005646:	1b52      	subs	r2, r2, r5
 8005648:	d420      	bmi.n	800568c <_malloc_r+0xd0>
 800564a:	2a0b      	cmp	r2, #11
 800564c:	d917      	bls.n	800567e <_malloc_r+0xc2>
 800564e:	1961      	adds	r1, r4, r5
 8005650:	42a3      	cmp	r3, r4
 8005652:	6025      	str	r5, [r4, #0]
 8005654:	bf18      	it	ne
 8005656:	6059      	strne	r1, [r3, #4]
 8005658:	6863      	ldr	r3, [r4, #4]
 800565a:	bf08      	it	eq
 800565c:	f8c8 1000 	streq.w	r1, [r8]
 8005660:	5162      	str	r2, [r4, r5]
 8005662:	604b      	str	r3, [r1, #4]
 8005664:	4630      	mov	r0, r6
 8005666:	f000 f841 	bl	80056ec <__malloc_unlock>
 800566a:	f104 000b 	add.w	r0, r4, #11
 800566e:	1d23      	adds	r3, r4, #4
 8005670:	f020 0007 	bic.w	r0, r0, #7
 8005674:	1ac2      	subs	r2, r0, r3
 8005676:	bf1c      	itt	ne
 8005678:	1a1b      	subne	r3, r3, r0
 800567a:	50a3      	strne	r3, [r4, r2]
 800567c:	e7af      	b.n	80055de <_malloc_r+0x22>
 800567e:	6862      	ldr	r2, [r4, #4]
 8005680:	42a3      	cmp	r3, r4
 8005682:	bf0c      	ite	eq
 8005684:	f8c8 2000 	streq.w	r2, [r8]
 8005688:	605a      	strne	r2, [r3, #4]
 800568a:	e7eb      	b.n	8005664 <_malloc_r+0xa8>
 800568c:	4623      	mov	r3, r4
 800568e:	6864      	ldr	r4, [r4, #4]
 8005690:	e7ae      	b.n	80055f0 <_malloc_r+0x34>
 8005692:	463c      	mov	r4, r7
 8005694:	687f      	ldr	r7, [r7, #4]
 8005696:	e7b6      	b.n	8005606 <_malloc_r+0x4a>
 8005698:	461a      	mov	r2, r3
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	42a3      	cmp	r3, r4
 800569e:	d1fb      	bne.n	8005698 <_malloc_r+0xdc>
 80056a0:	2300      	movs	r3, #0
 80056a2:	6053      	str	r3, [r2, #4]
 80056a4:	e7de      	b.n	8005664 <_malloc_r+0xa8>
 80056a6:	230c      	movs	r3, #12
 80056a8:	6033      	str	r3, [r6, #0]
 80056aa:	4630      	mov	r0, r6
 80056ac:	f000 f81e 	bl	80056ec <__malloc_unlock>
 80056b0:	e794      	b.n	80055dc <_malloc_r+0x20>
 80056b2:	6005      	str	r5, [r0, #0]
 80056b4:	e7d6      	b.n	8005664 <_malloc_r+0xa8>
 80056b6:	bf00      	nop
 80056b8:	200004c4 	.word	0x200004c4

080056bc <__ascii_mbtowc>:
 80056bc:	b082      	sub	sp, #8
 80056be:	b901      	cbnz	r1, 80056c2 <__ascii_mbtowc+0x6>
 80056c0:	a901      	add	r1, sp, #4
 80056c2:	b142      	cbz	r2, 80056d6 <__ascii_mbtowc+0x1a>
 80056c4:	b14b      	cbz	r3, 80056da <__ascii_mbtowc+0x1e>
 80056c6:	7813      	ldrb	r3, [r2, #0]
 80056c8:	600b      	str	r3, [r1, #0]
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	1e10      	subs	r0, r2, #0
 80056ce:	bf18      	it	ne
 80056d0:	2001      	movne	r0, #1
 80056d2:	b002      	add	sp, #8
 80056d4:	4770      	bx	lr
 80056d6:	4610      	mov	r0, r2
 80056d8:	e7fb      	b.n	80056d2 <__ascii_mbtowc+0x16>
 80056da:	f06f 0001 	mvn.w	r0, #1
 80056de:	e7f8      	b.n	80056d2 <__ascii_mbtowc+0x16>

080056e0 <__malloc_lock>:
 80056e0:	4801      	ldr	r0, [pc, #4]	@ (80056e8 <__malloc_lock+0x8>)
 80056e2:	f7ff bbaa 	b.w	8004e3a <__retarget_lock_acquire_recursive>
 80056e6:	bf00      	nop
 80056e8:	200004bc 	.word	0x200004bc

080056ec <__malloc_unlock>:
 80056ec:	4801      	ldr	r0, [pc, #4]	@ (80056f4 <__malloc_unlock+0x8>)
 80056ee:	f7ff bba5 	b.w	8004e3c <__retarget_lock_release_recursive>
 80056f2:	bf00      	nop
 80056f4:	200004bc 	.word	0x200004bc

080056f8 <_Balloc>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	69c6      	ldr	r6, [r0, #28]
 80056fc:	4604      	mov	r4, r0
 80056fe:	460d      	mov	r5, r1
 8005700:	b976      	cbnz	r6, 8005720 <_Balloc+0x28>
 8005702:	2010      	movs	r0, #16
 8005704:	f000 fda6 	bl	8006254 <malloc>
 8005708:	4602      	mov	r2, r0
 800570a:	61e0      	str	r0, [r4, #28]
 800570c:	b920      	cbnz	r0, 8005718 <_Balloc+0x20>
 800570e:	4b18      	ldr	r3, [pc, #96]	@ (8005770 <_Balloc+0x78>)
 8005710:	4818      	ldr	r0, [pc, #96]	@ (8005774 <_Balloc+0x7c>)
 8005712:	216b      	movs	r1, #107	@ 0x6b
 8005714:	f000 fd6c 	bl	80061f0 <__assert_func>
 8005718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800571c:	6006      	str	r6, [r0, #0]
 800571e:	60c6      	str	r6, [r0, #12]
 8005720:	69e6      	ldr	r6, [r4, #28]
 8005722:	68f3      	ldr	r3, [r6, #12]
 8005724:	b183      	cbz	r3, 8005748 <_Balloc+0x50>
 8005726:	69e3      	ldr	r3, [r4, #28]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800572e:	b9b8      	cbnz	r0, 8005760 <_Balloc+0x68>
 8005730:	2101      	movs	r1, #1
 8005732:	fa01 f605 	lsl.w	r6, r1, r5
 8005736:	1d72      	adds	r2, r6, #5
 8005738:	0092      	lsls	r2, r2, #2
 800573a:	4620      	mov	r0, r4
 800573c:	f000 fd76 	bl	800622c <_calloc_r>
 8005740:	b160      	cbz	r0, 800575c <_Balloc+0x64>
 8005742:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005746:	e00e      	b.n	8005766 <_Balloc+0x6e>
 8005748:	2221      	movs	r2, #33	@ 0x21
 800574a:	2104      	movs	r1, #4
 800574c:	4620      	mov	r0, r4
 800574e:	f000 fd6d 	bl	800622c <_calloc_r>
 8005752:	69e3      	ldr	r3, [r4, #28]
 8005754:	60f0      	str	r0, [r6, #12]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e4      	bne.n	8005726 <_Balloc+0x2e>
 800575c:	2000      	movs	r0, #0
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	6802      	ldr	r2, [r0, #0]
 8005762:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005766:	2300      	movs	r3, #0
 8005768:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800576c:	e7f7      	b.n	800575e <_Balloc+0x66>
 800576e:	bf00      	nop
 8005770:	08006c39 	.word	0x08006c39
 8005774:	08006c50 	.word	0x08006c50

08005778 <_Bfree>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	69c6      	ldr	r6, [r0, #28]
 800577c:	4605      	mov	r5, r0
 800577e:	460c      	mov	r4, r1
 8005780:	b976      	cbnz	r6, 80057a0 <_Bfree+0x28>
 8005782:	2010      	movs	r0, #16
 8005784:	f000 fd66 	bl	8006254 <malloc>
 8005788:	4602      	mov	r2, r0
 800578a:	61e8      	str	r0, [r5, #28]
 800578c:	b920      	cbnz	r0, 8005798 <_Bfree+0x20>
 800578e:	4b09      	ldr	r3, [pc, #36]	@ (80057b4 <_Bfree+0x3c>)
 8005790:	4809      	ldr	r0, [pc, #36]	@ (80057b8 <_Bfree+0x40>)
 8005792:	218f      	movs	r1, #143	@ 0x8f
 8005794:	f000 fd2c 	bl	80061f0 <__assert_func>
 8005798:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800579c:	6006      	str	r6, [r0, #0]
 800579e:	60c6      	str	r6, [r0, #12]
 80057a0:	b13c      	cbz	r4, 80057b2 <_Bfree+0x3a>
 80057a2:	69eb      	ldr	r3, [r5, #28]
 80057a4:	6862      	ldr	r2, [r4, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057ac:	6021      	str	r1, [r4, #0]
 80057ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	08006c39 	.word	0x08006c39
 80057b8:	08006c50 	.word	0x08006c50

080057bc <__multadd>:
 80057bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c0:	690d      	ldr	r5, [r1, #16]
 80057c2:	4607      	mov	r7, r0
 80057c4:	460c      	mov	r4, r1
 80057c6:	461e      	mov	r6, r3
 80057c8:	f101 0c14 	add.w	ip, r1, #20
 80057cc:	2000      	movs	r0, #0
 80057ce:	f8dc 3000 	ldr.w	r3, [ip]
 80057d2:	b299      	uxth	r1, r3
 80057d4:	fb02 6101 	mla	r1, r2, r1, r6
 80057d8:	0c1e      	lsrs	r6, r3, #16
 80057da:	0c0b      	lsrs	r3, r1, #16
 80057dc:	fb02 3306 	mla	r3, r2, r6, r3
 80057e0:	b289      	uxth	r1, r1
 80057e2:	3001      	adds	r0, #1
 80057e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80057e8:	4285      	cmp	r5, r0
 80057ea:	f84c 1b04 	str.w	r1, [ip], #4
 80057ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80057f2:	dcec      	bgt.n	80057ce <__multadd+0x12>
 80057f4:	b30e      	cbz	r6, 800583a <__multadd+0x7e>
 80057f6:	68a3      	ldr	r3, [r4, #8]
 80057f8:	42ab      	cmp	r3, r5
 80057fa:	dc19      	bgt.n	8005830 <__multadd+0x74>
 80057fc:	6861      	ldr	r1, [r4, #4]
 80057fe:	4638      	mov	r0, r7
 8005800:	3101      	adds	r1, #1
 8005802:	f7ff ff79 	bl	80056f8 <_Balloc>
 8005806:	4680      	mov	r8, r0
 8005808:	b928      	cbnz	r0, 8005816 <__multadd+0x5a>
 800580a:	4602      	mov	r2, r0
 800580c:	4b0c      	ldr	r3, [pc, #48]	@ (8005840 <__multadd+0x84>)
 800580e:	480d      	ldr	r0, [pc, #52]	@ (8005844 <__multadd+0x88>)
 8005810:	21ba      	movs	r1, #186	@ 0xba
 8005812:	f000 fced 	bl	80061f0 <__assert_func>
 8005816:	6922      	ldr	r2, [r4, #16]
 8005818:	3202      	adds	r2, #2
 800581a:	f104 010c 	add.w	r1, r4, #12
 800581e:	0092      	lsls	r2, r2, #2
 8005820:	300c      	adds	r0, #12
 8005822:	f7ff fb0c 	bl	8004e3e <memcpy>
 8005826:	4621      	mov	r1, r4
 8005828:	4638      	mov	r0, r7
 800582a:	f7ff ffa5 	bl	8005778 <_Bfree>
 800582e:	4644      	mov	r4, r8
 8005830:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005834:	3501      	adds	r5, #1
 8005836:	615e      	str	r6, [r3, #20]
 8005838:	6125      	str	r5, [r4, #16]
 800583a:	4620      	mov	r0, r4
 800583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005840:	08006bc8 	.word	0x08006bc8
 8005844:	08006c50 	.word	0x08006c50

08005848 <__s2b>:
 8005848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800584c:	460c      	mov	r4, r1
 800584e:	4615      	mov	r5, r2
 8005850:	461f      	mov	r7, r3
 8005852:	2209      	movs	r2, #9
 8005854:	3308      	adds	r3, #8
 8005856:	4606      	mov	r6, r0
 8005858:	fb93 f3f2 	sdiv	r3, r3, r2
 800585c:	2100      	movs	r1, #0
 800585e:	2201      	movs	r2, #1
 8005860:	429a      	cmp	r2, r3
 8005862:	db09      	blt.n	8005878 <__s2b+0x30>
 8005864:	4630      	mov	r0, r6
 8005866:	f7ff ff47 	bl	80056f8 <_Balloc>
 800586a:	b940      	cbnz	r0, 800587e <__s2b+0x36>
 800586c:	4602      	mov	r2, r0
 800586e:	4b19      	ldr	r3, [pc, #100]	@ (80058d4 <__s2b+0x8c>)
 8005870:	4819      	ldr	r0, [pc, #100]	@ (80058d8 <__s2b+0x90>)
 8005872:	21d3      	movs	r1, #211	@ 0xd3
 8005874:	f000 fcbc 	bl	80061f0 <__assert_func>
 8005878:	0052      	lsls	r2, r2, #1
 800587a:	3101      	adds	r1, #1
 800587c:	e7f0      	b.n	8005860 <__s2b+0x18>
 800587e:	9b08      	ldr	r3, [sp, #32]
 8005880:	6143      	str	r3, [r0, #20]
 8005882:	2d09      	cmp	r5, #9
 8005884:	f04f 0301 	mov.w	r3, #1
 8005888:	6103      	str	r3, [r0, #16]
 800588a:	dd16      	ble.n	80058ba <__s2b+0x72>
 800588c:	f104 0909 	add.w	r9, r4, #9
 8005890:	46c8      	mov	r8, r9
 8005892:	442c      	add	r4, r5
 8005894:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005898:	4601      	mov	r1, r0
 800589a:	3b30      	subs	r3, #48	@ 0x30
 800589c:	220a      	movs	r2, #10
 800589e:	4630      	mov	r0, r6
 80058a0:	f7ff ff8c 	bl	80057bc <__multadd>
 80058a4:	45a0      	cmp	r8, r4
 80058a6:	d1f5      	bne.n	8005894 <__s2b+0x4c>
 80058a8:	f1a5 0408 	sub.w	r4, r5, #8
 80058ac:	444c      	add	r4, r9
 80058ae:	1b2d      	subs	r5, r5, r4
 80058b0:	1963      	adds	r3, r4, r5
 80058b2:	42bb      	cmp	r3, r7
 80058b4:	db04      	blt.n	80058c0 <__s2b+0x78>
 80058b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ba:	340a      	adds	r4, #10
 80058bc:	2509      	movs	r5, #9
 80058be:	e7f6      	b.n	80058ae <__s2b+0x66>
 80058c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80058c4:	4601      	mov	r1, r0
 80058c6:	3b30      	subs	r3, #48	@ 0x30
 80058c8:	220a      	movs	r2, #10
 80058ca:	4630      	mov	r0, r6
 80058cc:	f7ff ff76 	bl	80057bc <__multadd>
 80058d0:	e7ee      	b.n	80058b0 <__s2b+0x68>
 80058d2:	bf00      	nop
 80058d4:	08006bc8 	.word	0x08006bc8
 80058d8:	08006c50 	.word	0x08006c50

080058dc <__hi0bits>:
 80058dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80058e0:	4603      	mov	r3, r0
 80058e2:	bf36      	itet	cc
 80058e4:	0403      	lslcc	r3, r0, #16
 80058e6:	2000      	movcs	r0, #0
 80058e8:	2010      	movcc	r0, #16
 80058ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058ee:	bf3c      	itt	cc
 80058f0:	021b      	lslcc	r3, r3, #8
 80058f2:	3008      	addcc	r0, #8
 80058f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058f8:	bf3c      	itt	cc
 80058fa:	011b      	lslcc	r3, r3, #4
 80058fc:	3004      	addcc	r0, #4
 80058fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005902:	bf3c      	itt	cc
 8005904:	009b      	lslcc	r3, r3, #2
 8005906:	3002      	addcc	r0, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	db05      	blt.n	8005918 <__hi0bits+0x3c>
 800590c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005910:	f100 0001 	add.w	r0, r0, #1
 8005914:	bf08      	it	eq
 8005916:	2020      	moveq	r0, #32
 8005918:	4770      	bx	lr

0800591a <__lo0bits>:
 800591a:	6803      	ldr	r3, [r0, #0]
 800591c:	4602      	mov	r2, r0
 800591e:	f013 0007 	ands.w	r0, r3, #7
 8005922:	d00b      	beq.n	800593c <__lo0bits+0x22>
 8005924:	07d9      	lsls	r1, r3, #31
 8005926:	d421      	bmi.n	800596c <__lo0bits+0x52>
 8005928:	0798      	lsls	r0, r3, #30
 800592a:	bf49      	itett	mi
 800592c:	085b      	lsrmi	r3, r3, #1
 800592e:	089b      	lsrpl	r3, r3, #2
 8005930:	2001      	movmi	r0, #1
 8005932:	6013      	strmi	r3, [r2, #0]
 8005934:	bf5c      	itt	pl
 8005936:	6013      	strpl	r3, [r2, #0]
 8005938:	2002      	movpl	r0, #2
 800593a:	4770      	bx	lr
 800593c:	b299      	uxth	r1, r3
 800593e:	b909      	cbnz	r1, 8005944 <__lo0bits+0x2a>
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	2010      	movs	r0, #16
 8005944:	b2d9      	uxtb	r1, r3
 8005946:	b909      	cbnz	r1, 800594c <__lo0bits+0x32>
 8005948:	3008      	adds	r0, #8
 800594a:	0a1b      	lsrs	r3, r3, #8
 800594c:	0719      	lsls	r1, r3, #28
 800594e:	bf04      	itt	eq
 8005950:	091b      	lsreq	r3, r3, #4
 8005952:	3004      	addeq	r0, #4
 8005954:	0799      	lsls	r1, r3, #30
 8005956:	bf04      	itt	eq
 8005958:	089b      	lsreq	r3, r3, #2
 800595a:	3002      	addeq	r0, #2
 800595c:	07d9      	lsls	r1, r3, #31
 800595e:	d403      	bmi.n	8005968 <__lo0bits+0x4e>
 8005960:	085b      	lsrs	r3, r3, #1
 8005962:	f100 0001 	add.w	r0, r0, #1
 8005966:	d003      	beq.n	8005970 <__lo0bits+0x56>
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	4770      	bx	lr
 800596c:	2000      	movs	r0, #0
 800596e:	4770      	bx	lr
 8005970:	2020      	movs	r0, #32
 8005972:	4770      	bx	lr

08005974 <__i2b>:
 8005974:	b510      	push	{r4, lr}
 8005976:	460c      	mov	r4, r1
 8005978:	2101      	movs	r1, #1
 800597a:	f7ff febd 	bl	80056f8 <_Balloc>
 800597e:	4602      	mov	r2, r0
 8005980:	b928      	cbnz	r0, 800598e <__i2b+0x1a>
 8005982:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <__i2b+0x24>)
 8005984:	4805      	ldr	r0, [pc, #20]	@ (800599c <__i2b+0x28>)
 8005986:	f240 1145 	movw	r1, #325	@ 0x145
 800598a:	f000 fc31 	bl	80061f0 <__assert_func>
 800598e:	2301      	movs	r3, #1
 8005990:	6144      	str	r4, [r0, #20]
 8005992:	6103      	str	r3, [r0, #16]
 8005994:	bd10      	pop	{r4, pc}
 8005996:	bf00      	nop
 8005998:	08006bc8 	.word	0x08006bc8
 800599c:	08006c50 	.word	0x08006c50

080059a0 <__multiply>:
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	4614      	mov	r4, r2
 80059a6:	690a      	ldr	r2, [r1, #16]
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	bfa8      	it	ge
 80059ae:	4623      	movge	r3, r4
 80059b0:	460f      	mov	r7, r1
 80059b2:	bfa4      	itt	ge
 80059b4:	460c      	movge	r4, r1
 80059b6:	461f      	movge	r7, r3
 80059b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80059bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80059c0:	68a3      	ldr	r3, [r4, #8]
 80059c2:	6861      	ldr	r1, [r4, #4]
 80059c4:	eb0a 0609 	add.w	r6, sl, r9
 80059c8:	42b3      	cmp	r3, r6
 80059ca:	b085      	sub	sp, #20
 80059cc:	bfb8      	it	lt
 80059ce:	3101      	addlt	r1, #1
 80059d0:	f7ff fe92 	bl	80056f8 <_Balloc>
 80059d4:	b930      	cbnz	r0, 80059e4 <__multiply+0x44>
 80059d6:	4602      	mov	r2, r0
 80059d8:	4b44      	ldr	r3, [pc, #272]	@ (8005aec <__multiply+0x14c>)
 80059da:	4845      	ldr	r0, [pc, #276]	@ (8005af0 <__multiply+0x150>)
 80059dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80059e0:	f000 fc06 	bl	80061f0 <__assert_func>
 80059e4:	f100 0514 	add.w	r5, r0, #20
 80059e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80059ec:	462b      	mov	r3, r5
 80059ee:	2200      	movs	r2, #0
 80059f0:	4543      	cmp	r3, r8
 80059f2:	d321      	bcc.n	8005a38 <__multiply+0x98>
 80059f4:	f107 0114 	add.w	r1, r7, #20
 80059f8:	f104 0214 	add.w	r2, r4, #20
 80059fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005a00:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005a04:	9302      	str	r3, [sp, #8]
 8005a06:	1b13      	subs	r3, r2, r4
 8005a08:	3b15      	subs	r3, #21
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	3304      	adds	r3, #4
 8005a10:	f104 0715 	add.w	r7, r4, #21
 8005a14:	42ba      	cmp	r2, r7
 8005a16:	bf38      	it	cc
 8005a18:	2304      	movcc	r3, #4
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	9b02      	ldr	r3, [sp, #8]
 8005a1e:	9103      	str	r1, [sp, #12]
 8005a20:	428b      	cmp	r3, r1
 8005a22:	d80c      	bhi.n	8005a3e <__multiply+0x9e>
 8005a24:	2e00      	cmp	r6, #0
 8005a26:	dd03      	ble.n	8005a30 <__multiply+0x90>
 8005a28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d05b      	beq.n	8005ae8 <__multiply+0x148>
 8005a30:	6106      	str	r6, [r0, #16]
 8005a32:	b005      	add	sp, #20
 8005a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a38:	f843 2b04 	str.w	r2, [r3], #4
 8005a3c:	e7d8      	b.n	80059f0 <__multiply+0x50>
 8005a3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005a42:	f1ba 0f00 	cmp.w	sl, #0
 8005a46:	d024      	beq.n	8005a92 <__multiply+0xf2>
 8005a48:	f104 0e14 	add.w	lr, r4, #20
 8005a4c:	46a9      	mov	r9, r5
 8005a4e:	f04f 0c00 	mov.w	ip, #0
 8005a52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005a56:	f8d9 3000 	ldr.w	r3, [r9]
 8005a5a:	fa1f fb87 	uxth.w	fp, r7
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	fb0a 330b 	mla	r3, sl, fp, r3
 8005a64:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005a68:	f8d9 7000 	ldr.w	r7, [r9]
 8005a6c:	4463      	add	r3, ip
 8005a6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005a72:	fb0a c70b 	mla	r7, sl, fp, ip
 8005a76:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005a80:	4572      	cmp	r2, lr
 8005a82:	f849 3b04 	str.w	r3, [r9], #4
 8005a86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005a8a:	d8e2      	bhi.n	8005a52 <__multiply+0xb2>
 8005a8c:	9b01      	ldr	r3, [sp, #4]
 8005a8e:	f845 c003 	str.w	ip, [r5, r3]
 8005a92:	9b03      	ldr	r3, [sp, #12]
 8005a94:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005a98:	3104      	adds	r1, #4
 8005a9a:	f1b9 0f00 	cmp.w	r9, #0
 8005a9e:	d021      	beq.n	8005ae4 <__multiply+0x144>
 8005aa0:	682b      	ldr	r3, [r5, #0]
 8005aa2:	f104 0c14 	add.w	ip, r4, #20
 8005aa6:	46ae      	mov	lr, r5
 8005aa8:	f04f 0a00 	mov.w	sl, #0
 8005aac:	f8bc b000 	ldrh.w	fp, [ip]
 8005ab0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005ab4:	fb09 770b 	mla	r7, r9, fp, r7
 8005ab8:	4457      	add	r7, sl
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ac0:	f84e 3b04 	str.w	r3, [lr], #4
 8005ac4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ac8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005acc:	f8be 3000 	ldrh.w	r3, [lr]
 8005ad0:	fb09 330a 	mla	r3, r9, sl, r3
 8005ad4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005ad8:	4562      	cmp	r2, ip
 8005ada:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ade:	d8e5      	bhi.n	8005aac <__multiply+0x10c>
 8005ae0:	9f01      	ldr	r7, [sp, #4]
 8005ae2:	51eb      	str	r3, [r5, r7]
 8005ae4:	3504      	adds	r5, #4
 8005ae6:	e799      	b.n	8005a1c <__multiply+0x7c>
 8005ae8:	3e01      	subs	r6, #1
 8005aea:	e79b      	b.n	8005a24 <__multiply+0x84>
 8005aec:	08006bc8 	.word	0x08006bc8
 8005af0:	08006c50 	.word	0x08006c50

08005af4 <__pow5mult>:
 8005af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af8:	4615      	mov	r5, r2
 8005afa:	f012 0203 	ands.w	r2, r2, #3
 8005afe:	4607      	mov	r7, r0
 8005b00:	460e      	mov	r6, r1
 8005b02:	d007      	beq.n	8005b14 <__pow5mult+0x20>
 8005b04:	4c25      	ldr	r4, [pc, #148]	@ (8005b9c <__pow5mult+0xa8>)
 8005b06:	3a01      	subs	r2, #1
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b0e:	f7ff fe55 	bl	80057bc <__multadd>
 8005b12:	4606      	mov	r6, r0
 8005b14:	10ad      	asrs	r5, r5, #2
 8005b16:	d03d      	beq.n	8005b94 <__pow5mult+0xa0>
 8005b18:	69fc      	ldr	r4, [r7, #28]
 8005b1a:	b97c      	cbnz	r4, 8005b3c <__pow5mult+0x48>
 8005b1c:	2010      	movs	r0, #16
 8005b1e:	f000 fb99 	bl	8006254 <malloc>
 8005b22:	4602      	mov	r2, r0
 8005b24:	61f8      	str	r0, [r7, #28]
 8005b26:	b928      	cbnz	r0, 8005b34 <__pow5mult+0x40>
 8005b28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba0 <__pow5mult+0xac>)
 8005b2a:	481e      	ldr	r0, [pc, #120]	@ (8005ba4 <__pow5mult+0xb0>)
 8005b2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005b30:	f000 fb5e 	bl	80061f0 <__assert_func>
 8005b34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b38:	6004      	str	r4, [r0, #0]
 8005b3a:	60c4      	str	r4, [r0, #12]
 8005b3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005b40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b44:	b94c      	cbnz	r4, 8005b5a <__pow5mult+0x66>
 8005b46:	f240 2171 	movw	r1, #625	@ 0x271
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	f7ff ff12 	bl	8005974 <__i2b>
 8005b50:	2300      	movs	r3, #0
 8005b52:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b56:	4604      	mov	r4, r0
 8005b58:	6003      	str	r3, [r0, #0]
 8005b5a:	f04f 0900 	mov.w	r9, #0
 8005b5e:	07eb      	lsls	r3, r5, #31
 8005b60:	d50a      	bpl.n	8005b78 <__pow5mult+0x84>
 8005b62:	4631      	mov	r1, r6
 8005b64:	4622      	mov	r2, r4
 8005b66:	4638      	mov	r0, r7
 8005b68:	f7ff ff1a 	bl	80059a0 <__multiply>
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4680      	mov	r8, r0
 8005b70:	4638      	mov	r0, r7
 8005b72:	f7ff fe01 	bl	8005778 <_Bfree>
 8005b76:	4646      	mov	r6, r8
 8005b78:	106d      	asrs	r5, r5, #1
 8005b7a:	d00b      	beq.n	8005b94 <__pow5mult+0xa0>
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	b938      	cbnz	r0, 8005b90 <__pow5mult+0x9c>
 8005b80:	4622      	mov	r2, r4
 8005b82:	4621      	mov	r1, r4
 8005b84:	4638      	mov	r0, r7
 8005b86:	f7ff ff0b 	bl	80059a0 <__multiply>
 8005b8a:	6020      	str	r0, [r4, #0]
 8005b8c:	f8c0 9000 	str.w	r9, [r0]
 8005b90:	4604      	mov	r4, r0
 8005b92:	e7e4      	b.n	8005b5e <__pow5mult+0x6a>
 8005b94:	4630      	mov	r0, r6
 8005b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b9a:	bf00      	nop
 8005b9c:	08006cac 	.word	0x08006cac
 8005ba0:	08006c39 	.word	0x08006c39
 8005ba4:	08006c50 	.word	0x08006c50

08005ba8 <__lshift>:
 8005ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	460c      	mov	r4, r1
 8005bae:	6849      	ldr	r1, [r1, #4]
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005bb6:	68a3      	ldr	r3, [r4, #8]
 8005bb8:	4607      	mov	r7, r0
 8005bba:	4691      	mov	r9, r2
 8005bbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005bc0:	f108 0601 	add.w	r6, r8, #1
 8005bc4:	42b3      	cmp	r3, r6
 8005bc6:	db0b      	blt.n	8005be0 <__lshift+0x38>
 8005bc8:	4638      	mov	r0, r7
 8005bca:	f7ff fd95 	bl	80056f8 <_Balloc>
 8005bce:	4605      	mov	r5, r0
 8005bd0:	b948      	cbnz	r0, 8005be6 <__lshift+0x3e>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	4b28      	ldr	r3, [pc, #160]	@ (8005c78 <__lshift+0xd0>)
 8005bd6:	4829      	ldr	r0, [pc, #164]	@ (8005c7c <__lshift+0xd4>)
 8005bd8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005bdc:	f000 fb08 	bl	80061f0 <__assert_func>
 8005be0:	3101      	adds	r1, #1
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	e7ee      	b.n	8005bc4 <__lshift+0x1c>
 8005be6:	2300      	movs	r3, #0
 8005be8:	f100 0114 	add.w	r1, r0, #20
 8005bec:	f100 0210 	add.w	r2, r0, #16
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	4553      	cmp	r3, sl
 8005bf4:	db33      	blt.n	8005c5e <__lshift+0xb6>
 8005bf6:	6920      	ldr	r0, [r4, #16]
 8005bf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005bfc:	f104 0314 	add.w	r3, r4, #20
 8005c00:	f019 091f 	ands.w	r9, r9, #31
 8005c04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c0c:	d02b      	beq.n	8005c66 <__lshift+0xbe>
 8005c0e:	f1c9 0e20 	rsb	lr, r9, #32
 8005c12:	468a      	mov	sl, r1
 8005c14:	2200      	movs	r2, #0
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	fa00 f009 	lsl.w	r0, r0, r9
 8005c1c:	4310      	orrs	r0, r2
 8005c1e:	f84a 0b04 	str.w	r0, [sl], #4
 8005c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c26:	459c      	cmp	ip, r3
 8005c28:	fa22 f20e 	lsr.w	r2, r2, lr
 8005c2c:	d8f3      	bhi.n	8005c16 <__lshift+0x6e>
 8005c2e:	ebac 0304 	sub.w	r3, ip, r4
 8005c32:	3b15      	subs	r3, #21
 8005c34:	f023 0303 	bic.w	r3, r3, #3
 8005c38:	3304      	adds	r3, #4
 8005c3a:	f104 0015 	add.w	r0, r4, #21
 8005c3e:	4584      	cmp	ip, r0
 8005c40:	bf38      	it	cc
 8005c42:	2304      	movcc	r3, #4
 8005c44:	50ca      	str	r2, [r1, r3]
 8005c46:	b10a      	cbz	r2, 8005c4c <__lshift+0xa4>
 8005c48:	f108 0602 	add.w	r6, r8, #2
 8005c4c:	3e01      	subs	r6, #1
 8005c4e:	4638      	mov	r0, r7
 8005c50:	612e      	str	r6, [r5, #16]
 8005c52:	4621      	mov	r1, r4
 8005c54:	f7ff fd90 	bl	8005778 <_Bfree>
 8005c58:	4628      	mov	r0, r5
 8005c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c62:	3301      	adds	r3, #1
 8005c64:	e7c5      	b.n	8005bf2 <__lshift+0x4a>
 8005c66:	3904      	subs	r1, #4
 8005c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c70:	459c      	cmp	ip, r3
 8005c72:	d8f9      	bhi.n	8005c68 <__lshift+0xc0>
 8005c74:	e7ea      	b.n	8005c4c <__lshift+0xa4>
 8005c76:	bf00      	nop
 8005c78:	08006bc8 	.word	0x08006bc8
 8005c7c:	08006c50 	.word	0x08006c50

08005c80 <__mcmp>:
 8005c80:	690a      	ldr	r2, [r1, #16]
 8005c82:	4603      	mov	r3, r0
 8005c84:	6900      	ldr	r0, [r0, #16]
 8005c86:	1a80      	subs	r0, r0, r2
 8005c88:	b530      	push	{r4, r5, lr}
 8005c8a:	d10e      	bne.n	8005caa <__mcmp+0x2a>
 8005c8c:	3314      	adds	r3, #20
 8005c8e:	3114      	adds	r1, #20
 8005c90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005c94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005c98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ca0:	4295      	cmp	r5, r2
 8005ca2:	d003      	beq.n	8005cac <__mcmp+0x2c>
 8005ca4:	d205      	bcs.n	8005cb2 <__mcmp+0x32>
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8005caa:	bd30      	pop	{r4, r5, pc}
 8005cac:	42a3      	cmp	r3, r4
 8005cae:	d3f3      	bcc.n	8005c98 <__mcmp+0x18>
 8005cb0:	e7fb      	b.n	8005caa <__mcmp+0x2a>
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	e7f9      	b.n	8005caa <__mcmp+0x2a>
	...

08005cb8 <__mdiff>:
 8005cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	4689      	mov	r9, r1
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	4648      	mov	r0, r9
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	f7ff ffdb 	bl	8005c80 <__mcmp>
 8005cca:	1e05      	subs	r5, r0, #0
 8005ccc:	d112      	bne.n	8005cf4 <__mdiff+0x3c>
 8005cce:	4629      	mov	r1, r5
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	f7ff fd11 	bl	80056f8 <_Balloc>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	b928      	cbnz	r0, 8005ce6 <__mdiff+0x2e>
 8005cda:	4b3f      	ldr	r3, [pc, #252]	@ (8005dd8 <__mdiff+0x120>)
 8005cdc:	f240 2137 	movw	r1, #567	@ 0x237
 8005ce0:	483e      	ldr	r0, [pc, #248]	@ (8005ddc <__mdiff+0x124>)
 8005ce2:	f000 fa85 	bl	80061f0 <__assert_func>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005cec:	4610      	mov	r0, r2
 8005cee:	b003      	add	sp, #12
 8005cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf4:	bfbc      	itt	lt
 8005cf6:	464b      	movlt	r3, r9
 8005cf8:	46a1      	movlt	r9, r4
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005d00:	bfba      	itte	lt
 8005d02:	461c      	movlt	r4, r3
 8005d04:	2501      	movlt	r5, #1
 8005d06:	2500      	movge	r5, #0
 8005d08:	f7ff fcf6 	bl	80056f8 <_Balloc>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	b918      	cbnz	r0, 8005d18 <__mdiff+0x60>
 8005d10:	4b31      	ldr	r3, [pc, #196]	@ (8005dd8 <__mdiff+0x120>)
 8005d12:	f240 2145 	movw	r1, #581	@ 0x245
 8005d16:	e7e3      	b.n	8005ce0 <__mdiff+0x28>
 8005d18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005d1c:	6926      	ldr	r6, [r4, #16]
 8005d1e:	60c5      	str	r5, [r0, #12]
 8005d20:	f109 0310 	add.w	r3, r9, #16
 8005d24:	f109 0514 	add.w	r5, r9, #20
 8005d28:	f104 0e14 	add.w	lr, r4, #20
 8005d2c:	f100 0b14 	add.w	fp, r0, #20
 8005d30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005d34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	46d9      	mov	r9, fp
 8005d3c:	f04f 0c00 	mov.w	ip, #0
 8005d40:	9b01      	ldr	r3, [sp, #4]
 8005d42:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005d46:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	fa1f f38a 	uxth.w	r3, sl
 8005d50:	4619      	mov	r1, r3
 8005d52:	b283      	uxth	r3, r0
 8005d54:	1acb      	subs	r3, r1, r3
 8005d56:	0c00      	lsrs	r0, r0, #16
 8005d58:	4463      	add	r3, ip
 8005d5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005d5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005d68:	4576      	cmp	r6, lr
 8005d6a:	f849 3b04 	str.w	r3, [r9], #4
 8005d6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d72:	d8e5      	bhi.n	8005d40 <__mdiff+0x88>
 8005d74:	1b33      	subs	r3, r6, r4
 8005d76:	3b15      	subs	r3, #21
 8005d78:	f023 0303 	bic.w	r3, r3, #3
 8005d7c:	3415      	adds	r4, #21
 8005d7e:	3304      	adds	r3, #4
 8005d80:	42a6      	cmp	r6, r4
 8005d82:	bf38      	it	cc
 8005d84:	2304      	movcc	r3, #4
 8005d86:	441d      	add	r5, r3
 8005d88:	445b      	add	r3, fp
 8005d8a:	461e      	mov	r6, r3
 8005d8c:	462c      	mov	r4, r5
 8005d8e:	4544      	cmp	r4, r8
 8005d90:	d30e      	bcc.n	8005db0 <__mdiff+0xf8>
 8005d92:	f108 0103 	add.w	r1, r8, #3
 8005d96:	1b49      	subs	r1, r1, r5
 8005d98:	f021 0103 	bic.w	r1, r1, #3
 8005d9c:	3d03      	subs	r5, #3
 8005d9e:	45a8      	cmp	r8, r5
 8005da0:	bf38      	it	cc
 8005da2:	2100      	movcc	r1, #0
 8005da4:	440b      	add	r3, r1
 8005da6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005daa:	b191      	cbz	r1, 8005dd2 <__mdiff+0x11a>
 8005dac:	6117      	str	r7, [r2, #16]
 8005dae:	e79d      	b.n	8005cec <__mdiff+0x34>
 8005db0:	f854 1b04 	ldr.w	r1, [r4], #4
 8005db4:	46e6      	mov	lr, ip
 8005db6:	0c08      	lsrs	r0, r1, #16
 8005db8:	fa1c fc81 	uxtah	ip, ip, r1
 8005dbc:	4471      	add	r1, lr
 8005dbe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005dc2:	b289      	uxth	r1, r1
 8005dc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005dc8:	f846 1b04 	str.w	r1, [r6], #4
 8005dcc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005dd0:	e7dd      	b.n	8005d8e <__mdiff+0xd6>
 8005dd2:	3f01      	subs	r7, #1
 8005dd4:	e7e7      	b.n	8005da6 <__mdiff+0xee>
 8005dd6:	bf00      	nop
 8005dd8:	08006bc8 	.word	0x08006bc8
 8005ddc:	08006c50 	.word	0x08006c50

08005de0 <__ulp>:
 8005de0:	b082      	sub	sp, #8
 8005de2:	ed8d 0b00 	vstr	d0, [sp]
 8005de6:	9a01      	ldr	r2, [sp, #4]
 8005de8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e28 <__ulp+0x48>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dc08      	bgt.n	8005e06 <__ulp+0x26>
 8005df4:	425b      	negs	r3, r3
 8005df6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005dfa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005dfe:	da04      	bge.n	8005e0a <__ulp+0x2a>
 8005e00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005e04:	4113      	asrs	r3, r2
 8005e06:	2200      	movs	r2, #0
 8005e08:	e008      	b.n	8005e1c <__ulp+0x3c>
 8005e0a:	f1a2 0314 	sub.w	r3, r2, #20
 8005e0e:	2b1e      	cmp	r3, #30
 8005e10:	bfda      	itte	le
 8005e12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005e16:	40da      	lsrle	r2, r3
 8005e18:	2201      	movgt	r2, #1
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	ec41 0b10 	vmov	d0, r0, r1
 8005e24:	b002      	add	sp, #8
 8005e26:	4770      	bx	lr
 8005e28:	7ff00000 	.word	0x7ff00000

08005e2c <__b2d>:
 8005e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e30:	6906      	ldr	r6, [r0, #16]
 8005e32:	f100 0814 	add.w	r8, r0, #20
 8005e36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8005e3a:	1f37      	subs	r7, r6, #4
 8005e3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005e40:	4610      	mov	r0, r2
 8005e42:	f7ff fd4b 	bl	80058dc <__hi0bits>
 8005e46:	f1c0 0320 	rsb	r3, r0, #32
 8005e4a:	280a      	cmp	r0, #10
 8005e4c:	600b      	str	r3, [r1, #0]
 8005e4e:	491b      	ldr	r1, [pc, #108]	@ (8005ebc <__b2d+0x90>)
 8005e50:	dc15      	bgt.n	8005e7e <__b2d+0x52>
 8005e52:	f1c0 0c0b 	rsb	ip, r0, #11
 8005e56:	fa22 f30c 	lsr.w	r3, r2, ip
 8005e5a:	45b8      	cmp	r8, r7
 8005e5c:	ea43 0501 	orr.w	r5, r3, r1
 8005e60:	bf34      	ite	cc
 8005e62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005e66:	2300      	movcs	r3, #0
 8005e68:	3015      	adds	r0, #21
 8005e6a:	fa02 f000 	lsl.w	r0, r2, r0
 8005e6e:	fa23 f30c 	lsr.w	r3, r3, ip
 8005e72:	4303      	orrs	r3, r0
 8005e74:	461c      	mov	r4, r3
 8005e76:	ec45 4b10 	vmov	d0, r4, r5
 8005e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e7e:	45b8      	cmp	r8, r7
 8005e80:	bf3a      	itte	cc
 8005e82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005e86:	f1a6 0708 	subcc.w	r7, r6, #8
 8005e8a:	2300      	movcs	r3, #0
 8005e8c:	380b      	subs	r0, #11
 8005e8e:	d012      	beq.n	8005eb6 <__b2d+0x8a>
 8005e90:	f1c0 0120 	rsb	r1, r0, #32
 8005e94:	fa23 f401 	lsr.w	r4, r3, r1
 8005e98:	4082      	lsls	r2, r0
 8005e9a:	4322      	orrs	r2, r4
 8005e9c:	4547      	cmp	r7, r8
 8005e9e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8005ea2:	bf8c      	ite	hi
 8005ea4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8005ea8:	2200      	movls	r2, #0
 8005eaa:	4083      	lsls	r3, r0
 8005eac:	40ca      	lsrs	r2, r1
 8005eae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	e7de      	b.n	8005e74 <__b2d+0x48>
 8005eb6:	ea42 0501 	orr.w	r5, r2, r1
 8005eba:	e7db      	b.n	8005e74 <__b2d+0x48>
 8005ebc:	3ff00000 	.word	0x3ff00000

08005ec0 <__d2b>:
 8005ec0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	460f      	mov	r7, r1
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	ec59 8b10 	vmov	r8, r9, d0
 8005ecc:	4616      	mov	r6, r2
 8005ece:	f7ff fc13 	bl	80056f8 <_Balloc>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	b930      	cbnz	r0, 8005ee4 <__d2b+0x24>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	4b23      	ldr	r3, [pc, #140]	@ (8005f68 <__d2b+0xa8>)
 8005eda:	4824      	ldr	r0, [pc, #144]	@ (8005f6c <__d2b+0xac>)
 8005edc:	f240 310f 	movw	r1, #783	@ 0x30f
 8005ee0:	f000 f986 	bl	80061f0 <__assert_func>
 8005ee4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005ee8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005eec:	b10d      	cbz	r5, 8005ef2 <__d2b+0x32>
 8005eee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	f1b8 0300 	subs.w	r3, r8, #0
 8005ef8:	d023      	beq.n	8005f42 <__d2b+0x82>
 8005efa:	4668      	mov	r0, sp
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	f7ff fd0c 	bl	800591a <__lo0bits>
 8005f02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f06:	b1d0      	cbz	r0, 8005f3e <__d2b+0x7e>
 8005f08:	f1c0 0320 	rsb	r3, r0, #32
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	430b      	orrs	r3, r1
 8005f12:	40c2      	lsrs	r2, r0
 8005f14:	6163      	str	r3, [r4, #20]
 8005f16:	9201      	str	r2, [sp, #4]
 8005f18:	9b01      	ldr	r3, [sp, #4]
 8005f1a:	61a3      	str	r3, [r4, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bf0c      	ite	eq
 8005f20:	2201      	moveq	r2, #1
 8005f22:	2202      	movne	r2, #2
 8005f24:	6122      	str	r2, [r4, #16]
 8005f26:	b1a5      	cbz	r5, 8005f52 <__d2b+0x92>
 8005f28:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f2c:	4405      	add	r5, r0
 8005f2e:	603d      	str	r5, [r7, #0]
 8005f30:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005f34:	6030      	str	r0, [r6, #0]
 8005f36:	4620      	mov	r0, r4
 8005f38:	b003      	add	sp, #12
 8005f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f3e:	6161      	str	r1, [r4, #20]
 8005f40:	e7ea      	b.n	8005f18 <__d2b+0x58>
 8005f42:	a801      	add	r0, sp, #4
 8005f44:	f7ff fce9 	bl	800591a <__lo0bits>
 8005f48:	9b01      	ldr	r3, [sp, #4]
 8005f4a:	6163      	str	r3, [r4, #20]
 8005f4c:	3020      	adds	r0, #32
 8005f4e:	2201      	movs	r2, #1
 8005f50:	e7e8      	b.n	8005f24 <__d2b+0x64>
 8005f52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005f5a:	6038      	str	r0, [r7, #0]
 8005f5c:	6918      	ldr	r0, [r3, #16]
 8005f5e:	f7ff fcbd 	bl	80058dc <__hi0bits>
 8005f62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f66:	e7e5      	b.n	8005f34 <__d2b+0x74>
 8005f68:	08006bc8 	.word	0x08006bc8
 8005f6c:	08006c50 	.word	0x08006c50

08005f70 <__ratio>:
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	b085      	sub	sp, #20
 8005f76:	e9cd 1000 	strd	r1, r0, [sp]
 8005f7a:	a902      	add	r1, sp, #8
 8005f7c:	f7ff ff56 	bl	8005e2c <__b2d>
 8005f80:	9800      	ldr	r0, [sp, #0]
 8005f82:	a903      	add	r1, sp, #12
 8005f84:	ec55 4b10 	vmov	r4, r5, d0
 8005f88:	f7ff ff50 	bl	8005e2c <__b2d>
 8005f8c:	9b01      	ldr	r3, [sp, #4]
 8005f8e:	6919      	ldr	r1, [r3, #16]
 8005f90:	9b00      	ldr	r3, [sp, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	1ac9      	subs	r1, r1, r3
 8005f96:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	ec5b ab10 	vmov	sl, fp, d0
 8005fa0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bfce      	itee	gt
 8005fa8:	462a      	movgt	r2, r5
 8005faa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005fae:	465a      	movle	r2, fp
 8005fb0:	462f      	mov	r7, r5
 8005fb2:	46d9      	mov	r9, fp
 8005fb4:	bfcc      	ite	gt
 8005fb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005fba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	4652      	mov	r2, sl
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	f7fa fc39 	bl	800083c <__aeabi_ddiv>
 8005fca:	ec41 0b10 	vmov	d0, r0, r1
 8005fce:	b005      	add	sp, #20
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005fd4 <__copybits>:
 8005fd4:	3901      	subs	r1, #1
 8005fd6:	b570      	push	{r4, r5, r6, lr}
 8005fd8:	1149      	asrs	r1, r1, #5
 8005fda:	6914      	ldr	r4, [r2, #16]
 8005fdc:	3101      	adds	r1, #1
 8005fde:	f102 0314 	add.w	r3, r2, #20
 8005fe2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005fe6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005fea:	1f05      	subs	r5, r0, #4
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	d30c      	bcc.n	800600a <__copybits+0x36>
 8005ff0:	1aa3      	subs	r3, r4, r2
 8005ff2:	3b11      	subs	r3, #17
 8005ff4:	f023 0303 	bic.w	r3, r3, #3
 8005ff8:	3211      	adds	r2, #17
 8005ffa:	42a2      	cmp	r2, r4
 8005ffc:	bf88      	it	hi
 8005ffe:	2300      	movhi	r3, #0
 8006000:	4418      	add	r0, r3
 8006002:	2300      	movs	r3, #0
 8006004:	4288      	cmp	r0, r1
 8006006:	d305      	bcc.n	8006014 <__copybits+0x40>
 8006008:	bd70      	pop	{r4, r5, r6, pc}
 800600a:	f853 6b04 	ldr.w	r6, [r3], #4
 800600e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006012:	e7eb      	b.n	8005fec <__copybits+0x18>
 8006014:	f840 3b04 	str.w	r3, [r0], #4
 8006018:	e7f4      	b.n	8006004 <__copybits+0x30>

0800601a <__any_on>:
 800601a:	f100 0214 	add.w	r2, r0, #20
 800601e:	6900      	ldr	r0, [r0, #16]
 8006020:	114b      	asrs	r3, r1, #5
 8006022:	4298      	cmp	r0, r3
 8006024:	b510      	push	{r4, lr}
 8006026:	db11      	blt.n	800604c <__any_on+0x32>
 8006028:	dd0a      	ble.n	8006040 <__any_on+0x26>
 800602a:	f011 011f 	ands.w	r1, r1, #31
 800602e:	d007      	beq.n	8006040 <__any_on+0x26>
 8006030:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006034:	fa24 f001 	lsr.w	r0, r4, r1
 8006038:	fa00 f101 	lsl.w	r1, r0, r1
 800603c:	428c      	cmp	r4, r1
 800603e:	d10b      	bne.n	8006058 <__any_on+0x3e>
 8006040:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006044:	4293      	cmp	r3, r2
 8006046:	d803      	bhi.n	8006050 <__any_on+0x36>
 8006048:	2000      	movs	r0, #0
 800604a:	bd10      	pop	{r4, pc}
 800604c:	4603      	mov	r3, r0
 800604e:	e7f7      	b.n	8006040 <__any_on+0x26>
 8006050:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006054:	2900      	cmp	r1, #0
 8006056:	d0f5      	beq.n	8006044 <__any_on+0x2a>
 8006058:	2001      	movs	r0, #1
 800605a:	e7f6      	b.n	800604a <__any_on+0x30>

0800605c <__ascii_wctomb>:
 800605c:	4603      	mov	r3, r0
 800605e:	4608      	mov	r0, r1
 8006060:	b141      	cbz	r1, 8006074 <__ascii_wctomb+0x18>
 8006062:	2aff      	cmp	r2, #255	@ 0xff
 8006064:	d904      	bls.n	8006070 <__ascii_wctomb+0x14>
 8006066:	228a      	movs	r2, #138	@ 0x8a
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	f04f 30ff 	mov.w	r0, #4294967295
 800606e:	4770      	bx	lr
 8006070:	700a      	strb	r2, [r1, #0]
 8006072:	2001      	movs	r0, #1
 8006074:	4770      	bx	lr
	...

08006078 <__sflush_r>:
 8006078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800607c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006080:	0716      	lsls	r6, r2, #28
 8006082:	4605      	mov	r5, r0
 8006084:	460c      	mov	r4, r1
 8006086:	d454      	bmi.n	8006132 <__sflush_r+0xba>
 8006088:	684b      	ldr	r3, [r1, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	dc02      	bgt.n	8006094 <__sflush_r+0x1c>
 800608e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	dd48      	ble.n	8006126 <__sflush_r+0xae>
 8006094:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006096:	2e00      	cmp	r6, #0
 8006098:	d045      	beq.n	8006126 <__sflush_r+0xae>
 800609a:	2300      	movs	r3, #0
 800609c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80060a0:	682f      	ldr	r7, [r5, #0]
 80060a2:	6a21      	ldr	r1, [r4, #32]
 80060a4:	602b      	str	r3, [r5, #0]
 80060a6:	d030      	beq.n	800610a <__sflush_r+0x92>
 80060a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	0759      	lsls	r1, r3, #29
 80060ae:	d505      	bpl.n	80060bc <__sflush_r+0x44>
 80060b0:	6863      	ldr	r3, [r4, #4]
 80060b2:	1ad2      	subs	r2, r2, r3
 80060b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060b6:	b10b      	cbz	r3, 80060bc <__sflush_r+0x44>
 80060b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060ba:	1ad2      	subs	r2, r2, r3
 80060bc:	2300      	movs	r3, #0
 80060be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060c0:	6a21      	ldr	r1, [r4, #32]
 80060c2:	4628      	mov	r0, r5
 80060c4:	47b0      	blx	r6
 80060c6:	1c43      	adds	r3, r0, #1
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	d106      	bne.n	80060da <__sflush_r+0x62>
 80060cc:	6829      	ldr	r1, [r5, #0]
 80060ce:	291d      	cmp	r1, #29
 80060d0:	d82b      	bhi.n	800612a <__sflush_r+0xb2>
 80060d2:	4a2a      	ldr	r2, [pc, #168]	@ (800617c <__sflush_r+0x104>)
 80060d4:	410a      	asrs	r2, r1
 80060d6:	07d6      	lsls	r6, r2, #31
 80060d8:	d427      	bmi.n	800612a <__sflush_r+0xb2>
 80060da:	2200      	movs	r2, #0
 80060dc:	6062      	str	r2, [r4, #4]
 80060de:	04d9      	lsls	r1, r3, #19
 80060e0:	6922      	ldr	r2, [r4, #16]
 80060e2:	6022      	str	r2, [r4, #0]
 80060e4:	d504      	bpl.n	80060f0 <__sflush_r+0x78>
 80060e6:	1c42      	adds	r2, r0, #1
 80060e8:	d101      	bne.n	80060ee <__sflush_r+0x76>
 80060ea:	682b      	ldr	r3, [r5, #0]
 80060ec:	b903      	cbnz	r3, 80060f0 <__sflush_r+0x78>
 80060ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80060f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060f2:	602f      	str	r7, [r5, #0]
 80060f4:	b1b9      	cbz	r1, 8006126 <__sflush_r+0xae>
 80060f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060fa:	4299      	cmp	r1, r3
 80060fc:	d002      	beq.n	8006104 <__sflush_r+0x8c>
 80060fe:	4628      	mov	r0, r5
 8006100:	f7fe feb6 	bl	8004e70 <_free_r>
 8006104:	2300      	movs	r3, #0
 8006106:	6363      	str	r3, [r4, #52]	@ 0x34
 8006108:	e00d      	b.n	8006126 <__sflush_r+0xae>
 800610a:	2301      	movs	r3, #1
 800610c:	4628      	mov	r0, r5
 800610e:	47b0      	blx	r6
 8006110:	4602      	mov	r2, r0
 8006112:	1c50      	adds	r0, r2, #1
 8006114:	d1c9      	bne.n	80060aa <__sflush_r+0x32>
 8006116:	682b      	ldr	r3, [r5, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0c6      	beq.n	80060aa <__sflush_r+0x32>
 800611c:	2b1d      	cmp	r3, #29
 800611e:	d001      	beq.n	8006124 <__sflush_r+0xac>
 8006120:	2b16      	cmp	r3, #22
 8006122:	d11e      	bne.n	8006162 <__sflush_r+0xea>
 8006124:	602f      	str	r7, [r5, #0]
 8006126:	2000      	movs	r0, #0
 8006128:	e022      	b.n	8006170 <__sflush_r+0xf8>
 800612a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800612e:	b21b      	sxth	r3, r3
 8006130:	e01b      	b.n	800616a <__sflush_r+0xf2>
 8006132:	690f      	ldr	r7, [r1, #16]
 8006134:	2f00      	cmp	r7, #0
 8006136:	d0f6      	beq.n	8006126 <__sflush_r+0xae>
 8006138:	0793      	lsls	r3, r2, #30
 800613a:	680e      	ldr	r6, [r1, #0]
 800613c:	bf08      	it	eq
 800613e:	694b      	ldreq	r3, [r1, #20]
 8006140:	600f      	str	r7, [r1, #0]
 8006142:	bf18      	it	ne
 8006144:	2300      	movne	r3, #0
 8006146:	eba6 0807 	sub.w	r8, r6, r7
 800614a:	608b      	str	r3, [r1, #8]
 800614c:	f1b8 0f00 	cmp.w	r8, #0
 8006150:	dde9      	ble.n	8006126 <__sflush_r+0xae>
 8006152:	6a21      	ldr	r1, [r4, #32]
 8006154:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006156:	4643      	mov	r3, r8
 8006158:	463a      	mov	r2, r7
 800615a:	4628      	mov	r0, r5
 800615c:	47b0      	blx	r6
 800615e:	2800      	cmp	r0, #0
 8006160:	dc08      	bgt.n	8006174 <__sflush_r+0xfc>
 8006162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800616a:	81a3      	strh	r3, [r4, #12]
 800616c:	f04f 30ff 	mov.w	r0, #4294967295
 8006170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006174:	4407      	add	r7, r0
 8006176:	eba8 0800 	sub.w	r8, r8, r0
 800617a:	e7e7      	b.n	800614c <__sflush_r+0xd4>
 800617c:	dfbffffe 	.word	0xdfbffffe

08006180 <_fflush_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	690b      	ldr	r3, [r1, #16]
 8006184:	4605      	mov	r5, r0
 8006186:	460c      	mov	r4, r1
 8006188:	b913      	cbnz	r3, 8006190 <_fflush_r+0x10>
 800618a:	2500      	movs	r5, #0
 800618c:	4628      	mov	r0, r5
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	b118      	cbz	r0, 800619a <_fflush_r+0x1a>
 8006192:	6a03      	ldr	r3, [r0, #32]
 8006194:	b90b      	cbnz	r3, 800619a <_fflush_r+0x1a>
 8006196:	f7fe fd4b 	bl	8004c30 <__sinit>
 800619a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0f3      	beq.n	800618a <_fflush_r+0xa>
 80061a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061a4:	07d0      	lsls	r0, r2, #31
 80061a6:	d404      	bmi.n	80061b2 <_fflush_r+0x32>
 80061a8:	0599      	lsls	r1, r3, #22
 80061aa:	d402      	bmi.n	80061b2 <_fflush_r+0x32>
 80061ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061ae:	f7fe fe44 	bl	8004e3a <__retarget_lock_acquire_recursive>
 80061b2:	4628      	mov	r0, r5
 80061b4:	4621      	mov	r1, r4
 80061b6:	f7ff ff5f 	bl	8006078 <__sflush_r>
 80061ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061bc:	07da      	lsls	r2, r3, #31
 80061be:	4605      	mov	r5, r0
 80061c0:	d4e4      	bmi.n	800618c <_fflush_r+0xc>
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	059b      	lsls	r3, r3, #22
 80061c6:	d4e1      	bmi.n	800618c <_fflush_r+0xc>
 80061c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061ca:	f7fe fe37 	bl	8004e3c <__retarget_lock_release_recursive>
 80061ce:	e7dd      	b.n	800618c <_fflush_r+0xc>

080061d0 <_sbrk_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4d06      	ldr	r5, [pc, #24]	@ (80061ec <_sbrk_r+0x1c>)
 80061d4:	2300      	movs	r3, #0
 80061d6:	4604      	mov	r4, r0
 80061d8:	4608      	mov	r0, r1
 80061da:	602b      	str	r3, [r5, #0]
 80061dc:	f7fb fe5e 	bl	8001e9c <_sbrk>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_sbrk_r+0x1a>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_sbrk_r+0x1a>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	200004b8 	.word	0x200004b8

080061f0 <__assert_func>:
 80061f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061f2:	4614      	mov	r4, r2
 80061f4:	461a      	mov	r2, r3
 80061f6:	4b09      	ldr	r3, [pc, #36]	@ (800621c <__assert_func+0x2c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4605      	mov	r5, r0
 80061fc:	68d8      	ldr	r0, [r3, #12]
 80061fe:	b954      	cbnz	r4, 8006216 <__assert_func+0x26>
 8006200:	4b07      	ldr	r3, [pc, #28]	@ (8006220 <__assert_func+0x30>)
 8006202:	461c      	mov	r4, r3
 8006204:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006208:	9100      	str	r1, [sp, #0]
 800620a:	462b      	mov	r3, r5
 800620c:	4905      	ldr	r1, [pc, #20]	@ (8006224 <__assert_func+0x34>)
 800620e:	f000 f829 	bl	8006264 <fiprintf>
 8006212:	f000 f839 	bl	8006288 <abort>
 8006216:	4b04      	ldr	r3, [pc, #16]	@ (8006228 <__assert_func+0x38>)
 8006218:	e7f4      	b.n	8006204 <__assert_func+0x14>
 800621a:	bf00      	nop
 800621c:	20000184 	.word	0x20000184
 8006220:	08006ee4 	.word	0x08006ee4
 8006224:	08006eb6 	.word	0x08006eb6
 8006228:	08006ea9 	.word	0x08006ea9

0800622c <_calloc_r>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	fba1 5402 	umull	r5, r4, r1, r2
 8006232:	b93c      	cbnz	r4, 8006244 <_calloc_r+0x18>
 8006234:	4629      	mov	r1, r5
 8006236:	f7ff f9c1 	bl	80055bc <_malloc_r>
 800623a:	4606      	mov	r6, r0
 800623c:	b928      	cbnz	r0, 800624a <_calloc_r+0x1e>
 800623e:	2600      	movs	r6, #0
 8006240:	4630      	mov	r0, r6
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	220c      	movs	r2, #12
 8006246:	6002      	str	r2, [r0, #0]
 8006248:	e7f9      	b.n	800623e <_calloc_r+0x12>
 800624a:	462a      	mov	r2, r5
 800624c:	4621      	mov	r1, r4
 800624e:	f7fe fd68 	bl	8004d22 <memset>
 8006252:	e7f5      	b.n	8006240 <_calloc_r+0x14>

08006254 <malloc>:
 8006254:	4b02      	ldr	r3, [pc, #8]	@ (8006260 <malloc+0xc>)
 8006256:	4601      	mov	r1, r0
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	f7ff b9af 	b.w	80055bc <_malloc_r>
 800625e:	bf00      	nop
 8006260:	20000184 	.word	0x20000184

08006264 <fiprintf>:
 8006264:	b40e      	push	{r1, r2, r3}
 8006266:	b503      	push	{r0, r1, lr}
 8006268:	4601      	mov	r1, r0
 800626a:	ab03      	add	r3, sp, #12
 800626c:	4805      	ldr	r0, [pc, #20]	@ (8006284 <fiprintf+0x20>)
 800626e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006272:	6800      	ldr	r0, [r0, #0]
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	f000 f837 	bl	80062e8 <_vfiprintf_r>
 800627a:	b002      	add	sp, #8
 800627c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006280:	b003      	add	sp, #12
 8006282:	4770      	bx	lr
 8006284:	20000184 	.word	0x20000184

08006288 <abort>:
 8006288:	b508      	push	{r3, lr}
 800628a:	2006      	movs	r0, #6
 800628c:	f000 fb8e 	bl	80069ac <raise>
 8006290:	2001      	movs	r0, #1
 8006292:	f7fb fd8b 	bl	8001dac <_exit>

08006296 <__sfputc_r>:
 8006296:	6893      	ldr	r3, [r2, #8]
 8006298:	3b01      	subs	r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	b410      	push	{r4}
 800629e:	6093      	str	r3, [r2, #8]
 80062a0:	da08      	bge.n	80062b4 <__sfputc_r+0x1e>
 80062a2:	6994      	ldr	r4, [r2, #24]
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	db01      	blt.n	80062ac <__sfputc_r+0x16>
 80062a8:	290a      	cmp	r1, #10
 80062aa:	d103      	bne.n	80062b4 <__sfputc_r+0x1e>
 80062ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062b0:	f000 bac0 	b.w	8006834 <__swbuf_r>
 80062b4:	6813      	ldr	r3, [r2, #0]
 80062b6:	1c58      	adds	r0, r3, #1
 80062b8:	6010      	str	r0, [r2, #0]
 80062ba:	7019      	strb	r1, [r3, #0]
 80062bc:	4608      	mov	r0, r1
 80062be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <__sfputs_r>:
 80062c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c6:	4606      	mov	r6, r0
 80062c8:	460f      	mov	r7, r1
 80062ca:	4614      	mov	r4, r2
 80062cc:	18d5      	adds	r5, r2, r3
 80062ce:	42ac      	cmp	r4, r5
 80062d0:	d101      	bne.n	80062d6 <__sfputs_r+0x12>
 80062d2:	2000      	movs	r0, #0
 80062d4:	e007      	b.n	80062e6 <__sfputs_r+0x22>
 80062d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062da:	463a      	mov	r2, r7
 80062dc:	4630      	mov	r0, r6
 80062de:	f7ff ffda 	bl	8006296 <__sfputc_r>
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	d1f3      	bne.n	80062ce <__sfputs_r+0xa>
 80062e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062e8 <_vfiprintf_r>:
 80062e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ec:	460d      	mov	r5, r1
 80062ee:	b09d      	sub	sp, #116	@ 0x74
 80062f0:	4614      	mov	r4, r2
 80062f2:	4698      	mov	r8, r3
 80062f4:	4606      	mov	r6, r0
 80062f6:	b118      	cbz	r0, 8006300 <_vfiprintf_r+0x18>
 80062f8:	6a03      	ldr	r3, [r0, #32]
 80062fa:	b90b      	cbnz	r3, 8006300 <_vfiprintf_r+0x18>
 80062fc:	f7fe fc98 	bl	8004c30 <__sinit>
 8006300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006302:	07d9      	lsls	r1, r3, #31
 8006304:	d405      	bmi.n	8006312 <_vfiprintf_r+0x2a>
 8006306:	89ab      	ldrh	r3, [r5, #12]
 8006308:	059a      	lsls	r2, r3, #22
 800630a:	d402      	bmi.n	8006312 <_vfiprintf_r+0x2a>
 800630c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800630e:	f7fe fd94 	bl	8004e3a <__retarget_lock_acquire_recursive>
 8006312:	89ab      	ldrh	r3, [r5, #12]
 8006314:	071b      	lsls	r3, r3, #28
 8006316:	d501      	bpl.n	800631c <_vfiprintf_r+0x34>
 8006318:	692b      	ldr	r3, [r5, #16]
 800631a:	b99b      	cbnz	r3, 8006344 <_vfiprintf_r+0x5c>
 800631c:	4629      	mov	r1, r5
 800631e:	4630      	mov	r0, r6
 8006320:	f000 fac6 	bl	80068b0 <__swsetup_r>
 8006324:	b170      	cbz	r0, 8006344 <_vfiprintf_r+0x5c>
 8006326:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006328:	07dc      	lsls	r4, r3, #31
 800632a:	d504      	bpl.n	8006336 <_vfiprintf_r+0x4e>
 800632c:	f04f 30ff 	mov.w	r0, #4294967295
 8006330:	b01d      	add	sp, #116	@ 0x74
 8006332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006336:	89ab      	ldrh	r3, [r5, #12]
 8006338:	0598      	lsls	r0, r3, #22
 800633a:	d4f7      	bmi.n	800632c <_vfiprintf_r+0x44>
 800633c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800633e:	f7fe fd7d 	bl	8004e3c <__retarget_lock_release_recursive>
 8006342:	e7f3      	b.n	800632c <_vfiprintf_r+0x44>
 8006344:	2300      	movs	r3, #0
 8006346:	9309      	str	r3, [sp, #36]	@ 0x24
 8006348:	2320      	movs	r3, #32
 800634a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800634e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006352:	2330      	movs	r3, #48	@ 0x30
 8006354:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006504 <_vfiprintf_r+0x21c>
 8006358:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800635c:	f04f 0901 	mov.w	r9, #1
 8006360:	4623      	mov	r3, r4
 8006362:	469a      	mov	sl, r3
 8006364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006368:	b10a      	cbz	r2, 800636e <_vfiprintf_r+0x86>
 800636a:	2a25      	cmp	r2, #37	@ 0x25
 800636c:	d1f9      	bne.n	8006362 <_vfiprintf_r+0x7a>
 800636e:	ebba 0b04 	subs.w	fp, sl, r4
 8006372:	d00b      	beq.n	800638c <_vfiprintf_r+0xa4>
 8006374:	465b      	mov	r3, fp
 8006376:	4622      	mov	r2, r4
 8006378:	4629      	mov	r1, r5
 800637a:	4630      	mov	r0, r6
 800637c:	f7ff ffa2 	bl	80062c4 <__sfputs_r>
 8006380:	3001      	adds	r0, #1
 8006382:	f000 80a7 	beq.w	80064d4 <_vfiprintf_r+0x1ec>
 8006386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006388:	445a      	add	r2, fp
 800638a:	9209      	str	r2, [sp, #36]	@ 0x24
 800638c:	f89a 3000 	ldrb.w	r3, [sl]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 809f 	beq.w	80064d4 <_vfiprintf_r+0x1ec>
 8006396:	2300      	movs	r3, #0
 8006398:	f04f 32ff 	mov.w	r2, #4294967295
 800639c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063a0:	f10a 0a01 	add.w	sl, sl, #1
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	9307      	str	r3, [sp, #28]
 80063a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80063ae:	4654      	mov	r4, sl
 80063b0:	2205      	movs	r2, #5
 80063b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b6:	4853      	ldr	r0, [pc, #332]	@ (8006504 <_vfiprintf_r+0x21c>)
 80063b8:	f7f9 ff0a 	bl	80001d0 <memchr>
 80063bc:	9a04      	ldr	r2, [sp, #16]
 80063be:	b9d8      	cbnz	r0, 80063f8 <_vfiprintf_r+0x110>
 80063c0:	06d1      	lsls	r1, r2, #27
 80063c2:	bf44      	itt	mi
 80063c4:	2320      	movmi	r3, #32
 80063c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063ca:	0713      	lsls	r3, r2, #28
 80063cc:	bf44      	itt	mi
 80063ce:	232b      	movmi	r3, #43	@ 0x2b
 80063d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063d4:	f89a 3000 	ldrb.w	r3, [sl]
 80063d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80063da:	d015      	beq.n	8006408 <_vfiprintf_r+0x120>
 80063dc:	9a07      	ldr	r2, [sp, #28]
 80063de:	4654      	mov	r4, sl
 80063e0:	2000      	movs	r0, #0
 80063e2:	f04f 0c0a 	mov.w	ip, #10
 80063e6:	4621      	mov	r1, r4
 80063e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063ec:	3b30      	subs	r3, #48	@ 0x30
 80063ee:	2b09      	cmp	r3, #9
 80063f0:	d94b      	bls.n	800648a <_vfiprintf_r+0x1a2>
 80063f2:	b1b0      	cbz	r0, 8006422 <_vfiprintf_r+0x13a>
 80063f4:	9207      	str	r2, [sp, #28]
 80063f6:	e014      	b.n	8006422 <_vfiprintf_r+0x13a>
 80063f8:	eba0 0308 	sub.w	r3, r0, r8
 80063fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006400:	4313      	orrs	r3, r2
 8006402:	9304      	str	r3, [sp, #16]
 8006404:	46a2      	mov	sl, r4
 8006406:	e7d2      	b.n	80063ae <_vfiprintf_r+0xc6>
 8006408:	9b03      	ldr	r3, [sp, #12]
 800640a:	1d19      	adds	r1, r3, #4
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	9103      	str	r1, [sp, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	bfbb      	ittet	lt
 8006414:	425b      	neglt	r3, r3
 8006416:	f042 0202 	orrlt.w	r2, r2, #2
 800641a:	9307      	strge	r3, [sp, #28]
 800641c:	9307      	strlt	r3, [sp, #28]
 800641e:	bfb8      	it	lt
 8006420:	9204      	strlt	r2, [sp, #16]
 8006422:	7823      	ldrb	r3, [r4, #0]
 8006424:	2b2e      	cmp	r3, #46	@ 0x2e
 8006426:	d10a      	bne.n	800643e <_vfiprintf_r+0x156>
 8006428:	7863      	ldrb	r3, [r4, #1]
 800642a:	2b2a      	cmp	r3, #42	@ 0x2a
 800642c:	d132      	bne.n	8006494 <_vfiprintf_r+0x1ac>
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	1d1a      	adds	r2, r3, #4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	9203      	str	r2, [sp, #12]
 8006436:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800643a:	3402      	adds	r4, #2
 800643c:	9305      	str	r3, [sp, #20]
 800643e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006514 <_vfiprintf_r+0x22c>
 8006442:	7821      	ldrb	r1, [r4, #0]
 8006444:	2203      	movs	r2, #3
 8006446:	4650      	mov	r0, sl
 8006448:	f7f9 fec2 	bl	80001d0 <memchr>
 800644c:	b138      	cbz	r0, 800645e <_vfiprintf_r+0x176>
 800644e:	9b04      	ldr	r3, [sp, #16]
 8006450:	eba0 000a 	sub.w	r0, r0, sl
 8006454:	2240      	movs	r2, #64	@ 0x40
 8006456:	4082      	lsls	r2, r0
 8006458:	4313      	orrs	r3, r2
 800645a:	3401      	adds	r4, #1
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006462:	4829      	ldr	r0, [pc, #164]	@ (8006508 <_vfiprintf_r+0x220>)
 8006464:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006468:	2206      	movs	r2, #6
 800646a:	f7f9 feb1 	bl	80001d0 <memchr>
 800646e:	2800      	cmp	r0, #0
 8006470:	d03f      	beq.n	80064f2 <_vfiprintf_r+0x20a>
 8006472:	4b26      	ldr	r3, [pc, #152]	@ (800650c <_vfiprintf_r+0x224>)
 8006474:	bb1b      	cbnz	r3, 80064be <_vfiprintf_r+0x1d6>
 8006476:	9b03      	ldr	r3, [sp, #12]
 8006478:	3307      	adds	r3, #7
 800647a:	f023 0307 	bic.w	r3, r3, #7
 800647e:	3308      	adds	r3, #8
 8006480:	9303      	str	r3, [sp, #12]
 8006482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006484:	443b      	add	r3, r7
 8006486:	9309      	str	r3, [sp, #36]	@ 0x24
 8006488:	e76a      	b.n	8006360 <_vfiprintf_r+0x78>
 800648a:	fb0c 3202 	mla	r2, ip, r2, r3
 800648e:	460c      	mov	r4, r1
 8006490:	2001      	movs	r0, #1
 8006492:	e7a8      	b.n	80063e6 <_vfiprintf_r+0xfe>
 8006494:	2300      	movs	r3, #0
 8006496:	3401      	adds	r4, #1
 8006498:	9305      	str	r3, [sp, #20]
 800649a:	4619      	mov	r1, r3
 800649c:	f04f 0c0a 	mov.w	ip, #10
 80064a0:	4620      	mov	r0, r4
 80064a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064a6:	3a30      	subs	r2, #48	@ 0x30
 80064a8:	2a09      	cmp	r2, #9
 80064aa:	d903      	bls.n	80064b4 <_vfiprintf_r+0x1cc>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0c6      	beq.n	800643e <_vfiprintf_r+0x156>
 80064b0:	9105      	str	r1, [sp, #20]
 80064b2:	e7c4      	b.n	800643e <_vfiprintf_r+0x156>
 80064b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80064b8:	4604      	mov	r4, r0
 80064ba:	2301      	movs	r3, #1
 80064bc:	e7f0      	b.n	80064a0 <_vfiprintf_r+0x1b8>
 80064be:	ab03      	add	r3, sp, #12
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	462a      	mov	r2, r5
 80064c4:	4b12      	ldr	r3, [pc, #72]	@ (8006510 <_vfiprintf_r+0x228>)
 80064c6:	a904      	add	r1, sp, #16
 80064c8:	4630      	mov	r0, r6
 80064ca:	f3af 8000 	nop.w
 80064ce:	4607      	mov	r7, r0
 80064d0:	1c78      	adds	r0, r7, #1
 80064d2:	d1d6      	bne.n	8006482 <_vfiprintf_r+0x19a>
 80064d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064d6:	07d9      	lsls	r1, r3, #31
 80064d8:	d405      	bmi.n	80064e6 <_vfiprintf_r+0x1fe>
 80064da:	89ab      	ldrh	r3, [r5, #12]
 80064dc:	059a      	lsls	r2, r3, #22
 80064de:	d402      	bmi.n	80064e6 <_vfiprintf_r+0x1fe>
 80064e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064e2:	f7fe fcab 	bl	8004e3c <__retarget_lock_release_recursive>
 80064e6:	89ab      	ldrh	r3, [r5, #12]
 80064e8:	065b      	lsls	r3, r3, #25
 80064ea:	f53f af1f 	bmi.w	800632c <_vfiprintf_r+0x44>
 80064ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064f0:	e71e      	b.n	8006330 <_vfiprintf_r+0x48>
 80064f2:	ab03      	add	r3, sp, #12
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	462a      	mov	r2, r5
 80064f8:	4b05      	ldr	r3, [pc, #20]	@ (8006510 <_vfiprintf_r+0x228>)
 80064fa:	a904      	add	r1, sp, #16
 80064fc:	4630      	mov	r0, r6
 80064fe:	f000 f879 	bl	80065f4 <_printf_i>
 8006502:	e7e4      	b.n	80064ce <_vfiprintf_r+0x1e6>
 8006504:	08006ee5 	.word	0x08006ee5
 8006508:	08006eef 	.word	0x08006eef
 800650c:	00000000 	.word	0x00000000
 8006510:	080062c5 	.word	0x080062c5
 8006514:	08006eeb 	.word	0x08006eeb

08006518 <_printf_common>:
 8006518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800651c:	4616      	mov	r6, r2
 800651e:	4698      	mov	r8, r3
 8006520:	688a      	ldr	r2, [r1, #8]
 8006522:	690b      	ldr	r3, [r1, #16]
 8006524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006528:	4293      	cmp	r3, r2
 800652a:	bfb8      	it	lt
 800652c:	4613      	movlt	r3, r2
 800652e:	6033      	str	r3, [r6, #0]
 8006530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006534:	4607      	mov	r7, r0
 8006536:	460c      	mov	r4, r1
 8006538:	b10a      	cbz	r2, 800653e <_printf_common+0x26>
 800653a:	3301      	adds	r3, #1
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	0699      	lsls	r1, r3, #26
 8006542:	bf42      	ittt	mi
 8006544:	6833      	ldrmi	r3, [r6, #0]
 8006546:	3302      	addmi	r3, #2
 8006548:	6033      	strmi	r3, [r6, #0]
 800654a:	6825      	ldr	r5, [r4, #0]
 800654c:	f015 0506 	ands.w	r5, r5, #6
 8006550:	d106      	bne.n	8006560 <_printf_common+0x48>
 8006552:	f104 0a19 	add.w	sl, r4, #25
 8006556:	68e3      	ldr	r3, [r4, #12]
 8006558:	6832      	ldr	r2, [r6, #0]
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	42ab      	cmp	r3, r5
 800655e:	dc26      	bgt.n	80065ae <_printf_common+0x96>
 8006560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006564:	6822      	ldr	r2, [r4, #0]
 8006566:	3b00      	subs	r3, #0
 8006568:	bf18      	it	ne
 800656a:	2301      	movne	r3, #1
 800656c:	0692      	lsls	r2, r2, #26
 800656e:	d42b      	bmi.n	80065c8 <_printf_common+0xb0>
 8006570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006574:	4641      	mov	r1, r8
 8006576:	4638      	mov	r0, r7
 8006578:	47c8      	blx	r9
 800657a:	3001      	adds	r0, #1
 800657c:	d01e      	beq.n	80065bc <_printf_common+0xa4>
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	6922      	ldr	r2, [r4, #16]
 8006582:	f003 0306 	and.w	r3, r3, #6
 8006586:	2b04      	cmp	r3, #4
 8006588:	bf02      	ittt	eq
 800658a:	68e5      	ldreq	r5, [r4, #12]
 800658c:	6833      	ldreq	r3, [r6, #0]
 800658e:	1aed      	subeq	r5, r5, r3
 8006590:	68a3      	ldr	r3, [r4, #8]
 8006592:	bf0c      	ite	eq
 8006594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006598:	2500      	movne	r5, #0
 800659a:	4293      	cmp	r3, r2
 800659c:	bfc4      	itt	gt
 800659e:	1a9b      	subgt	r3, r3, r2
 80065a0:	18ed      	addgt	r5, r5, r3
 80065a2:	2600      	movs	r6, #0
 80065a4:	341a      	adds	r4, #26
 80065a6:	42b5      	cmp	r5, r6
 80065a8:	d11a      	bne.n	80065e0 <_printf_common+0xc8>
 80065aa:	2000      	movs	r0, #0
 80065ac:	e008      	b.n	80065c0 <_printf_common+0xa8>
 80065ae:	2301      	movs	r3, #1
 80065b0:	4652      	mov	r2, sl
 80065b2:	4641      	mov	r1, r8
 80065b4:	4638      	mov	r0, r7
 80065b6:	47c8      	blx	r9
 80065b8:	3001      	adds	r0, #1
 80065ba:	d103      	bne.n	80065c4 <_printf_common+0xac>
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c4:	3501      	adds	r5, #1
 80065c6:	e7c6      	b.n	8006556 <_printf_common+0x3e>
 80065c8:	18e1      	adds	r1, r4, r3
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	2030      	movs	r0, #48	@ 0x30
 80065ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065d2:	4422      	add	r2, r4
 80065d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065dc:	3302      	adds	r3, #2
 80065de:	e7c7      	b.n	8006570 <_printf_common+0x58>
 80065e0:	2301      	movs	r3, #1
 80065e2:	4622      	mov	r2, r4
 80065e4:	4641      	mov	r1, r8
 80065e6:	4638      	mov	r0, r7
 80065e8:	47c8      	blx	r9
 80065ea:	3001      	adds	r0, #1
 80065ec:	d0e6      	beq.n	80065bc <_printf_common+0xa4>
 80065ee:	3601      	adds	r6, #1
 80065f0:	e7d9      	b.n	80065a6 <_printf_common+0x8e>
	...

080065f4 <_printf_i>:
 80065f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065f8:	7e0f      	ldrb	r7, [r1, #24]
 80065fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065fc:	2f78      	cmp	r7, #120	@ 0x78
 80065fe:	4691      	mov	r9, r2
 8006600:	4680      	mov	r8, r0
 8006602:	460c      	mov	r4, r1
 8006604:	469a      	mov	sl, r3
 8006606:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800660a:	d807      	bhi.n	800661c <_printf_i+0x28>
 800660c:	2f62      	cmp	r7, #98	@ 0x62
 800660e:	d80a      	bhi.n	8006626 <_printf_i+0x32>
 8006610:	2f00      	cmp	r7, #0
 8006612:	f000 80d2 	beq.w	80067ba <_printf_i+0x1c6>
 8006616:	2f58      	cmp	r7, #88	@ 0x58
 8006618:	f000 80b9 	beq.w	800678e <_printf_i+0x19a>
 800661c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006620:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006624:	e03a      	b.n	800669c <_printf_i+0xa8>
 8006626:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800662a:	2b15      	cmp	r3, #21
 800662c:	d8f6      	bhi.n	800661c <_printf_i+0x28>
 800662e:	a101      	add	r1, pc, #4	@ (adr r1, 8006634 <_printf_i+0x40>)
 8006630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006634:	0800668d 	.word	0x0800668d
 8006638:	080066a1 	.word	0x080066a1
 800663c:	0800661d 	.word	0x0800661d
 8006640:	0800661d 	.word	0x0800661d
 8006644:	0800661d 	.word	0x0800661d
 8006648:	0800661d 	.word	0x0800661d
 800664c:	080066a1 	.word	0x080066a1
 8006650:	0800661d 	.word	0x0800661d
 8006654:	0800661d 	.word	0x0800661d
 8006658:	0800661d 	.word	0x0800661d
 800665c:	0800661d 	.word	0x0800661d
 8006660:	080067a1 	.word	0x080067a1
 8006664:	080066cb 	.word	0x080066cb
 8006668:	0800675b 	.word	0x0800675b
 800666c:	0800661d 	.word	0x0800661d
 8006670:	0800661d 	.word	0x0800661d
 8006674:	080067c3 	.word	0x080067c3
 8006678:	0800661d 	.word	0x0800661d
 800667c:	080066cb 	.word	0x080066cb
 8006680:	0800661d 	.word	0x0800661d
 8006684:	0800661d 	.word	0x0800661d
 8006688:	08006763 	.word	0x08006763
 800668c:	6833      	ldr	r3, [r6, #0]
 800668e:	1d1a      	adds	r2, r3, #4
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6032      	str	r2, [r6, #0]
 8006694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006698:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800669c:	2301      	movs	r3, #1
 800669e:	e09d      	b.n	80067dc <_printf_i+0x1e8>
 80066a0:	6833      	ldr	r3, [r6, #0]
 80066a2:	6820      	ldr	r0, [r4, #0]
 80066a4:	1d19      	adds	r1, r3, #4
 80066a6:	6031      	str	r1, [r6, #0]
 80066a8:	0606      	lsls	r6, r0, #24
 80066aa:	d501      	bpl.n	80066b0 <_printf_i+0xbc>
 80066ac:	681d      	ldr	r5, [r3, #0]
 80066ae:	e003      	b.n	80066b8 <_printf_i+0xc4>
 80066b0:	0645      	lsls	r5, r0, #25
 80066b2:	d5fb      	bpl.n	80066ac <_printf_i+0xb8>
 80066b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066b8:	2d00      	cmp	r5, #0
 80066ba:	da03      	bge.n	80066c4 <_printf_i+0xd0>
 80066bc:	232d      	movs	r3, #45	@ 0x2d
 80066be:	426d      	negs	r5, r5
 80066c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066c4:	4859      	ldr	r0, [pc, #356]	@ (800682c <_printf_i+0x238>)
 80066c6:	230a      	movs	r3, #10
 80066c8:	e011      	b.n	80066ee <_printf_i+0xfa>
 80066ca:	6821      	ldr	r1, [r4, #0]
 80066cc:	6833      	ldr	r3, [r6, #0]
 80066ce:	0608      	lsls	r0, r1, #24
 80066d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80066d4:	d402      	bmi.n	80066dc <_printf_i+0xe8>
 80066d6:	0649      	lsls	r1, r1, #25
 80066d8:	bf48      	it	mi
 80066da:	b2ad      	uxthmi	r5, r5
 80066dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80066de:	4853      	ldr	r0, [pc, #332]	@ (800682c <_printf_i+0x238>)
 80066e0:	6033      	str	r3, [r6, #0]
 80066e2:	bf14      	ite	ne
 80066e4:	230a      	movne	r3, #10
 80066e6:	2308      	moveq	r3, #8
 80066e8:	2100      	movs	r1, #0
 80066ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066ee:	6866      	ldr	r6, [r4, #4]
 80066f0:	60a6      	str	r6, [r4, #8]
 80066f2:	2e00      	cmp	r6, #0
 80066f4:	bfa2      	ittt	ge
 80066f6:	6821      	ldrge	r1, [r4, #0]
 80066f8:	f021 0104 	bicge.w	r1, r1, #4
 80066fc:	6021      	strge	r1, [r4, #0]
 80066fe:	b90d      	cbnz	r5, 8006704 <_printf_i+0x110>
 8006700:	2e00      	cmp	r6, #0
 8006702:	d04b      	beq.n	800679c <_printf_i+0x1a8>
 8006704:	4616      	mov	r6, r2
 8006706:	fbb5 f1f3 	udiv	r1, r5, r3
 800670a:	fb03 5711 	mls	r7, r3, r1, r5
 800670e:	5dc7      	ldrb	r7, [r0, r7]
 8006710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006714:	462f      	mov	r7, r5
 8006716:	42bb      	cmp	r3, r7
 8006718:	460d      	mov	r5, r1
 800671a:	d9f4      	bls.n	8006706 <_printf_i+0x112>
 800671c:	2b08      	cmp	r3, #8
 800671e:	d10b      	bne.n	8006738 <_printf_i+0x144>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	07df      	lsls	r7, r3, #31
 8006724:	d508      	bpl.n	8006738 <_printf_i+0x144>
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	6861      	ldr	r1, [r4, #4]
 800672a:	4299      	cmp	r1, r3
 800672c:	bfde      	ittt	le
 800672e:	2330      	movle	r3, #48	@ 0x30
 8006730:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006734:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006738:	1b92      	subs	r2, r2, r6
 800673a:	6122      	str	r2, [r4, #16]
 800673c:	f8cd a000 	str.w	sl, [sp]
 8006740:	464b      	mov	r3, r9
 8006742:	aa03      	add	r2, sp, #12
 8006744:	4621      	mov	r1, r4
 8006746:	4640      	mov	r0, r8
 8006748:	f7ff fee6 	bl	8006518 <_printf_common>
 800674c:	3001      	adds	r0, #1
 800674e:	d14a      	bne.n	80067e6 <_printf_i+0x1f2>
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	b004      	add	sp, #16
 8006756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	f043 0320 	orr.w	r3, r3, #32
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	4833      	ldr	r0, [pc, #204]	@ (8006830 <_printf_i+0x23c>)
 8006764:	2778      	movs	r7, #120	@ 0x78
 8006766:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	6831      	ldr	r1, [r6, #0]
 800676e:	061f      	lsls	r7, r3, #24
 8006770:	f851 5b04 	ldr.w	r5, [r1], #4
 8006774:	d402      	bmi.n	800677c <_printf_i+0x188>
 8006776:	065f      	lsls	r7, r3, #25
 8006778:	bf48      	it	mi
 800677a:	b2ad      	uxthmi	r5, r5
 800677c:	6031      	str	r1, [r6, #0]
 800677e:	07d9      	lsls	r1, r3, #31
 8006780:	bf44      	itt	mi
 8006782:	f043 0320 	orrmi.w	r3, r3, #32
 8006786:	6023      	strmi	r3, [r4, #0]
 8006788:	b11d      	cbz	r5, 8006792 <_printf_i+0x19e>
 800678a:	2310      	movs	r3, #16
 800678c:	e7ac      	b.n	80066e8 <_printf_i+0xf4>
 800678e:	4827      	ldr	r0, [pc, #156]	@ (800682c <_printf_i+0x238>)
 8006790:	e7e9      	b.n	8006766 <_printf_i+0x172>
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	f023 0320 	bic.w	r3, r3, #32
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	e7f6      	b.n	800678a <_printf_i+0x196>
 800679c:	4616      	mov	r6, r2
 800679e:	e7bd      	b.n	800671c <_printf_i+0x128>
 80067a0:	6833      	ldr	r3, [r6, #0]
 80067a2:	6825      	ldr	r5, [r4, #0]
 80067a4:	6961      	ldr	r1, [r4, #20]
 80067a6:	1d18      	adds	r0, r3, #4
 80067a8:	6030      	str	r0, [r6, #0]
 80067aa:	062e      	lsls	r6, r5, #24
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	d501      	bpl.n	80067b4 <_printf_i+0x1c0>
 80067b0:	6019      	str	r1, [r3, #0]
 80067b2:	e002      	b.n	80067ba <_printf_i+0x1c6>
 80067b4:	0668      	lsls	r0, r5, #25
 80067b6:	d5fb      	bpl.n	80067b0 <_printf_i+0x1bc>
 80067b8:	8019      	strh	r1, [r3, #0]
 80067ba:	2300      	movs	r3, #0
 80067bc:	6123      	str	r3, [r4, #16]
 80067be:	4616      	mov	r6, r2
 80067c0:	e7bc      	b.n	800673c <_printf_i+0x148>
 80067c2:	6833      	ldr	r3, [r6, #0]
 80067c4:	1d1a      	adds	r2, r3, #4
 80067c6:	6032      	str	r2, [r6, #0]
 80067c8:	681e      	ldr	r6, [r3, #0]
 80067ca:	6862      	ldr	r2, [r4, #4]
 80067cc:	2100      	movs	r1, #0
 80067ce:	4630      	mov	r0, r6
 80067d0:	f7f9 fcfe 	bl	80001d0 <memchr>
 80067d4:	b108      	cbz	r0, 80067da <_printf_i+0x1e6>
 80067d6:	1b80      	subs	r0, r0, r6
 80067d8:	6060      	str	r0, [r4, #4]
 80067da:	6863      	ldr	r3, [r4, #4]
 80067dc:	6123      	str	r3, [r4, #16]
 80067de:	2300      	movs	r3, #0
 80067e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067e4:	e7aa      	b.n	800673c <_printf_i+0x148>
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	4632      	mov	r2, r6
 80067ea:	4649      	mov	r1, r9
 80067ec:	4640      	mov	r0, r8
 80067ee:	47d0      	blx	sl
 80067f0:	3001      	adds	r0, #1
 80067f2:	d0ad      	beq.n	8006750 <_printf_i+0x15c>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	079b      	lsls	r3, r3, #30
 80067f8:	d413      	bmi.n	8006822 <_printf_i+0x22e>
 80067fa:	68e0      	ldr	r0, [r4, #12]
 80067fc:	9b03      	ldr	r3, [sp, #12]
 80067fe:	4298      	cmp	r0, r3
 8006800:	bfb8      	it	lt
 8006802:	4618      	movlt	r0, r3
 8006804:	e7a6      	b.n	8006754 <_printf_i+0x160>
 8006806:	2301      	movs	r3, #1
 8006808:	4632      	mov	r2, r6
 800680a:	4649      	mov	r1, r9
 800680c:	4640      	mov	r0, r8
 800680e:	47d0      	blx	sl
 8006810:	3001      	adds	r0, #1
 8006812:	d09d      	beq.n	8006750 <_printf_i+0x15c>
 8006814:	3501      	adds	r5, #1
 8006816:	68e3      	ldr	r3, [r4, #12]
 8006818:	9903      	ldr	r1, [sp, #12]
 800681a:	1a5b      	subs	r3, r3, r1
 800681c:	42ab      	cmp	r3, r5
 800681e:	dcf2      	bgt.n	8006806 <_printf_i+0x212>
 8006820:	e7eb      	b.n	80067fa <_printf_i+0x206>
 8006822:	2500      	movs	r5, #0
 8006824:	f104 0619 	add.w	r6, r4, #25
 8006828:	e7f5      	b.n	8006816 <_printf_i+0x222>
 800682a:	bf00      	nop
 800682c:	08006ef6 	.word	0x08006ef6
 8006830:	08006f07 	.word	0x08006f07

08006834 <__swbuf_r>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	460e      	mov	r6, r1
 8006838:	4614      	mov	r4, r2
 800683a:	4605      	mov	r5, r0
 800683c:	b118      	cbz	r0, 8006846 <__swbuf_r+0x12>
 800683e:	6a03      	ldr	r3, [r0, #32]
 8006840:	b90b      	cbnz	r3, 8006846 <__swbuf_r+0x12>
 8006842:	f7fe f9f5 	bl	8004c30 <__sinit>
 8006846:	69a3      	ldr	r3, [r4, #24]
 8006848:	60a3      	str	r3, [r4, #8]
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	071a      	lsls	r2, r3, #28
 800684e:	d501      	bpl.n	8006854 <__swbuf_r+0x20>
 8006850:	6923      	ldr	r3, [r4, #16]
 8006852:	b943      	cbnz	r3, 8006866 <__swbuf_r+0x32>
 8006854:	4621      	mov	r1, r4
 8006856:	4628      	mov	r0, r5
 8006858:	f000 f82a 	bl	80068b0 <__swsetup_r>
 800685c:	b118      	cbz	r0, 8006866 <__swbuf_r+0x32>
 800685e:	f04f 37ff 	mov.w	r7, #4294967295
 8006862:	4638      	mov	r0, r7
 8006864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	6922      	ldr	r2, [r4, #16]
 800686a:	1a98      	subs	r0, r3, r2
 800686c:	6963      	ldr	r3, [r4, #20]
 800686e:	b2f6      	uxtb	r6, r6
 8006870:	4283      	cmp	r3, r0
 8006872:	4637      	mov	r7, r6
 8006874:	dc05      	bgt.n	8006882 <__swbuf_r+0x4e>
 8006876:	4621      	mov	r1, r4
 8006878:	4628      	mov	r0, r5
 800687a:	f7ff fc81 	bl	8006180 <_fflush_r>
 800687e:	2800      	cmp	r0, #0
 8006880:	d1ed      	bne.n	800685e <__swbuf_r+0x2a>
 8006882:	68a3      	ldr	r3, [r4, #8]
 8006884:	3b01      	subs	r3, #1
 8006886:	60a3      	str	r3, [r4, #8]
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	6022      	str	r2, [r4, #0]
 800688e:	701e      	strb	r6, [r3, #0]
 8006890:	6962      	ldr	r2, [r4, #20]
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	429a      	cmp	r2, r3
 8006896:	d004      	beq.n	80068a2 <__swbuf_r+0x6e>
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	07db      	lsls	r3, r3, #31
 800689c:	d5e1      	bpl.n	8006862 <__swbuf_r+0x2e>
 800689e:	2e0a      	cmp	r6, #10
 80068a0:	d1df      	bne.n	8006862 <__swbuf_r+0x2e>
 80068a2:	4621      	mov	r1, r4
 80068a4:	4628      	mov	r0, r5
 80068a6:	f7ff fc6b 	bl	8006180 <_fflush_r>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d0d9      	beq.n	8006862 <__swbuf_r+0x2e>
 80068ae:	e7d6      	b.n	800685e <__swbuf_r+0x2a>

080068b0 <__swsetup_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4b29      	ldr	r3, [pc, #164]	@ (8006958 <__swsetup_r+0xa8>)
 80068b4:	4605      	mov	r5, r0
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	460c      	mov	r4, r1
 80068ba:	b118      	cbz	r0, 80068c4 <__swsetup_r+0x14>
 80068bc:	6a03      	ldr	r3, [r0, #32]
 80068be:	b90b      	cbnz	r3, 80068c4 <__swsetup_r+0x14>
 80068c0:	f7fe f9b6 	bl	8004c30 <__sinit>
 80068c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c8:	0719      	lsls	r1, r3, #28
 80068ca:	d422      	bmi.n	8006912 <__swsetup_r+0x62>
 80068cc:	06da      	lsls	r2, r3, #27
 80068ce:	d407      	bmi.n	80068e0 <__swsetup_r+0x30>
 80068d0:	2209      	movs	r2, #9
 80068d2:	602a      	str	r2, [r5, #0]
 80068d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068d8:	81a3      	strh	r3, [r4, #12]
 80068da:	f04f 30ff 	mov.w	r0, #4294967295
 80068de:	e033      	b.n	8006948 <__swsetup_r+0x98>
 80068e0:	0758      	lsls	r0, r3, #29
 80068e2:	d512      	bpl.n	800690a <__swsetup_r+0x5a>
 80068e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068e6:	b141      	cbz	r1, 80068fa <__swsetup_r+0x4a>
 80068e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068ec:	4299      	cmp	r1, r3
 80068ee:	d002      	beq.n	80068f6 <__swsetup_r+0x46>
 80068f0:	4628      	mov	r0, r5
 80068f2:	f7fe fabd 	bl	8004e70 <_free_r>
 80068f6:	2300      	movs	r3, #0
 80068f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006900:	81a3      	strh	r3, [r4, #12]
 8006902:	2300      	movs	r3, #0
 8006904:	6063      	str	r3, [r4, #4]
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	f043 0308 	orr.w	r3, r3, #8
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	b94b      	cbnz	r3, 800692a <__swsetup_r+0x7a>
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800691c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006920:	d003      	beq.n	800692a <__swsetup_r+0x7a>
 8006922:	4621      	mov	r1, r4
 8006924:	4628      	mov	r0, r5
 8006926:	f000 f883 	bl	8006a30 <__smakebuf_r>
 800692a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800692e:	f013 0201 	ands.w	r2, r3, #1
 8006932:	d00a      	beq.n	800694a <__swsetup_r+0x9a>
 8006934:	2200      	movs	r2, #0
 8006936:	60a2      	str	r2, [r4, #8]
 8006938:	6962      	ldr	r2, [r4, #20]
 800693a:	4252      	negs	r2, r2
 800693c:	61a2      	str	r2, [r4, #24]
 800693e:	6922      	ldr	r2, [r4, #16]
 8006940:	b942      	cbnz	r2, 8006954 <__swsetup_r+0xa4>
 8006942:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006946:	d1c5      	bne.n	80068d4 <__swsetup_r+0x24>
 8006948:	bd38      	pop	{r3, r4, r5, pc}
 800694a:	0799      	lsls	r1, r3, #30
 800694c:	bf58      	it	pl
 800694e:	6962      	ldrpl	r2, [r4, #20]
 8006950:	60a2      	str	r2, [r4, #8]
 8006952:	e7f4      	b.n	800693e <__swsetup_r+0x8e>
 8006954:	2000      	movs	r0, #0
 8006956:	e7f7      	b.n	8006948 <__swsetup_r+0x98>
 8006958:	20000184 	.word	0x20000184

0800695c <_raise_r>:
 800695c:	291f      	cmp	r1, #31
 800695e:	b538      	push	{r3, r4, r5, lr}
 8006960:	4605      	mov	r5, r0
 8006962:	460c      	mov	r4, r1
 8006964:	d904      	bls.n	8006970 <_raise_r+0x14>
 8006966:	2316      	movs	r3, #22
 8006968:	6003      	str	r3, [r0, #0]
 800696a:	f04f 30ff 	mov.w	r0, #4294967295
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006972:	b112      	cbz	r2, 800697a <_raise_r+0x1e>
 8006974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006978:	b94b      	cbnz	r3, 800698e <_raise_r+0x32>
 800697a:	4628      	mov	r0, r5
 800697c:	f000 f830 	bl	80069e0 <_getpid_r>
 8006980:	4622      	mov	r2, r4
 8006982:	4601      	mov	r1, r0
 8006984:	4628      	mov	r0, r5
 8006986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800698a:	f000 b817 	b.w	80069bc <_kill_r>
 800698e:	2b01      	cmp	r3, #1
 8006990:	d00a      	beq.n	80069a8 <_raise_r+0x4c>
 8006992:	1c59      	adds	r1, r3, #1
 8006994:	d103      	bne.n	800699e <_raise_r+0x42>
 8006996:	2316      	movs	r3, #22
 8006998:	6003      	str	r3, [r0, #0]
 800699a:	2001      	movs	r0, #1
 800699c:	e7e7      	b.n	800696e <_raise_r+0x12>
 800699e:	2100      	movs	r1, #0
 80069a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80069a4:	4620      	mov	r0, r4
 80069a6:	4798      	blx	r3
 80069a8:	2000      	movs	r0, #0
 80069aa:	e7e0      	b.n	800696e <_raise_r+0x12>

080069ac <raise>:
 80069ac:	4b02      	ldr	r3, [pc, #8]	@ (80069b8 <raise+0xc>)
 80069ae:	4601      	mov	r1, r0
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	f7ff bfd3 	b.w	800695c <_raise_r>
 80069b6:	bf00      	nop
 80069b8:	20000184 	.word	0x20000184

080069bc <_kill_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4d07      	ldr	r5, [pc, #28]	@ (80069dc <_kill_r+0x20>)
 80069c0:	2300      	movs	r3, #0
 80069c2:	4604      	mov	r4, r0
 80069c4:	4608      	mov	r0, r1
 80069c6:	4611      	mov	r1, r2
 80069c8:	602b      	str	r3, [r5, #0]
 80069ca:	f7fb f9df 	bl	8001d8c <_kill>
 80069ce:	1c43      	adds	r3, r0, #1
 80069d0:	d102      	bne.n	80069d8 <_kill_r+0x1c>
 80069d2:	682b      	ldr	r3, [r5, #0]
 80069d4:	b103      	cbz	r3, 80069d8 <_kill_r+0x1c>
 80069d6:	6023      	str	r3, [r4, #0]
 80069d8:	bd38      	pop	{r3, r4, r5, pc}
 80069da:	bf00      	nop
 80069dc:	200004b8 	.word	0x200004b8

080069e0 <_getpid_r>:
 80069e0:	f7fb b9cc 	b.w	8001d7c <_getpid>

080069e4 <__swhatbuf_r>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	460c      	mov	r4, r1
 80069e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ec:	2900      	cmp	r1, #0
 80069ee:	b096      	sub	sp, #88	@ 0x58
 80069f0:	4615      	mov	r5, r2
 80069f2:	461e      	mov	r6, r3
 80069f4:	da0d      	bge.n	8006a12 <__swhatbuf_r+0x2e>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80069fc:	f04f 0100 	mov.w	r1, #0
 8006a00:	bf14      	ite	ne
 8006a02:	2340      	movne	r3, #64	@ 0x40
 8006a04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a08:	2000      	movs	r0, #0
 8006a0a:	6031      	str	r1, [r6, #0]
 8006a0c:	602b      	str	r3, [r5, #0]
 8006a0e:	b016      	add	sp, #88	@ 0x58
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
 8006a12:	466a      	mov	r2, sp
 8006a14:	f000 f848 	bl	8006aa8 <_fstat_r>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	dbec      	blt.n	80069f6 <__swhatbuf_r+0x12>
 8006a1c:	9901      	ldr	r1, [sp, #4]
 8006a1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a26:	4259      	negs	r1, r3
 8006a28:	4159      	adcs	r1, r3
 8006a2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a2e:	e7eb      	b.n	8006a08 <__swhatbuf_r+0x24>

08006a30 <__smakebuf_r>:
 8006a30:	898b      	ldrh	r3, [r1, #12]
 8006a32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a34:	079d      	lsls	r5, r3, #30
 8006a36:	4606      	mov	r6, r0
 8006a38:	460c      	mov	r4, r1
 8006a3a:	d507      	bpl.n	8006a4c <__smakebuf_r+0x1c>
 8006a3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	6123      	str	r3, [r4, #16]
 8006a44:	2301      	movs	r3, #1
 8006a46:	6163      	str	r3, [r4, #20]
 8006a48:	b003      	add	sp, #12
 8006a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a4c:	ab01      	add	r3, sp, #4
 8006a4e:	466a      	mov	r2, sp
 8006a50:	f7ff ffc8 	bl	80069e4 <__swhatbuf_r>
 8006a54:	9f00      	ldr	r7, [sp, #0]
 8006a56:	4605      	mov	r5, r0
 8006a58:	4639      	mov	r1, r7
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f7fe fdae 	bl	80055bc <_malloc_r>
 8006a60:	b948      	cbnz	r0, 8006a76 <__smakebuf_r+0x46>
 8006a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a66:	059a      	lsls	r2, r3, #22
 8006a68:	d4ee      	bmi.n	8006a48 <__smakebuf_r+0x18>
 8006a6a:	f023 0303 	bic.w	r3, r3, #3
 8006a6e:	f043 0302 	orr.w	r3, r3, #2
 8006a72:	81a3      	strh	r3, [r4, #12]
 8006a74:	e7e2      	b.n	8006a3c <__smakebuf_r+0xc>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	6020      	str	r0, [r4, #0]
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7e:	81a3      	strh	r3, [r4, #12]
 8006a80:	9b01      	ldr	r3, [sp, #4]
 8006a82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a86:	b15b      	cbz	r3, 8006aa0 <__smakebuf_r+0x70>
 8006a88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f000 f81d 	bl	8006acc <_isatty_r>
 8006a92:	b128      	cbz	r0, 8006aa0 <__smakebuf_r+0x70>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	f023 0303 	bic.w	r3, r3, #3
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	431d      	orrs	r5, r3
 8006aa4:	81a5      	strh	r5, [r4, #12]
 8006aa6:	e7cf      	b.n	8006a48 <__smakebuf_r+0x18>

08006aa8 <_fstat_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4d07      	ldr	r5, [pc, #28]	@ (8006ac8 <_fstat_r+0x20>)
 8006aac:	2300      	movs	r3, #0
 8006aae:	4604      	mov	r4, r0
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	602b      	str	r3, [r5, #0]
 8006ab6:	f7fb f9c9 	bl	8001e4c <_fstat>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	d102      	bne.n	8006ac4 <_fstat_r+0x1c>
 8006abe:	682b      	ldr	r3, [r5, #0]
 8006ac0:	b103      	cbz	r3, 8006ac4 <_fstat_r+0x1c>
 8006ac2:	6023      	str	r3, [r4, #0]
 8006ac4:	bd38      	pop	{r3, r4, r5, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200004b8 	.word	0x200004b8

08006acc <_isatty_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4d06      	ldr	r5, [pc, #24]	@ (8006ae8 <_isatty_r+0x1c>)
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	602b      	str	r3, [r5, #0]
 8006ad8:	f7fb f9c8 	bl	8001e6c <_isatty>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_isatty_r+0x1a>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_isatty_r+0x1a>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	200004b8 	.word	0x200004b8

08006aec <_init>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr

08006af8 <_fini>:
 8006af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afa:	bf00      	nop
 8006afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afe:	bc08      	pop	{r3}
 8006b00:	469e      	mov	lr, r3
 8006b02:	4770      	bx	lr
